//
// Copyright 2021, 2022 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file defines the gNSI API to be used for the OpenConfig Path-based
// Authorization policy rotation.
syntax = "proto3";

package gnsi.pathz;

import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";
import "github.com/openconfig/gnoi/types/types.proto";
import "github.com/openconfig/gnsi/pathz/authorization.proto";

option go_package = "github.com/openconfig/gnsi/pathz";
option (gnoi.types.gnoi_version) = "0.1.0";

// The OpenConfig gNMI Path-based Authorization Policy Management Service
// exported by targets.
//

// The OpenConfig Path-based Authorization Policy defines which principals
// are permitted to access which OpenConfig path.

// The service allows for change/update of the OpenConfig Path-based
// Authorization Policy using the Rotate() RPC.
// There can be only one OpenConfig Path-based Authorization Policy installed on
// a target.

service Pathz {

  // Rotate will replace an existing OpenConfig gNMI Path-based Authorization
  // Policy on the target.
  // If the stream is broken or any of the steps fail the target must rollback
  // to the original state, i.e. revert any changes to the OpenConfig gNMI
  // Path-based Authorization Policy made during this RPC.
  //
  // Note that only one such RPC can be in progress. An attempt to call this
  // RPC while another is already in progress will be rejected with the
  // `UNAVAILABLE` gRPC error.
  //
  // The following describes the sequence of messages that must be exchanged
  // in the Rotate() RPC.
  //
  // Sequence of expected messages:
  //   Step 1: Start the stream
  //     Client ----> Rotate() RPC stream begin ------> Target
  //
  //   Step 2: Send OpenConfig gNMI Path-based Authorization Policy to Target.
  //     Client --> UploadRequest(pathz_policy) ----> Target
  //     Client <-- UploadResponse <--- Target
  //
  //   Step 3 (optional): Test/Validation by the client.
  //     During this step client calls (possibly multiple times)
  //     the Probe(POLICY_INSTANCE_SANDBOX) RPC to check that a combination of
  //     user ID, gNMI path and operation mode that is supposed to be allowed by
  //     the new policy and validates that the response is ACTION_PERMIT.
  //     Additionally the client should call the Probe(POLICY_INSTANCE_SANDBOX)
  //     RPC with a combination of user ID, gNMI path and operation mode that is
  //     not allowed in the new policy and the attempt must result in
  //     the ACTION_DENY response proving that the new policy "works".
  //     Once verified, the client then proceeds to finalize the rotation.
  //     If the verification did not succeed the client will cancel the Rotate
  //     RPC thereby forcing the target to perform a rollback of the new
  //     OpenConfig gNMI Path-based Authorization Policy to the previous one.
  //
  //   Step 4: Final commit.
  //     Client ---> FinalizeRequest ----> Target
  //
  rpc Rotate(stream RotateRequest)
      returns (stream RotateResponse);

  // Probe allows for evaluation of the pathz policy engine response to a gNMI
  // operation performed by a user on a single gNMI path.
  // The response is based on the instance of policy specified in the request
  // and is evaluated without actually performing the gNMI operation.
  rpc Probe(ProbeRequest) returns (ProbeResponse);

  // Get returns specified instance of the OpenConfig gNMI Path-based
  // Authorization Policy together with its version and created-on information.
  rpc Get(GetRequest) returns (GetResponse);
}

// Request messages to rotate existing OpenConfig gNMI Path-based Authorization
// Policy on the target.
message RotateRequest {
  // Request Messages.
  oneof rotate_request {
    UploadRequest upload_request = 1;
    FinalizeRequest finalize_rotation = 2;
  }

  // If set to `true` the requested operation will succeed even if the
  // combination of `id` and `version` is already in use (is not unique).
  // If set to `false` the requested operation will fail and the streaming RPC
  // will be closed with the `ALREADY_EXISTS` gRPC error if the combination
  // of `id` and `version` is already in use (is not unique).
  // It is a no-op for the `finalize_rotation` request.
  bool force_overwrite = 3;
}

// Response messages from the target.
message RotateResponse {
}

// A Finalize message is sent to the target to confirm the rotation of
// the OpenConfig gNMI Path-based Authorization Policy and that it should not be
// rolled back when the RPC concludes.
// Note that the OpenConfig gNMI Path-based Authorization Policy change is
// considered rolled back by the target if the target returns an error as
// response to the Finalize message.
message FinalizeRequest {
}

// UploadRequest instructs the target to store the given OpenConfig gNMI Path-
// based Authorization Policy.
//
// If there is another ongoing Rotate RPC the UploadRequest must fail.
message UploadRequest {
  // `version` contains versioning information that is controlled by
  // the policy manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the target policy management service). Policy managers
  // should choose version strings as discrete as possible to ease alert
  // generation (eg, for policies sourced from a bundle, the timestamp of
  // the bundle should be used but not the time when the policy is pushed to
  // a particular switch). Also, such version string should be persisted by
  // the device onto non-volatile memory for preservation across system
  // reboots.
  string version = 1;

  // `created_on` contains information when the policy was created.
  // This information is controlled by the policy manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device policy
  // management service). Policy manager should use the timestamp of the moment
  // when policy was created, not the time when the policy is pushed to
  // a particular switch).
  // Also, this timestamp should be persisted by the device onto non-volatile
  // memory for preservation across system reboots.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT a.k.a. unix epoch.
  uint64 created_on = 2;

  // The actual OpenConfig gNMI Path-based Authorization Policy.
  AuthorizationPolicy policy = 3;
}

message UploadResponse {
}

enum PolicyInstance {
  // Invalid instance. Referring to this instance in any of the RPCs always
  // results in an error report.
  POLICY_INSTANCE_UNSPECIFIED = 0;

  // The policy that is currently used by the gNMI service to authorize access.
  POLICY_INSTANCE_ACTIVE = 1;

  // The most recent policy that has been uploaded during the Rotation() RPC.
  // If there is no Rotate() RPC in progress, then referring to this instance
  // of the OpenConfig gNMI Path-based Authorization Policy will result in
  // an error.
  POLICY_INSTANCE_SANDBOX = 2;
}

// ProbeRequest contains a single user name and gNMI path being attempted.
// Data returned to an RPC caller should adhere to the policy.
message ProbeRequest {
  // The user name to be used to perform the evaluation.
  string user = 1;

  // The gNMI path to be used to perform the evaluation.
  gnmi.Path path = 2;

  // The operation type (read or write) to be used to perform the evaluation.
  Mode mode = 3;

  // The instance of the OpenConfig gNMI Path-based Authorization Policy to be
  // used to perform the evaluation.
  PolicyInstance policy_instance = 4;
}

// ProbeResponse returns the ACK/NACK for a single user request
// as evaluated against the current policy, along with the version of the policy
// that the gNMI path/user were evaluated against.
message ProbeResponse {
  Action action = 1;
  string version = 2;
}

// GetRequest specifies which instance of the OpenConfig gNMI Path-based
// Authorization Policy is to be returned to the caller.
message GetRequest {
  // The instance of the OpenConfig gNMI Path-based Authorization Policy to be
  // returned to the caller.
  PolicyInstance policy_instance = 1;
}

// GetResponse returns the requested instance of the OpenConfig gNMI Path-based
// Authorization Policy together with `version` and `created_on` information.
message GetResponse {
  // `version` contains versioning information that is controlled by
  // the policy manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the target policy management service). Policy managers
  // should choose version strings as discrete as possible to ease alert
  // generation (eg, for policies sourced from a bundle, the timestamp of
  // the bundle should be used but not the time when the policy is pushed to
  // a particular switch). Also, such version string should be persisted by
  // the device onto non-volatile memory for preservation across system
  // reboots.
  string version = 1;

  // `created_on` contains information when the policy was created.
  // This information is controlled by the policy manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device policy
  // management service). Policy manager should use the timestamp of the moment
  // when policy was created, not the time when the policy is pushed to
  // a particular switch).
  // Also, this timestamp should be persisted by the device onto non-volatile
  // memory for preservation across system reboots.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT a.k.a. unix epoch.
  uint64 created_on = 2;

  // The actual OpenConfig gNMI Path-based Authorization Policy.
  AuthorizationPolicy policy = 3;
}
