// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: github.com/openconfig/gnsi/pathz/pathz.proto

package pathz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PathzClient is the client API for Pathz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathzClient interface {
	Rotate(ctx context.Context, opts ...grpc.CallOption) (Pathz_RotateClient, error)
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type pathzClient struct {
	cc grpc.ClientConnInterface
}

func NewPathzClient(cc grpc.ClientConnInterface) PathzClient {
	return &pathzClient{cc}
}

func (c *pathzClient) Rotate(ctx context.Context, opts ...grpc.CallOption) (Pathz_RotateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pathz_ServiceDesc.Streams[0], "/gnsi.pathz.v1.Pathz/Rotate", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathzRotateClient{stream}
	return x, nil
}

type Pathz_RotateClient interface {
	Send(*RotateRequest) error
	Recv() (*RotateResponse, error)
	grpc.ClientStream
}

type pathzRotateClient struct {
	grpc.ClientStream
}

func (x *pathzRotateClient) Send(m *RotateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pathzRotateClient) Recv() (*RotateResponse, error) {
	m := new(RotateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathzClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, "/gnsi.pathz.v1.Pathz/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathzClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/gnsi.pathz.v1.Pathz/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathzServer is the server API for Pathz service.
// All implementations must embed UnimplementedPathzServer
// for forward compatibility
type PathzServer interface {
	Rotate(Pathz_RotateServer) error
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedPathzServer()
}

// UnimplementedPathzServer must be embedded to have forward compatible implementations.
type UnimplementedPathzServer struct {
}

func (UnimplementedPathzServer) Rotate(Pathz_RotateServer) error {
	return status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedPathzServer) Probe(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}
func (UnimplementedPathzServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPathzServer) mustEmbedUnimplementedPathzServer() {}

// UnsafePathzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathzServer will
// result in compilation errors.
type UnsafePathzServer interface {
	mustEmbedUnimplementedPathzServer()
}

func RegisterPathzServer(s grpc.ServiceRegistrar, srv PathzServer) {
	s.RegisterService(&Pathz_ServiceDesc, srv)
}

func _Pathz_Rotate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PathzServer).Rotate(&pathzRotateServer{stream})
}

type Pathz_RotateServer interface {
	Send(*RotateResponse) error
	Recv() (*RotateRequest, error)
	grpc.ServerStream
}

type pathzRotateServer struct {
	grpc.ServerStream
}

func (x *pathzRotateServer) Send(m *RotateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pathzRotateServer) Recv() (*RotateRequest, error) {
	m := new(RotateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pathz_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathzServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnsi.pathz.v1.Pathz/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathzServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pathz_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathzServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnsi.pathz.v1.Pathz/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathzServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pathz_ServiceDesc is the grpc.ServiceDesc for Pathz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pathz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.pathz.v1.Pathz",
	HandlerType: (*PathzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Probe",
			Handler:    _Pathz_Probe_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Pathz_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rotate",
			Handler:       _Pathz_Rotate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnsi/pathz/pathz.proto",
}
