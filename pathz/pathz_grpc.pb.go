// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: github.com/openconfig/gnsi/pathz/pathz.proto

package pathz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Pathz_Rotate_FullMethodName = "/gnsi.pathz.v1.Pathz/Rotate"
	Pathz_Probe_FullMethodName  = "/gnsi.pathz.v1.Pathz/Probe"
	Pathz_Get_FullMethodName    = "/gnsi.pathz.v1.Pathz/Get"
)

// PathzClient is the client API for Pathz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathzClient interface {
	Rotate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateRequest, RotateResponse], error)
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type pathzClient struct {
	cc grpc.ClientConnInterface
}

func NewPathzClient(cc grpc.ClientConnInterface) PathzClient {
	return &pathzClient{cc}
}

func (c *pathzClient) Rotate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateRequest, RotateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Pathz_ServiceDesc.Streams[0], Pathz_Rotate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RotateRequest, RotateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pathz_RotateClient = grpc.BidiStreamingClient[RotateRequest, RotateResponse]

func (c *pathzClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, Pathz_Probe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathzClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Pathz_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathzServer is the server API for Pathz service.
// All implementations should embed UnimplementedPathzServer
// for forward compatibility.
type PathzServer interface {
	Rotate(grpc.BidiStreamingServer[RotateRequest, RotateResponse]) error
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

// UnimplementedPathzServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPathzServer struct{}

func (UnimplementedPathzServer) Rotate(grpc.BidiStreamingServer[RotateRequest, RotateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedPathzServer) Probe(context.Context, *ProbeRequest) (*ProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}
func (UnimplementedPathzServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPathzServer) testEmbeddedByValue() {}

// UnsafePathzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathzServer will
// result in compilation errors.
type UnsafePathzServer interface {
	mustEmbedUnimplementedPathzServer()
}

func RegisterPathzServer(s grpc.ServiceRegistrar, srv PathzServer) {
	// If the following call pancis, it indicates UnimplementedPathzServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Pathz_ServiceDesc, srv)
}

func _Pathz_Rotate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PathzServer).Rotate(&grpc.GenericServerStream[RotateRequest, RotateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pathz_RotateServer = grpc.BidiStreamingServer[RotateRequest, RotateResponse]

func _Pathz_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathzServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pathz_Probe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathzServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pathz_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathzServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pathz_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathzServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pathz_ServiceDesc is the grpc.ServiceDesc for Pathz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pathz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.pathz.v1.Pathz",
	HandlerType: (*PathzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Probe",
			Handler:    _Pathz_Probe_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Pathz_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rotate",
			Handler:       _Pathz_Rotate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnsi/pathz/pathz.proto",
}
