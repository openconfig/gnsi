// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: github.com/openconfig/gnsi/certz/certz.proto

package cert

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSRSuite int32

const (
	CSRSuite_CSRSUITE_CIPHER_UNSPECIFIED                                           CSRSuite = 0
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256         CSRSuite = 1
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384         CSRSuite = 2
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512         CSRSuite = 3
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256         CSRSuite = 4
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384         CSRSuite = 5
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512         CSRSuite = 6
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256         CSRSuite = 7
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384         CSRSuite = 8
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512         CSRSuite = 9
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256 CSRSuite = 10
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384 CSRSuite = 11
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512 CSRSuite = 12
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256  CSRSuite = 13
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384  CSRSuite = 14
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512  CSRSuite = 15
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256  CSRSuite = 16
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384  CSRSuite = 17
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512  CSRSuite = 18
	CSRSuite_CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519                                  CSRSuite = 19
)

// Enum value maps for CSRSuite.
var (
	CSRSuite_name = map[int32]string{
		0:  "CSRSUITE_CIPHER_UNSPECIFIED",
		1:  "CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256",
		2:  "CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384",
		3:  "CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512",
		4:  "CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256",
		5:  "CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384",
		6:  "CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512",
		7:  "CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256",
		8:  "CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384",
		9:  "CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512",
		10: "CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256",
		11: "CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384",
		12: "CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512",
		13: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256",
		14: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384",
		15: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512",
		16: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256",
		17: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384",
		18: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512",
		19: "CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519",
	}
	CSRSuite_value = map[string]int32{
		"CSRSUITE_CIPHER_UNSPECIFIED":                                           0,
		"CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256":         1,
		"CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384":         2,
		"CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512":         3,
		"CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256":         4,
		"CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384":         5,
		"CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512":         6,
		"CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256":         7,
		"CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384":         8,
		"CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512":         9,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256": 10,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384": 11,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512": 12,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256":  13,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384":  14,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512":  15,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256":  16,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384":  17,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512":  18,
		"CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519":                                  19,
	}
)

func (x CSRSuite) Enum() *CSRSuite {
	p := new(CSRSuite)
	*p = x
	return p
}

func (x CSRSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSRSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[0].Descriptor()
}

func (CSRSuite) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[0]
}

func (x CSRSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CSRSuite.Descriptor instead.
func (CSRSuite) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{0}
}

type CertificateType int32

const (
	CertificateType_CERTIFICATE_TYPE_UNSPECIFIED CertificateType = 0
	CertificateType_CERTIFICATE_TYPE_X509        CertificateType = 1
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERTIFICATE_TYPE_UNSPECIFIED",
		1: "CERTIFICATE_TYPE_X509",
	}
	CertificateType_value = map[string]int32{
		"CERTIFICATE_TYPE_UNSPECIFIED": 0,
		"CERTIFICATE_TYPE_X509":        1,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[1].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[1]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{1}
}

type CertificateEncoding int32

const (
	CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED CertificateEncoding = 0
	CertificateEncoding_CERTIFICATE_ENCODING_PEM         CertificateEncoding = 1
	CertificateEncoding_CERTIFICATE_ENCODING_DER         CertificateEncoding = 2
	CertificateEncoding_CERTIFICATE_ENCODING_CRT         CertificateEncoding = 3
)

// Enum value maps for CertificateEncoding.
var (
	CertificateEncoding_name = map[int32]string{
		0: "CERTIFICATE_ENCODING_UNSPECIFIED",
		1: "CERTIFICATE_ENCODING_PEM",
		2: "CERTIFICATE_ENCODING_DER",
		3: "CERTIFICATE_ENCODING_CRT",
	}
	CertificateEncoding_value = map[string]int32{
		"CERTIFICATE_ENCODING_UNSPECIFIED": 0,
		"CERTIFICATE_ENCODING_PEM":         1,
		"CERTIFICATE_ENCODING_DER":         2,
		"CERTIFICATE_ENCODING_CRT":         3,
	}
)

func (x CertificateEncoding) Enum() *CertificateEncoding {
	p := new(CertificateEncoding)
	*p = x
	return p
}

func (x CertificateEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[2].Descriptor()
}

func (CertificateEncoding) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[2]
}

func (x CertificateEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateEncoding.Descriptor instead.
func (CertificateEncoding) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{2}
}

type Certificate_CertSource int32

const (
	Certificate_CERT_SOURCE_UNSPECIFIED Certificate_CertSource = 0
	Certificate_CERT_SOURCE_OIDEVID     Certificate_CertSource = 1
	Certificate_CERT_SOURCE_IDEVID      Certificate_CertSource = 2
)

// Enum value maps for Certificate_CertSource.
var (
	Certificate_CertSource_name = map[int32]string{
		0: "CERT_SOURCE_UNSPECIFIED",
		1: "CERT_SOURCE_OIDEVID",
		2: "CERT_SOURCE_IDEVID",
	}
	Certificate_CertSource_value = map[string]int32{
		"CERT_SOURCE_UNSPECIFIED": 0,
		"CERT_SOURCE_OIDEVID":     1,
		"CERT_SOURCE_IDEVID":      2,
	}
)

func (x Certificate_CertSource) Enum() *Certificate_CertSource {
	p := new(Certificate_CertSource)
	*p = x
	return p
}

func (x Certificate_CertSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_CertSource) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[3].Descriptor()
}

func (Certificate_CertSource) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[3]
}

func (x Certificate_CertSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_CertSource.Descriptor instead.
func (Certificate_CertSource) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{15, 0}
}

type Certificate_KeySource int32

const (
	Certificate_KEY_SOURCE_UNSPECIFIED Certificate_KeySource = 0
	Certificate_KEY_SOURCE_IDEVID_TPM  Certificate_KeySource = 1
	Certificate_KEY_SOURCE_GENERATED   Certificate_KeySource = 2
)

// Enum value maps for Certificate_KeySource.
var (
	Certificate_KeySource_name = map[int32]string{
		0: "KEY_SOURCE_UNSPECIFIED",
		1: "KEY_SOURCE_IDEVID_TPM",
		2: "KEY_SOURCE_GENERATED",
	}
	Certificate_KeySource_value = map[string]int32{
		"KEY_SOURCE_UNSPECIFIED": 0,
		"KEY_SOURCE_IDEVID_TPM":  1,
		"KEY_SOURCE_GENERATED":   2,
	}
)

func (x Certificate_KeySource) Enum() *Certificate_KeySource {
	p := new(Certificate_KeySource)
	*p = x
	return p
}

func (x Certificate_KeySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_KeySource) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[4].Descriptor()
}

func (Certificate_KeySource) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[4]
}

func (x Certificate_KeySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_KeySource.Descriptor instead.
func (Certificate_KeySource) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{15, 1}
}

type ExistingEntity_EntityType int32

const (
	ExistingEntity_ENTITY_TYPE_UNSPECIFIED                        ExistingEntity_EntityType = 0
	ExistingEntity_ENTITY_TYPE_CERTIFICATE_CHAIN                  ExistingEntity_EntityType = 1
	ExistingEntity_ENTITY_TYPE_TRUST_BUNDLE                       ExistingEntity_EntityType = 2
	ExistingEntity_ENTITY_TYPE_CERTIFICATE_REVOCATION_LIST_BUNDLE ExistingEntity_EntityType = 3
	ExistingEntity_ENTITY_TYPE_AUTHENTICATION_POLICY              ExistingEntity_EntityType = 4
)

// Enum value maps for ExistingEntity_EntityType.
var (
	ExistingEntity_EntityType_name = map[int32]string{
		0: "ENTITY_TYPE_UNSPECIFIED",
		1: "ENTITY_TYPE_CERTIFICATE_CHAIN",
		2: "ENTITY_TYPE_TRUST_BUNDLE",
		3: "ENTITY_TYPE_CERTIFICATE_REVOCATION_LIST_BUNDLE",
		4: "ENTITY_TYPE_AUTHENTICATION_POLICY",
	}
	ExistingEntity_EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED":                        0,
		"ENTITY_TYPE_CERTIFICATE_CHAIN":                  1,
		"ENTITY_TYPE_TRUST_BUNDLE":                       2,
		"ENTITY_TYPE_CERTIFICATE_REVOCATION_LIST_BUNDLE": 3,
		"ENTITY_TYPE_AUTHENTICATION_POLICY":              4,
	}
)

func (x ExistingEntity_EntityType) Enum() *ExistingEntity_EntityType {
	p := new(ExistingEntity_EntityType)
	*p = x
	return p
}

func (x ExistingEntity_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExistingEntity_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[5].Descriptor()
}

func (ExistingEntity_EntityType) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[5]
}

func (x ExistingEntity_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExistingEntity_EntityType.Descriptor instead.
func (ExistingEntity_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{20, 0}
}

type RotateCertificateRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ForceOverwrite bool                   `protobuf:"varint,1,opt,name=force_overwrite,json=forceOverwrite,proto3" json:"force_overwrite,omitempty"`
	SslProfileId   string                 `protobuf:"bytes,2,opt,name=ssl_profile_id,json=sslProfileId,proto3" json:"ssl_profile_id,omitempty"`
	// Types that are valid to be assigned to RotateRequest:
	//
	//	*RotateCertificateRequest_GenerateCsr
	//	*RotateCertificateRequest_Certificates
	//	*RotateCertificateRequest_FinalizeRotation
	RotateRequest isRotateCertificateRequest_RotateRequest `protobuf_oneof:"rotate_request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateCertificateRequest) Reset() {
	*x = RotateCertificateRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertificateRequest) ProtoMessage() {}

func (x *RotateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertificateRequest.ProtoReflect.Descriptor instead.
func (*RotateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{0}
}

func (x *RotateCertificateRequest) GetForceOverwrite() bool {
	if x != nil {
		return x.ForceOverwrite
	}
	return false
}

func (x *RotateCertificateRequest) GetSslProfileId() string {
	if x != nil {
		return x.SslProfileId
	}
	return ""
}

func (x *RotateCertificateRequest) GetRotateRequest() isRotateCertificateRequest_RotateRequest {
	if x != nil {
		return x.RotateRequest
	}
	return nil
}

func (x *RotateCertificateRequest) GetGenerateCsr() *GenerateCSRRequest {
	if x != nil {
		if x, ok := x.RotateRequest.(*RotateCertificateRequest_GenerateCsr); ok {
			return x.GenerateCsr
		}
	}
	return nil
}

func (x *RotateCertificateRequest) GetCertificates() *UploadRequest {
	if x != nil {
		if x, ok := x.RotateRequest.(*RotateCertificateRequest_Certificates); ok {
			return x.Certificates
		}
	}
	return nil
}

func (x *RotateCertificateRequest) GetFinalizeRotation() *FinalizeRequest {
	if x != nil {
		if x, ok := x.RotateRequest.(*RotateCertificateRequest_FinalizeRotation); ok {
			return x.FinalizeRotation
		}
	}
	return nil
}

type isRotateCertificateRequest_RotateRequest interface {
	isRotateCertificateRequest_RotateRequest()
}

type RotateCertificateRequest_GenerateCsr struct {
	GenerateCsr *GenerateCSRRequest `protobuf:"bytes,3,opt,name=generate_csr,json=generateCsr,proto3,oneof"`
}

type RotateCertificateRequest_Certificates struct {
	Certificates *UploadRequest `protobuf:"bytes,4,opt,name=certificates,proto3,oneof"`
}

type RotateCertificateRequest_FinalizeRotation struct {
	FinalizeRotation *FinalizeRequest `protobuf:"bytes,5,opt,name=finalize_rotation,json=finalizeRotation,proto3,oneof"`
}

func (*RotateCertificateRequest_GenerateCsr) isRotateCertificateRequest_RotateRequest() {}

func (*RotateCertificateRequest_Certificates) isRotateCertificateRequest_RotateRequest() {}

func (*RotateCertificateRequest_FinalizeRotation) isRotateCertificateRequest_RotateRequest() {}

type RotateCertificateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RotateResponse:
	//
	//	*RotateCertificateResponse_GeneratedCsr
	//	*RotateCertificateResponse_Certificates
	RotateResponse isRotateCertificateResponse_RotateResponse `protobuf_oneof:"rotate_response"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RotateCertificateResponse) Reset() {
	*x = RotateCertificateResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertificateResponse) ProtoMessage() {}

func (x *RotateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertificateResponse.ProtoReflect.Descriptor instead.
func (*RotateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{1}
}

func (x *RotateCertificateResponse) GetRotateResponse() isRotateCertificateResponse_RotateResponse {
	if x != nil {
		return x.RotateResponse
	}
	return nil
}

func (x *RotateCertificateResponse) GetGeneratedCsr() *GenerateCSRResponse {
	if x != nil {
		if x, ok := x.RotateResponse.(*RotateCertificateResponse_GeneratedCsr); ok {
			return x.GeneratedCsr
		}
	}
	return nil
}

func (x *RotateCertificateResponse) GetCertificates() *UploadResponse {
	if x != nil {
		if x, ok := x.RotateResponse.(*RotateCertificateResponse_Certificates); ok {
			return x.Certificates
		}
	}
	return nil
}

type isRotateCertificateResponse_RotateResponse interface {
	isRotateCertificateResponse_RotateResponse()
}

type RotateCertificateResponse_GeneratedCsr struct {
	GeneratedCsr *GenerateCSRResponse `protobuf:"bytes,1,opt,name=generated_csr,json=generatedCsr,proto3,oneof"`
}

type RotateCertificateResponse_Certificates struct {
	Certificates *UploadResponse `protobuf:"bytes,2,opt,name=certificates,proto3,oneof"`
}

func (*RotateCertificateResponse_GeneratedCsr) isRotateCertificateResponse_RotateResponse() {}

func (*RotateCertificateResponse_Certificates) isRotateCertificateResponse_RotateResponse() {}

type FinalizeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{2}
}

type AddProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SslProfileId  string                 `protobuf:"bytes,1,opt,name=ssl_profile_id,json=sslProfileId,proto3" json:"ssl_profile_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProfileRequest) Reset() {
	*x = AddProfileRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProfileRequest) ProtoMessage() {}

func (x *AddProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProfileRequest.ProtoReflect.Descriptor instead.
func (*AddProfileRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{3}
}

func (x *AddProfileRequest) GetSslProfileId() string {
	if x != nil {
		return x.SslProfileId
	}
	return ""
}

type AddProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddProfileResponse) Reset() {
	*x = AddProfileResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProfileResponse) ProtoMessage() {}

func (x *AddProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProfileResponse.ProtoReflect.Descriptor instead.
func (*AddProfileResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{4}
}

type DeleteProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SslProfileId  string                 `protobuf:"bytes,1,opt,name=ssl_profile_id,json=sslProfileId,proto3" json:"ssl_profile_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProfileRequest) Reset() {
	*x = DeleteProfileRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfileRequest) ProtoMessage() {}

func (x *DeleteProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteProfileRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteProfileRequest) GetSslProfileId() string {
	if x != nil {
		return x.SslProfileId
	}
	return ""
}

type DeleteProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProfileResponse) Reset() {
	*x = DeleteProfileResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfileResponse) ProtoMessage() {}

func (x *DeleteProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfileResponse.ProtoReflect.Descriptor instead.
func (*DeleteProfileResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{6}
}

type GetProfileListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProfileListRequest) Reset() {
	*x = GetProfileListRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileListRequest) ProtoMessage() {}

func (x *GetProfileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileListRequest.ProtoReflect.Descriptor instead.
func (*GetProfileListRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{7}
}

type GetProfileListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SslProfileIds []string               `protobuf:"bytes,1,rep,name=ssl_profile_ids,json=sslProfileIds,proto3" json:"ssl_profile_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProfileListResponse) Reset() {
	*x = GetProfileListResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileListResponse) ProtoMessage() {}

func (x *GetProfileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileListResponse.ProtoReflect.Descriptor instead.
func (*GetProfileListResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{8}
}

func (x *GetProfileListResponse) GetSslProfileIds() []string {
	if x != nil {
		return x.SslProfileIds
	}
	return nil
}

type V3ExtensionSAN struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dns           []string               `protobuf:"bytes,1,rep,name=dns,proto3" json:"dns,omitempty"`
	Emails        []string               `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"`
	Ips           []string               `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
	Uris          []string               `protobuf:"bytes,4,rep,name=uris,proto3" json:"uris,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *V3ExtensionSAN) Reset() {
	*x = V3ExtensionSAN{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *V3ExtensionSAN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3ExtensionSAN) ProtoMessage() {}

func (x *V3ExtensionSAN) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3ExtensionSAN.ProtoReflect.Descriptor instead.
func (*V3ExtensionSAN) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{9}
}

func (x *V3ExtensionSAN) GetDns() []string {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *V3ExtensionSAN) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *V3ExtensionSAN) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *V3ExtensionSAN) GetUris() []string {
	if x != nil {
		return x.Uris
	}
	return nil
}

type CSRParams struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CsrSuite           CSRSuite               `protobuf:"varint,1,opt,name=csr_suite,json=csrSuite,proto3,enum=gnsi.certz.v1.CSRSuite" json:"csr_suite,omitempty"`
	CommonName         string                 `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Country            string                 `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	State              string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	City               string                 `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Organization       string                 `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
	OrganizationalUnit string                 `protobuf:"bytes,7,opt,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	IpAddress          string                 `protobuf:"bytes,8,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	EmailId            string                 `protobuf:"bytes,9,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty"`
	San                *V3ExtensionSAN        `protobuf:"bytes,10,opt,name=san,proto3" json:"san,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSRParams) Reset() {
	*x = CSRParams{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSRParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRParams) ProtoMessage() {}

func (x *CSRParams) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRParams.ProtoReflect.Descriptor instead.
func (*CSRParams) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{10}
}

func (x *CSRParams) GetCsrSuite() CSRSuite {
	if x != nil {
		return x.CsrSuite
	}
	return CSRSuite_CSRSUITE_CIPHER_UNSPECIFIED
}

func (x *CSRParams) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *CSRParams) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CSRParams) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CSRParams) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CSRParams) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *CSRParams) GetOrganizationalUnit() string {
	if x != nil {
		return x.OrganizationalUnit
	}
	return ""
}

func (x *CSRParams) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CSRParams) GetEmailId() string {
	if x != nil {
		return x.EmailId
	}
	return ""
}

func (x *CSRParams) GetSan() *V3ExtensionSAN {
	if x != nil {
		return x.San
	}
	return nil
}

type CanGenerateCSRRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        *CSRParams             `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanGenerateCSRRequest) Reset() {
	*x = CanGenerateCSRRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanGenerateCSRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateCSRRequest) ProtoMessage() {}

func (x *CanGenerateCSRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateCSRRequest.ProtoReflect.Descriptor instead.
func (*CanGenerateCSRRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{11}
}

func (x *CanGenerateCSRRequest) GetParams() *CSRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type CanGenerateCSRResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanGenerate   bool                   `protobuf:"varint,4,opt,name=can_generate,json=canGenerate,proto3" json:"can_generate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanGenerateCSRResponse) Reset() {
	*x = CanGenerateCSRResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanGenerateCSRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateCSRResponse) ProtoMessage() {}

func (x *CanGenerateCSRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateCSRResponse.ProtoReflect.Descriptor instead.
func (*CanGenerateCSRResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{12}
}

func (x *CanGenerateCSRResponse) GetCanGenerate() bool {
	if x != nil {
		return x.CanGenerate
	}
	return false
}

type CertificateChain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificate   *Certificate           `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Parent        *CertificateChain      `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateChain) Reset() {
	*x = CertificateChain{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateChain) ProtoMessage() {}

func (x *CertificateChain) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateChain.ProtoReflect.Descriptor instead.
func (*CertificateChain) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{13}
}

func (x *CertificateChain) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CertificateChain) GetParent() *CertificateChain {
	if x != nil {
		return x.Parent
	}
	return nil
}

type TrustBundle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pkcs7Block    string                 `protobuf:"bytes,1,opt,name=pkcs7_block,json=pkcs7Block,proto3" json:"pkcs7_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrustBundle) Reset() {
	*x = TrustBundle{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustBundle) ProtoMessage() {}

func (x *TrustBundle) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustBundle.ProtoReflect.Descriptor instead.
func (*TrustBundle) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{14}
}

func (x *TrustBundle) GetPkcs7Block() string {
	if x != nil {
		return x.Pkcs7Block
	}
	return ""
}

type Certificate struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Type     CertificateType        `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.v1.CertificateType" json:"type,omitempty"`
	Encoding CertificateEncoding    `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.v1.CertificateEncoding" json:"encoding,omitempty"`
	// Deprecated: Marked as deprecated in github.com/openconfig/gnsi/certz/certz.proto.
	Certificate []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Deprecated: Marked as deprecated in github.com/openconfig/gnsi/certz/certz.proto.
	PrivateKey []byte `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Types that are valid to be assigned to CertificateType:
	//
	//	*Certificate_RawCertificate
	//	*Certificate_CertSource_
	CertificateType isCertificate_CertificateType `protobuf_oneof:"certificate_type"`
	// Types that are valid to be assigned to PrivateKeyType:
	//
	//	*Certificate_RawPrivateKey
	//	*Certificate_KeySource_
	PrivateKeyType isCertificate_PrivateKeyType `protobuf_oneof:"private_key_type"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{15}
}

func (x *Certificate) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *Certificate) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

// Deprecated: Marked as deprecated in github.com/openconfig/gnsi/certz/certz.proto.
func (x *Certificate) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/openconfig/gnsi/certz/certz.proto.
func (x *Certificate) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *Certificate) GetCertificateType() isCertificate_CertificateType {
	if x != nil {
		return x.CertificateType
	}
	return nil
}

func (x *Certificate) GetRawCertificate() []byte {
	if x != nil {
		if x, ok := x.CertificateType.(*Certificate_RawCertificate); ok {
			return x.RawCertificate
		}
	}
	return nil
}

func (x *Certificate) GetCertSource() Certificate_CertSource {
	if x != nil {
		if x, ok := x.CertificateType.(*Certificate_CertSource_); ok {
			return x.CertSource
		}
	}
	return Certificate_CERT_SOURCE_UNSPECIFIED
}

func (x *Certificate) GetPrivateKeyType() isCertificate_PrivateKeyType {
	if x != nil {
		return x.PrivateKeyType
	}
	return nil
}

func (x *Certificate) GetRawPrivateKey() []byte {
	if x != nil {
		if x, ok := x.PrivateKeyType.(*Certificate_RawPrivateKey); ok {
			return x.RawPrivateKey
		}
	}
	return nil
}

func (x *Certificate) GetKeySource() Certificate_KeySource {
	if x != nil {
		if x, ok := x.PrivateKeyType.(*Certificate_KeySource_); ok {
			return x.KeySource
		}
	}
	return Certificate_KEY_SOURCE_UNSPECIFIED
}

type isCertificate_CertificateType interface {
	isCertificate_CertificateType()
}

type Certificate_RawCertificate struct {
	RawCertificate []byte `protobuf:"bytes,5,opt,name=raw_certificate,json=rawCertificate,proto3,oneof"`
}

type Certificate_CertSource_ struct {
	CertSource Certificate_CertSource `protobuf:"varint,6,opt,name=cert_source,json=certSource,proto3,enum=gnsi.certz.v1.Certificate_CertSource,oneof"`
}

func (*Certificate_RawCertificate) isCertificate_CertificateType() {}

func (*Certificate_CertSource_) isCertificate_CertificateType() {}

type isCertificate_PrivateKeyType interface {
	isCertificate_PrivateKeyType()
}

type Certificate_RawPrivateKey struct {
	RawPrivateKey []byte `protobuf:"bytes,7,opt,name=raw_private_key,json=rawPrivateKey,proto3,oneof"`
}

type Certificate_KeySource_ struct {
	KeySource Certificate_KeySource `protobuf:"varint,8,opt,name=key_source,json=keySource,proto3,enum=gnsi.certz.v1.Certificate_KeySource,oneof"`
}

func (*Certificate_RawPrivateKey) isCertificate_PrivateKeyType() {}

func (*Certificate_KeySource_) isCertificate_PrivateKeyType() {}

type CertificateRevocationList struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Type                      CertificateType        `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.v1.CertificateType" json:"type,omitempty"`
	Encoding                  CertificateEncoding    `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.v1.CertificateEncoding" json:"encoding,omitempty"`
	CertificateRevocationList []byte                 `protobuf:"bytes,3,opt,name=certificate_revocation_list,json=certificateRevocationList,proto3" json:"certificate_revocation_list,omitempty"`
	Id                        string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CertificateRevocationList) Reset() {
	*x = CertificateRevocationList{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateRevocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRevocationList) ProtoMessage() {}

func (x *CertificateRevocationList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRevocationList.ProtoReflect.Descriptor instead.
func (*CertificateRevocationList) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{16}
}

func (x *CertificateRevocationList) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateRevocationList) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *CertificateRevocationList) GetCertificateRevocationList() []byte {
	if x != nil {
		return x.CertificateRevocationList
	}
	return nil
}

func (x *CertificateRevocationList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateRevocationListBundle struct {
	state                      protoimpl.MessageState       `protogen:"open.v1"`
	CertificateRevocationLists []*CertificateRevocationList `protobuf:"bytes,1,rep,name=certificate_revocation_lists,json=certificateRevocationLists,proto3" json:"certificate_revocation_lists,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CertificateRevocationListBundle) Reset() {
	*x = CertificateRevocationListBundle{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateRevocationListBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRevocationListBundle) ProtoMessage() {}

func (x *CertificateRevocationListBundle) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRevocationListBundle.ProtoReflect.Descriptor instead.
func (*CertificateRevocationListBundle) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{17}
}

func (x *CertificateRevocationListBundle) GetCertificateRevocationLists() []*CertificateRevocationList {
	if x != nil {
		return x.CertificateRevocationLists
	}
	return nil
}

type AuthenticationPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Policy:
	//
	//	*AuthenticationPolicy_Serialized
	Policy        isAuthenticationPolicy_Policy `protobuf_oneof:"policy"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticationPolicy) Reset() {
	*x = AuthenticationPolicy{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationPolicy) ProtoMessage() {}

func (x *AuthenticationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationPolicy.ProtoReflect.Descriptor instead.
func (*AuthenticationPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{18}
}

func (x *AuthenticationPolicy) GetPolicy() isAuthenticationPolicy_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *AuthenticationPolicy) GetSerialized() *anypb.Any {
	if x != nil {
		if x, ok := x.Policy.(*AuthenticationPolicy_Serialized); ok {
			return x.Serialized
		}
	}
	return nil
}

type isAuthenticationPolicy_Policy interface {
	isAuthenticationPolicy_Policy()
}

type AuthenticationPolicy_Serialized struct {
	Serialized *anypb.Any `protobuf:"bytes,1,opt,name=serialized,proto3,oneof"`
}

func (*AuthenticationPolicy_Serialized) isAuthenticationPolicy_Policy() {}

type Entity struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Version   string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn uint64                 `protobuf:"varint,2,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// Types that are valid to be assigned to Entity:
	//
	//	*Entity_CertificateChain
	//	*Entity_TrustBundle
	//	*Entity_CertificateRevocationListBundle
	//	*Entity_AuthenticationPolicy
	//	*Entity_ExistingEntity
	//	*Entity_TrustBundlePcks7
	//	*Entity_TrustBundlePkcs7
	Entity        isEntity_Entity `protobuf_oneof:"entity"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{19}
}

func (x *Entity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Entity) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (x *Entity) GetEntity() isEntity_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Entity) GetCertificateChain() *CertificateChain {
	if x != nil {
		if x, ok := x.Entity.(*Entity_CertificateChain); ok {
			return x.CertificateChain
		}
	}
	return nil
}

func (x *Entity) GetTrustBundle() *CertificateChain {
	if x != nil {
		if x, ok := x.Entity.(*Entity_TrustBundle); ok {
			return x.TrustBundle
		}
	}
	return nil
}

func (x *Entity) GetCertificateRevocationListBundle() *CertificateRevocationListBundle {
	if x != nil {
		if x, ok := x.Entity.(*Entity_CertificateRevocationListBundle); ok {
			return x.CertificateRevocationListBundle
		}
	}
	return nil
}

func (x *Entity) GetAuthenticationPolicy() *AuthenticationPolicy {
	if x != nil {
		if x, ok := x.Entity.(*Entity_AuthenticationPolicy); ok {
			return x.AuthenticationPolicy
		}
	}
	return nil
}

func (x *Entity) GetExistingEntity() *ExistingEntity {
	if x != nil {
		if x, ok := x.Entity.(*Entity_ExistingEntity); ok {
			return x.ExistingEntity
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/openconfig/gnsi/certz/certz.proto.
func (x *Entity) GetTrustBundlePcks7() *TrustBundle {
	if x != nil {
		if x, ok := x.Entity.(*Entity_TrustBundlePcks7); ok {
			return x.TrustBundlePcks7
		}
	}
	return nil
}

func (x *Entity) GetTrustBundlePkcs7() *TrustBundle {
	if x != nil {
		if x, ok := x.Entity.(*Entity_TrustBundlePkcs7); ok {
			return x.TrustBundlePkcs7
		}
	}
	return nil
}

type isEntity_Entity interface {
	isEntity_Entity()
}

type Entity_CertificateChain struct {
	CertificateChain *CertificateChain `protobuf:"bytes,3,opt,name=certificate_chain,json=certificateChain,proto3,oneof"`
}

type Entity_TrustBundle struct {
	TrustBundle *CertificateChain `protobuf:"bytes,4,opt,name=trust_bundle,json=trustBundle,proto3,oneof"`
}

type Entity_CertificateRevocationListBundle struct {
	CertificateRevocationListBundle *CertificateRevocationListBundle `protobuf:"bytes,5,opt,name=certificate_revocation_list_bundle,json=certificateRevocationListBundle,proto3,oneof"`
}

type Entity_AuthenticationPolicy struct {
	AuthenticationPolicy *AuthenticationPolicy `protobuf:"bytes,6,opt,name=authentication_policy,json=authenticationPolicy,proto3,oneof"`
}

type Entity_ExistingEntity struct {
	ExistingEntity *ExistingEntity `protobuf:"bytes,7,opt,name=existing_entity,json=existingEntity,proto3,oneof"`
}

type Entity_TrustBundlePcks7 struct {
	// Deprecated: Marked as deprecated in github.com/openconfig/gnsi/certz/certz.proto.
	TrustBundlePcks7 *TrustBundle `protobuf:"bytes,8,opt,name=trust_bundle_pcks7,json=trustBundlePcks7,proto3,oneof"`
}

type Entity_TrustBundlePkcs7 struct {
	TrustBundlePkcs7 *TrustBundle `protobuf:"bytes,9,opt,name=trust_bundle_pkcs7,json=trustBundlePkcs7,proto3,oneof"`
}

func (*Entity_CertificateChain) isEntity_Entity() {}

func (*Entity_TrustBundle) isEntity_Entity() {}

func (*Entity_CertificateRevocationListBundle) isEntity_Entity() {}

func (*Entity_AuthenticationPolicy) isEntity_Entity() {}

func (*Entity_ExistingEntity) isEntity_Entity() {}

func (*Entity_TrustBundlePcks7) isEntity_Entity() {}

func (*Entity_TrustBundlePkcs7) isEntity_Entity() {}

type ExistingEntity struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	SslProfileId  string                    `protobuf:"bytes,1,opt,name=ssl_profile_id,json=sslProfileId,proto3" json:"ssl_profile_id,omitempty"`
	EntityType    ExistingEntity_EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=gnsi.certz.v1.ExistingEntity_EntityType" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExistingEntity) Reset() {
	*x = ExistingEntity{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExistingEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingEntity) ProtoMessage() {}

func (x *ExistingEntity) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingEntity.ProtoReflect.Descriptor instead.
func (*ExistingEntity) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{20}
}

func (x *ExistingEntity) GetSslProfileId() string {
	if x != nil {
		return x.SslProfileId
	}
	return ""
}

func (x *ExistingEntity) GetEntityType() ExistingEntity_EntityType {
	if x != nil {
		return x.EntityType
	}
	return ExistingEntity_ENTITY_TYPE_UNSPECIFIED
}

type UploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entities      []*Entity              `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{21}
}

func (x *UploadRequest) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{22}
}

type CertificateSigningRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Type                      CertificateType        `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.v1.CertificateType" json:"type,omitempty"`
	Encoding                  CertificateEncoding    `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.v1.CertificateEncoding" json:"encoding,omitempty"`
	CertificateSigningRequest []byte                 `protobuf:"bytes,3,opt,name=certificate_signing_request,json=certificateSigningRequest,proto3" json:"certificate_signing_request,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CertificateSigningRequest) Reset() {
	*x = CertificateSigningRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateSigningRequest) ProtoMessage() {}

func (x *CertificateSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateSigningRequest.ProtoReflect.Descriptor instead.
func (*CertificateSigningRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{23}
}

func (x *CertificateSigningRequest) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateSigningRequest) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *CertificateSigningRequest) GetCertificateSigningRequest() []byte {
	if x != nil {
		return x.CertificateSigningRequest
	}
	return nil
}

type GenerateCSRRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Params        *CSRParams                `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Integrities   []*ReferenceIntegritySpec `protobuf:"bytes,2,rep,name=integrities,proto3" json:"integrities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateCSRRequest) Reset() {
	*x = GenerateCSRRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCSRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRRequest) ProtoMessage() {}

func (x *GenerateCSRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRRequest.ProtoReflect.Descriptor instead.
func (*GenerateCSRRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{24}
}

func (x *GenerateCSRRequest) GetParams() *CSRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenerateCSRRequest) GetIntegrities() []*ReferenceIntegritySpec {
	if x != nil {
		return x.Integrities
	}
	return nil
}

type GenerateCSRResponse struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	CertificateSigningRequest *CertificateSigningRequest `protobuf:"bytes,1,opt,name=certificate_signing_request,json=certificateSigningRequest,proto3" json:"certificate_signing_request,omitempty"`
	Integrities               []*ReferenceIntegrityData  `protobuf:"bytes,2,rep,name=integrities,proto3" json:"integrities,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GenerateCSRResponse) Reset() {
	*x = GenerateCSRResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCSRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRResponse) ProtoMessage() {}

func (x *GenerateCSRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRResponse.ProtoReflect.Descriptor instead.
func (*GenerateCSRResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{25}
}

func (x *GenerateCSRResponse) GetCertificateSigningRequest() *CertificateSigningRequest {
	if x != nil {
		return x.CertificateSigningRequest
	}
	return nil
}

func (x *GenerateCSRResponse) GetIntegrities() []*ReferenceIntegrityData {
	if x != nil {
		return x.Integrities
	}
	return nil
}

type GetIntegrityManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIntegrityManifestRequest) Reset() {
	*x = GetIntegrityManifestRequest{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntegrityManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrityManifestRequest) ProtoMessage() {}

func (x *GetIntegrityManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrityManifestRequest.ProtoReflect.Descriptor instead.
func (*GetIntegrityManifestRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{26}
}

type GetIntegrityManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Manifest      []byte                 `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIntegrityManifestResponse) Reset() {
	*x = GetIntegrityManifestResponse{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntegrityManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrityManifestResponse) ProtoMessage() {}

func (x *GetIntegrityManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrityManifestResponse.ProtoReflect.Descriptor instead.
func (*GetIntegrityManifestResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{27}
}

func (x *GetIntegrityManifestResponse) GetManifest() []byte {
	if x != nil {
		return x.Manifest
	}
	return nil
}

type ReferenceIntegritySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	RotId string                 `protobuf:"bytes,1,opt,name=rot_id,json=rotId,proto3" json:"rot_id,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*ReferenceIntegritySpec_Mbm
	Type          isReferenceIntegritySpec_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReferenceIntegritySpec) Reset() {
	*x = ReferenceIntegritySpec{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceIntegritySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceIntegritySpec) ProtoMessage() {}

func (x *ReferenceIntegritySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceIntegritySpec.ProtoReflect.Descriptor instead.
func (*ReferenceIntegritySpec) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{28}
}

func (x *ReferenceIntegritySpec) GetRotId() string {
	if x != nil {
		return x.RotId
	}
	return ""
}

func (x *ReferenceIntegritySpec) GetType() isReferenceIntegritySpec_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ReferenceIntegritySpec) GetMbm() *MBMSpec {
	if x != nil {
		if x, ok := x.Type.(*ReferenceIntegritySpec_Mbm); ok {
			return x.Mbm
		}
	}
	return nil
}

type isReferenceIntegritySpec_Type interface {
	isReferenceIntegritySpec_Type()
}

type ReferenceIntegritySpec_Mbm struct {
	Mbm *MBMSpec `protobuf:"bytes,3,opt,name=mbm,proto3,oneof"`
}

func (*ReferenceIntegritySpec_Mbm) isReferenceIntegritySpec_Type() {}

type ReferenceIntegrityData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	RotId string                 `protobuf:"bytes,1,opt,name=rot_id,json=rotId,proto3" json:"rot_id,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*ReferenceIntegrityData_Mbm
	Type          isReferenceIntegrityData_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReferenceIntegrityData) Reset() {
	*x = ReferenceIntegrityData{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceIntegrityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceIntegrityData) ProtoMessage() {}

func (x *ReferenceIntegrityData) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceIntegrityData.ProtoReflect.Descriptor instead.
func (*ReferenceIntegrityData) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{29}
}

func (x *ReferenceIntegrityData) GetRotId() string {
	if x != nil {
		return x.RotId
	}
	return ""
}

func (x *ReferenceIntegrityData) GetType() isReferenceIntegrityData_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ReferenceIntegrityData) GetMbm() *MBMData {
	if x != nil {
		if x, ok := x.Type.(*ReferenceIntegrityData_Mbm); ok {
			return x.Mbm
		}
	}
	return nil
}

type isReferenceIntegrityData_Type interface {
	isReferenceIntegrityData_Type()
}

type ReferenceIntegrityData_Mbm struct {
	Mbm *MBMData `protobuf:"bytes,2,opt,name=mbm,proto3,oneof"`
}

func (*ReferenceIntegrityData_Mbm) isReferenceIntegrityData_Type() {}

type MBMSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AkTemplate    []byte                 `protobuf:"bytes,1,opt,name=ak_template,json=akTemplate,proto3" json:"ak_template,omitempty"`
	AkNonce       []byte                 `protobuf:"bytes,2,opt,name=ak_nonce,json=akNonce,proto3" json:"ak_nonce,omitempty"`
	Selection     []byte                 `protobuf:"bytes,3,opt,name=selection,proto3" json:"selection,omitempty"`
	Nonce         []byte                 `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MBMSpec) Reset() {
	*x = MBMSpec{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MBMSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBMSpec) ProtoMessage() {}

func (x *MBMSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBMSpec.ProtoReflect.Descriptor instead.
func (*MBMSpec) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{30}
}

func (x *MBMSpec) GetAkTemplate() []byte {
	if x != nil {
		return x.AkTemplate
	}
	return nil
}

func (x *MBMSpec) GetAkNonce() []byte {
	if x != nil {
		return x.AkNonce
	}
	return nil
}

func (x *MBMSpec) GetSelection() []byte {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *MBMSpec) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type MBMData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Quoted         []byte                 `protobuf:"bytes,1,opt,name=quoted,proto3" json:"quoted,omitempty"`
	Signature      []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	EkLeafCert     string                 `protobuf:"bytes,3,opt,name=ek_leaf_cert,json=ekLeafCert,proto3" json:"ek_leaf_cert,omitempty"`
	EkCertChain    string                 `protobuf:"bytes,4,opt,name=ek_cert_chain,json=ekCertChain,proto3" json:"ek_cert_chain,omitempty"`
	AkPubKey       string                 `protobuf:"bytes,5,opt,name=ak_pub_key,json=akPubKey,proto3" json:"ak_pub_key,omitempty"`
	AkCreationData []byte                 `protobuf:"bytes,9,opt,name=ak_creation_data,json=akCreationData,proto3" json:"ak_creation_data,omitempty"`
	AkAttestation  []byte                 `protobuf:"bytes,6,opt,name=ak_attestation,json=akAttestation,proto3" json:"ak_attestation,omitempty"`
	AkSignature    []byte                 `protobuf:"bytes,7,opt,name=ak_signature,json=akSignature,proto3" json:"ak_signature,omitempty"`
	CsrSignature   []byte                 `protobuf:"bytes,8,opt,name=csr_signature,json=csrSignature,proto3" json:"csr_signature,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MBMData) Reset() {
	*x = MBMData{}
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MBMData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBMData) ProtoMessage() {}

func (x *MBMData) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBMData.ProtoReflect.Descriptor instead.
func (*MBMData) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{31}
}

func (x *MBMData) GetQuoted() []byte {
	if x != nil {
		return x.Quoted
	}
	return nil
}

func (x *MBMData) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *MBMData) GetEkLeafCert() string {
	if x != nil {
		return x.EkLeafCert
	}
	return ""
}

func (x *MBMData) GetEkCertChain() string {
	if x != nil {
		return x.EkCertChain
	}
	return ""
}

func (x *MBMData) GetAkPubKey() string {
	if x != nil {
		return x.AkPubKey
	}
	return ""
}

func (x *MBMData) GetAkCreationData() []byte {
	if x != nil {
		return x.AkCreationData
	}
	return nil
}

func (x *MBMData) GetAkAttestation() []byte {
	if x != nil {
		return x.AkAttestation
	}
	return nil
}

func (x *MBMData) GetAkSignature() []byte {
	if x != nil {
		return x.AkSignature
	}
	return nil
}

func (x *MBMData) GetCsrSignature() []byte {
	if x != nil {
		return x.CsrSignature
	}
	return nil
}

var File_github_com_openconfig_gnsi_certz_certz_proto protoreflect.FileDescriptor

const file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc = "" +
	"\n" +
	",github.com/openconfig/gnsi/certz/certz.proto\x12\rgnsi.certz.v1\x1a\x19google/protobuf/any.proto\"\xd6\x02\n" +
	"\x18RotateCertificateRequest\x12'\n" +
	"\x0fforce_overwrite\x18\x01 \x01(\bR\x0eforceOverwrite\x12$\n" +
	"\x0essl_profile_id\x18\x02 \x01(\tR\fsslProfileId\x12F\n" +
	"\fgenerate_csr\x18\x03 \x01(\v2!.gnsi.certz.v1.GenerateCSRRequestH\x00R\vgenerateCsr\x12B\n" +
	"\fcertificates\x18\x04 \x01(\v2\x1c.gnsi.certz.v1.UploadRequestH\x00R\fcertificates\x12M\n" +
	"\x11finalize_rotation\x18\x05 \x01(\v2\x1e.gnsi.certz.v1.FinalizeRequestH\x00R\x10finalizeRotationB\x10\n" +
	"\x0erotate_request\"\xbe\x01\n" +
	"\x19RotateCertificateResponse\x12I\n" +
	"\rgenerated_csr\x18\x01 \x01(\v2\".gnsi.certz.v1.GenerateCSRResponseH\x00R\fgeneratedCsr\x12C\n" +
	"\fcertificates\x18\x02 \x01(\v2\x1d.gnsi.certz.v1.UploadResponseH\x00R\fcertificatesB\x11\n" +
	"\x0frotate_response\"\x11\n" +
	"\x0fFinalizeRequest\"9\n" +
	"\x11AddProfileRequest\x12$\n" +
	"\x0essl_profile_id\x18\x01 \x01(\tR\fsslProfileId\"\x14\n" +
	"\x12AddProfileResponse\"<\n" +
	"\x14DeleteProfileRequest\x12$\n" +
	"\x0essl_profile_id\x18\x01 \x01(\tR\fsslProfileId\"\x17\n" +
	"\x15DeleteProfileResponse\"\x17\n" +
	"\x15GetProfileListRequest\"@\n" +
	"\x16GetProfileListResponse\x12&\n" +
	"\x0fssl_profile_ids\x18\x01 \x03(\tR\rsslProfileIds\"`\n" +
	"\x0eV3ExtensionSAN\x12\x10\n" +
	"\x03dns\x18\x01 \x03(\tR\x03dns\x12\x16\n" +
	"\x06emails\x18\x02 \x03(\tR\x06emails\x12\x10\n" +
	"\x03ips\x18\x03 \x03(\tR\x03ips\x12\x12\n" +
	"\x04uris\x18\x04 \x03(\tR\x04uris\"\xe6\x02\n" +
	"\tCSRParams\x124\n" +
	"\tcsr_suite\x18\x01 \x01(\x0e2\x17.gnsi.certz.v1.CSRSuiteR\bcsrSuite\x12\x1f\n" +
	"\vcommon_name\x18\x02 \x01(\tR\n" +
	"commonName\x12\x18\n" +
	"\acountry\x18\x03 \x01(\tR\acountry\x12\x14\n" +
	"\x05state\x18\x04 \x01(\tR\x05state\x12\x12\n" +
	"\x04city\x18\x05 \x01(\tR\x04city\x12\"\n" +
	"\forganization\x18\x06 \x01(\tR\forganization\x12/\n" +
	"\x13organizational_unit\x18\a \x01(\tR\x12organizationalUnit\x12\x1d\n" +
	"\n" +
	"ip_address\x18\b \x01(\tR\tipAddress\x12\x19\n" +
	"\bemail_id\x18\t \x01(\tR\aemailId\x12/\n" +
	"\x03san\x18\n" +
	" \x01(\v2\x1d.gnsi.certz.v1.V3ExtensionSANR\x03san\"I\n" +
	"\x15CanGenerateCSRRequest\x120\n" +
	"\x06params\x18\x01 \x01(\v2\x18.gnsi.certz.v1.CSRParamsR\x06params\";\n" +
	"\x16CanGenerateCSRResponse\x12!\n" +
	"\fcan_generate\x18\x04 \x01(\bR\vcanGenerate\"\x89\x01\n" +
	"\x10CertificateChain\x12<\n" +
	"\vcertificate\x18\x01 \x01(\v2\x1a.gnsi.certz.v1.CertificateR\vcertificate\x127\n" +
	"\x06parent\x18\x02 \x01(\v2\x1f.gnsi.certz.v1.CertificateChainR\x06parent\".\n" +
	"\vTrustBundle\x12\x1f\n" +
	"\vpkcs7_block\x18\x01 \x01(\tR\n" +
	"pkcs7Block\"\x94\x05\n" +
	"\vCertificate\x122\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1e.gnsi.certz.v1.CertificateTypeR\x04type\x12>\n" +
	"\bencoding\x18\x02 \x01(\x0e2\".gnsi.certz.v1.CertificateEncodingR\bencoding\x12$\n" +
	"\vcertificate\x18\x03 \x01(\fB\x02\x18\x01R\vcertificate\x12#\n" +
	"\vprivate_key\x18\x04 \x01(\fB\x02\x18\x01R\n" +
	"privateKey\x12)\n" +
	"\x0fraw_certificate\x18\x05 \x01(\fH\x00R\x0erawCertificate\x12H\n" +
	"\vcert_source\x18\x06 \x01(\x0e2%.gnsi.certz.v1.Certificate.CertSourceH\x00R\n" +
	"certSource\x12(\n" +
	"\x0fraw_private_key\x18\a \x01(\fH\x01R\rrawPrivateKey\x12E\n" +
	"\n" +
	"key_source\x18\b \x01(\x0e2$.gnsi.certz.v1.Certificate.KeySourceH\x01R\tkeySource\"Z\n" +
	"\n" +
	"CertSource\x12\x1b\n" +
	"\x17CERT_SOURCE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13CERT_SOURCE_OIDEVID\x10\x01\x12\x16\n" +
	"\x12CERT_SOURCE_IDEVID\x10\x02\"\\\n" +
	"\tKeySource\x12\x1a\n" +
	"\x16KEY_SOURCE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15KEY_SOURCE_IDEVID_TPM\x10\x01\x12\x18\n" +
	"\x14KEY_SOURCE_GENERATED\x10\x02B\x12\n" +
	"\x10certificate_typeB\x12\n" +
	"\x10private_key_type\"\xdf\x01\n" +
	"\x19CertificateRevocationList\x122\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1e.gnsi.certz.v1.CertificateTypeR\x04type\x12>\n" +
	"\bencoding\x18\x02 \x01(\x0e2\".gnsi.certz.v1.CertificateEncodingR\bencoding\x12>\n" +
	"\x1bcertificate_revocation_list\x18\x03 \x01(\fR\x19certificateRevocationList\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\"\x8d\x01\n" +
	"\x1fCertificateRevocationListBundle\x12j\n" +
	"\x1ccertificate_revocation_lists\x18\x01 \x03(\v2(.gnsi.certz.v1.CertificateRevocationListR\x1acertificateRevocationLists\"X\n" +
	"\x14AuthenticationPolicy\x126\n" +
	"\n" +
	"serialized\x18\x01 \x01(\v2\x14.google.protobuf.AnyH\x00R\n" +
	"serializedB\b\n" +
	"\x06policy\"\xa2\x05\n" +
	"\x06Entity\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1d\n" +
	"\n" +
	"created_on\x18\x02 \x01(\x04R\tcreatedOn\x12N\n" +
	"\x11certificate_chain\x18\x03 \x01(\v2\x1f.gnsi.certz.v1.CertificateChainH\x00R\x10certificateChain\x12D\n" +
	"\ftrust_bundle\x18\x04 \x01(\v2\x1f.gnsi.certz.v1.CertificateChainH\x00R\vtrustBundle\x12}\n" +
	"\"certificate_revocation_list_bundle\x18\x05 \x01(\v2..gnsi.certz.v1.CertificateRevocationListBundleH\x00R\x1fcertificateRevocationListBundle\x12Z\n" +
	"\x15authentication_policy\x18\x06 \x01(\v2#.gnsi.certz.v1.AuthenticationPolicyH\x00R\x14authenticationPolicy\x12H\n" +
	"\x0fexisting_entity\x18\a \x01(\v2\x1d.gnsi.certz.v1.ExistingEntityH\x00R\x0eexistingEntity\x12N\n" +
	"\x12trust_bundle_pcks7\x18\b \x01(\v2\x1a.gnsi.certz.v1.TrustBundleB\x02\x18\x01H\x00R\x10trustBundlePcks7\x12J\n" +
	"\x12trust_bundle_pkcs7\x18\t \x01(\v2\x1a.gnsi.certz.v1.TrustBundleH\x00R\x10trustBundlePkcs7B\b\n" +
	"\x06entity\"\xc9\x02\n" +
	"\x0eExistingEntity\x12$\n" +
	"\x0essl_profile_id\x18\x01 \x01(\tR\fsslProfileId\x12I\n" +
	"\ventity_type\x18\x02 \x01(\x0e2(.gnsi.certz.v1.ExistingEntity.EntityTypeR\n" +
	"entityType\"\xc5\x01\n" +
	"\n" +
	"EntityType\x12\x1b\n" +
	"\x17ENTITY_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dENTITY_TYPE_CERTIFICATE_CHAIN\x10\x01\x12\x1c\n" +
	"\x18ENTITY_TYPE_TRUST_BUNDLE\x10\x02\x122\n" +
	".ENTITY_TYPE_CERTIFICATE_REVOCATION_LIST_BUNDLE\x10\x03\x12%\n" +
	"!ENTITY_TYPE_AUTHENTICATION_POLICY\x10\x04\"B\n" +
	"\rUploadRequest\x121\n" +
	"\bentities\x18\x01 \x03(\v2\x15.gnsi.certz.v1.EntityR\bentities\"\x10\n" +
	"\x0eUploadResponse\"\xcf\x01\n" +
	"\x19CertificateSigningRequest\x122\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1e.gnsi.certz.v1.CertificateTypeR\x04type\x12>\n" +
	"\bencoding\x18\x02 \x01(\x0e2\".gnsi.certz.v1.CertificateEncodingR\bencoding\x12>\n" +
	"\x1bcertificate_signing_request\x18\x03 \x01(\fR\x19certificateSigningRequest\"\x8f\x01\n" +
	"\x12GenerateCSRRequest\x120\n" +
	"\x06params\x18\x01 \x01(\v2\x18.gnsi.certz.v1.CSRParamsR\x06params\x12G\n" +
	"\vintegrities\x18\x02 \x03(\v2%.gnsi.certz.v1.ReferenceIntegritySpecR\vintegrities\"\xc8\x01\n" +
	"\x13GenerateCSRResponse\x12h\n" +
	"\x1bcertificate_signing_request\x18\x01 \x01(\v2(.gnsi.certz.v1.CertificateSigningRequestR\x19certificateSigningRequest\x12G\n" +
	"\vintegrities\x18\x02 \x03(\v2%.gnsi.certz.v1.ReferenceIntegrityDataR\vintegrities\"\x1d\n" +
	"\x1bGetIntegrityManifestRequest\":\n" +
	"\x1cGetIntegrityManifestResponse\x12\x1a\n" +
	"\bmanifest\x18\x01 \x01(\fR\bmanifest\"c\n" +
	"\x16ReferenceIntegritySpec\x12\x15\n" +
	"\x06rot_id\x18\x01 \x01(\tR\x05rotId\x12*\n" +
	"\x03mbm\x18\x03 \x01(\v2\x16.gnsi.certz.v1.MBMSpecH\x00R\x03mbmB\x06\n" +
	"\x04type\"c\n" +
	"\x16ReferenceIntegrityData\x12\x15\n" +
	"\x06rot_id\x18\x01 \x01(\tR\x05rotId\x12*\n" +
	"\x03mbm\x18\x02 \x01(\v2\x16.gnsi.certz.v1.MBMDataH\x00R\x03mbmB\x06\n" +
	"\x04type\"y\n" +
	"\aMBMSpec\x12\x1f\n" +
	"\vak_template\x18\x01 \x01(\fR\n" +
	"akTemplate\x12\x19\n" +
	"\bak_nonce\x18\x02 \x01(\fR\aakNonce\x12\x1c\n" +
	"\tselection\x18\x03 \x01(\fR\tselection\x12\x14\n" +
	"\x05nonce\x18\x04 \x01(\fR\x05nonce\"\xbc\x02\n" +
	"\aMBMData\x12\x16\n" +
	"\x06quoted\x18\x01 \x01(\fR\x06quoted\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x12 \n" +
	"\fek_leaf_cert\x18\x03 \x01(\tR\n" +
	"ekLeafCert\x12\"\n" +
	"\rek_cert_chain\x18\x04 \x01(\tR\vekCertChain\x12\x1c\n" +
	"\n" +
	"ak_pub_key\x18\x05 \x01(\tR\bakPubKey\x12(\n" +
	"\x10ak_creation_data\x18\t \x01(\fR\x0eakCreationData\x12%\n" +
	"\x0eak_attestation\x18\x06 \x01(\fR\rakAttestation\x12!\n" +
	"\fak_signature\x18\a \x01(\fR\vakSignature\x12#\n" +
	"\rcsr_signature\x18\b \x01(\fR\fcsrSignature*\xcd\n" +
	"\n" +
	"\bCSRSuite\x12\x1f\n" +
	"\x1bCSRSUITE_CIPHER_UNSPECIFIED\x10\x00\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256\x10\x01\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384\x10\x02\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512\x10\x03\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256\x10\x04\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384\x10\x05\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512\x10\x06\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256\x10\a\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384\x10\b\x12A\n" +
	"=CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512\x10\t\x12I\n" +
	"ECSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256\x10\n" +
	"\x12I\n" +
	"ECSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384\x10\v\x12I\n" +
	"ECSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512\x10\f\x12H\n" +
	"DCSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256\x10\r\x12H\n" +
	"DCSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384\x10\x0e\x12H\n" +
	"DCSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512\x10\x0f\x12H\n" +
	"DCSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256\x10\x10\x12H\n" +
	"DCSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384\x10\x11\x12H\n" +
	"DCSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512\x10\x12\x12(\n" +
	"$CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519\x10\x13*N\n" +
	"\x0fCertificateType\x12 \n" +
	"\x1cCERTIFICATE_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CERTIFICATE_TYPE_X509\x10\x01*\x95\x01\n" +
	"\x13CertificateEncoding\x12$\n" +
	" CERTIFICATE_ENCODING_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CERTIFICATE_ENCODING_PEM\x10\x01\x12\x1c\n" +
	"\x18CERTIFICATE_ENCODING_DER\x10\x02\x12\x1c\n" +
	"\x18CERTIFICATE_ENCODING_CRT\x10\x032\xc6\x04\n" +
	"\x05Certz\x12_\n" +
	"\x06Rotate\x12'.gnsi.certz.v1.RotateCertificateRequest\x1a(.gnsi.certz.v1.RotateCertificateResponse(\x010\x01\x12Q\n" +
	"\n" +
	"AddProfile\x12 .gnsi.certz.v1.AddProfileRequest\x1a!.gnsi.certz.v1.AddProfileResponse\x12Z\n" +
	"\rDeleteProfile\x12#.gnsi.certz.v1.DeleteProfileRequest\x1a$.gnsi.certz.v1.DeleteProfileResponse\x12]\n" +
	"\x0eGetProfileList\x12$.gnsi.certz.v1.GetProfileListRequest\x1a%.gnsi.certz.v1.GetProfileListResponse\x12]\n" +
	"\x0eCanGenerateCSR\x12$.gnsi.certz.v1.CanGenerateCSRRequest\x1a%.gnsi.certz.v1.CanGenerateCSRResponse\x12o\n" +
	"\x14GetIntegrityManifest\x12*.gnsi.certz.v1.GetIntegrityManifestRequest\x1a+.gnsi.certz.v1.GetIntegrityManifestResponseB!Z\x1fgithub.com/openconfig/gnsi/certb\x06proto3"

var (
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDescOnce sync.Once
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData []byte
)

func file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc), len(file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc)))
	})
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData
}

var file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_github_com_openconfig_gnsi_certz_certz_proto_goTypes = []any{
	(CSRSuite)(0),                           // 0: gnsi.certz.v1.CSRSuite
	(CertificateType)(0),                    // 1: gnsi.certz.v1.CertificateType
	(CertificateEncoding)(0),                // 2: gnsi.certz.v1.CertificateEncoding
	(Certificate_CertSource)(0),             // 3: gnsi.certz.v1.Certificate.CertSource
	(Certificate_KeySource)(0),              // 4: gnsi.certz.v1.Certificate.KeySource
	(ExistingEntity_EntityType)(0),          // 5: gnsi.certz.v1.ExistingEntity.EntityType
	(*RotateCertificateRequest)(nil),        // 6: gnsi.certz.v1.RotateCertificateRequest
	(*RotateCertificateResponse)(nil),       // 7: gnsi.certz.v1.RotateCertificateResponse
	(*FinalizeRequest)(nil),                 // 8: gnsi.certz.v1.FinalizeRequest
	(*AddProfileRequest)(nil),               // 9: gnsi.certz.v1.AddProfileRequest
	(*AddProfileResponse)(nil),              // 10: gnsi.certz.v1.AddProfileResponse
	(*DeleteProfileRequest)(nil),            // 11: gnsi.certz.v1.DeleteProfileRequest
	(*DeleteProfileResponse)(nil),           // 12: gnsi.certz.v1.DeleteProfileResponse
	(*GetProfileListRequest)(nil),           // 13: gnsi.certz.v1.GetProfileListRequest
	(*GetProfileListResponse)(nil),          // 14: gnsi.certz.v1.GetProfileListResponse
	(*V3ExtensionSAN)(nil),                  // 15: gnsi.certz.v1.V3ExtensionSAN
	(*CSRParams)(nil),                       // 16: gnsi.certz.v1.CSRParams
	(*CanGenerateCSRRequest)(nil),           // 17: gnsi.certz.v1.CanGenerateCSRRequest
	(*CanGenerateCSRResponse)(nil),          // 18: gnsi.certz.v1.CanGenerateCSRResponse
	(*CertificateChain)(nil),                // 19: gnsi.certz.v1.CertificateChain
	(*TrustBundle)(nil),                     // 20: gnsi.certz.v1.TrustBundle
	(*Certificate)(nil),                     // 21: gnsi.certz.v1.Certificate
	(*CertificateRevocationList)(nil),       // 22: gnsi.certz.v1.CertificateRevocationList
	(*CertificateRevocationListBundle)(nil), // 23: gnsi.certz.v1.CertificateRevocationListBundle
	(*AuthenticationPolicy)(nil),            // 24: gnsi.certz.v1.AuthenticationPolicy
	(*Entity)(nil),                          // 25: gnsi.certz.v1.Entity
	(*ExistingEntity)(nil),                  // 26: gnsi.certz.v1.ExistingEntity
	(*UploadRequest)(nil),                   // 27: gnsi.certz.v1.UploadRequest
	(*UploadResponse)(nil),                  // 28: gnsi.certz.v1.UploadResponse
	(*CertificateSigningRequest)(nil),       // 29: gnsi.certz.v1.CertificateSigningRequest
	(*GenerateCSRRequest)(nil),              // 30: gnsi.certz.v1.GenerateCSRRequest
	(*GenerateCSRResponse)(nil),             // 31: gnsi.certz.v1.GenerateCSRResponse
	(*GetIntegrityManifestRequest)(nil),     // 32: gnsi.certz.v1.GetIntegrityManifestRequest
	(*GetIntegrityManifestResponse)(nil),    // 33: gnsi.certz.v1.GetIntegrityManifestResponse
	(*ReferenceIntegritySpec)(nil),          // 34: gnsi.certz.v1.ReferenceIntegritySpec
	(*ReferenceIntegrityData)(nil),          // 35: gnsi.certz.v1.ReferenceIntegrityData
	(*MBMSpec)(nil),                         // 36: gnsi.certz.v1.MBMSpec
	(*MBMData)(nil),                         // 37: gnsi.certz.v1.MBMData
	(*anypb.Any)(nil),                       // 38: google.protobuf.Any
}
var file_github_com_openconfig_gnsi_certz_certz_proto_depIdxs = []int32{
	30, // 0: gnsi.certz.v1.RotateCertificateRequest.generate_csr:type_name -> gnsi.certz.v1.GenerateCSRRequest
	27, // 1: gnsi.certz.v1.RotateCertificateRequest.certificates:type_name -> gnsi.certz.v1.UploadRequest
	8,  // 2: gnsi.certz.v1.RotateCertificateRequest.finalize_rotation:type_name -> gnsi.certz.v1.FinalizeRequest
	31, // 3: gnsi.certz.v1.RotateCertificateResponse.generated_csr:type_name -> gnsi.certz.v1.GenerateCSRResponse
	28, // 4: gnsi.certz.v1.RotateCertificateResponse.certificates:type_name -> gnsi.certz.v1.UploadResponse
	0,  // 5: gnsi.certz.v1.CSRParams.csr_suite:type_name -> gnsi.certz.v1.CSRSuite
	15, // 6: gnsi.certz.v1.CSRParams.san:type_name -> gnsi.certz.v1.V3ExtensionSAN
	16, // 7: gnsi.certz.v1.CanGenerateCSRRequest.params:type_name -> gnsi.certz.v1.CSRParams
	21, // 8: gnsi.certz.v1.CertificateChain.certificate:type_name -> gnsi.certz.v1.Certificate
	19, // 9: gnsi.certz.v1.CertificateChain.parent:type_name -> gnsi.certz.v1.CertificateChain
	1,  // 10: gnsi.certz.v1.Certificate.type:type_name -> gnsi.certz.v1.CertificateType
	2,  // 11: gnsi.certz.v1.Certificate.encoding:type_name -> gnsi.certz.v1.CertificateEncoding
	3,  // 12: gnsi.certz.v1.Certificate.cert_source:type_name -> gnsi.certz.v1.Certificate.CertSource
	4,  // 13: gnsi.certz.v1.Certificate.key_source:type_name -> gnsi.certz.v1.Certificate.KeySource
	1,  // 14: gnsi.certz.v1.CertificateRevocationList.type:type_name -> gnsi.certz.v1.CertificateType
	2,  // 15: gnsi.certz.v1.CertificateRevocationList.encoding:type_name -> gnsi.certz.v1.CertificateEncoding
	22, // 16: gnsi.certz.v1.CertificateRevocationListBundle.certificate_revocation_lists:type_name -> gnsi.certz.v1.CertificateRevocationList
	38, // 17: gnsi.certz.v1.AuthenticationPolicy.serialized:type_name -> google.protobuf.Any
	19, // 18: gnsi.certz.v1.Entity.certificate_chain:type_name -> gnsi.certz.v1.CertificateChain
	19, // 19: gnsi.certz.v1.Entity.trust_bundle:type_name -> gnsi.certz.v1.CertificateChain
	23, // 20: gnsi.certz.v1.Entity.certificate_revocation_list_bundle:type_name -> gnsi.certz.v1.CertificateRevocationListBundle
	24, // 21: gnsi.certz.v1.Entity.authentication_policy:type_name -> gnsi.certz.v1.AuthenticationPolicy
	26, // 22: gnsi.certz.v1.Entity.existing_entity:type_name -> gnsi.certz.v1.ExistingEntity
	20, // 23: gnsi.certz.v1.Entity.trust_bundle_pcks7:type_name -> gnsi.certz.v1.TrustBundle
	20, // 24: gnsi.certz.v1.Entity.trust_bundle_pkcs7:type_name -> gnsi.certz.v1.TrustBundle
	5,  // 25: gnsi.certz.v1.ExistingEntity.entity_type:type_name -> gnsi.certz.v1.ExistingEntity.EntityType
	25, // 26: gnsi.certz.v1.UploadRequest.entities:type_name -> gnsi.certz.v1.Entity
	1,  // 27: gnsi.certz.v1.CertificateSigningRequest.type:type_name -> gnsi.certz.v1.CertificateType
	2,  // 28: gnsi.certz.v1.CertificateSigningRequest.encoding:type_name -> gnsi.certz.v1.CertificateEncoding
	16, // 29: gnsi.certz.v1.GenerateCSRRequest.params:type_name -> gnsi.certz.v1.CSRParams
	34, // 30: gnsi.certz.v1.GenerateCSRRequest.integrities:type_name -> gnsi.certz.v1.ReferenceIntegritySpec
	29, // 31: gnsi.certz.v1.GenerateCSRResponse.certificate_signing_request:type_name -> gnsi.certz.v1.CertificateSigningRequest
	35, // 32: gnsi.certz.v1.GenerateCSRResponse.integrities:type_name -> gnsi.certz.v1.ReferenceIntegrityData
	36, // 33: gnsi.certz.v1.ReferenceIntegritySpec.mbm:type_name -> gnsi.certz.v1.MBMSpec
	37, // 34: gnsi.certz.v1.ReferenceIntegrityData.mbm:type_name -> gnsi.certz.v1.MBMData
	6,  // 35: gnsi.certz.v1.Certz.Rotate:input_type -> gnsi.certz.v1.RotateCertificateRequest
	9,  // 36: gnsi.certz.v1.Certz.AddProfile:input_type -> gnsi.certz.v1.AddProfileRequest
	11, // 37: gnsi.certz.v1.Certz.DeleteProfile:input_type -> gnsi.certz.v1.DeleteProfileRequest
	13, // 38: gnsi.certz.v1.Certz.GetProfileList:input_type -> gnsi.certz.v1.GetProfileListRequest
	17, // 39: gnsi.certz.v1.Certz.CanGenerateCSR:input_type -> gnsi.certz.v1.CanGenerateCSRRequest
	32, // 40: gnsi.certz.v1.Certz.GetIntegrityManifest:input_type -> gnsi.certz.v1.GetIntegrityManifestRequest
	7,  // 41: gnsi.certz.v1.Certz.Rotate:output_type -> gnsi.certz.v1.RotateCertificateResponse
	10, // 42: gnsi.certz.v1.Certz.AddProfile:output_type -> gnsi.certz.v1.AddProfileResponse
	12, // 43: gnsi.certz.v1.Certz.DeleteProfile:output_type -> gnsi.certz.v1.DeleteProfileResponse
	14, // 44: gnsi.certz.v1.Certz.GetProfileList:output_type -> gnsi.certz.v1.GetProfileListResponse
	18, // 45: gnsi.certz.v1.Certz.CanGenerateCSR:output_type -> gnsi.certz.v1.CanGenerateCSRResponse
	33, // 46: gnsi.certz.v1.Certz.GetIntegrityManifest:output_type -> gnsi.certz.v1.GetIntegrityManifestResponse
	41, // [41:47] is the sub-list for method output_type
	35, // [35:41] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_gnsi_certz_certz_proto_init() }
func file_github_com_openconfig_gnsi_certz_certz_proto_init() {
	if File_github_com_openconfig_gnsi_certz_certz_proto != nil {
		return
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0].OneofWrappers = []any{
		(*RotateCertificateRequest_GenerateCsr)(nil),
		(*RotateCertificateRequest_Certificates)(nil),
		(*RotateCertificateRequest_FinalizeRotation)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1].OneofWrappers = []any{
		(*RotateCertificateResponse_GeneratedCsr)(nil),
		(*RotateCertificateResponse_Certificates)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[15].OneofWrappers = []any{
		(*Certificate_RawCertificate)(nil),
		(*Certificate_CertSource_)(nil),
		(*Certificate_RawPrivateKey)(nil),
		(*Certificate_KeySource_)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[18].OneofWrappers = []any{
		(*AuthenticationPolicy_Serialized)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[19].OneofWrappers = []any{
		(*Entity_CertificateChain)(nil),
		(*Entity_TrustBundle)(nil),
		(*Entity_CertificateRevocationListBundle)(nil),
		(*Entity_AuthenticationPolicy)(nil),
		(*Entity_ExistingEntity)(nil),
		(*Entity_TrustBundlePcks7)(nil),
		(*Entity_TrustBundlePkcs7)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[28].OneofWrappers = []any{
		(*ReferenceIntegritySpec_Mbm)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[29].OneofWrappers = []any{
		(*ReferenceIntegrityData_Mbm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc), len(file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_gnsi_certz_certz_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_gnsi_certz_certz_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_gnsi_certz_certz_proto = out.File
	file_github_com_openconfig_gnsi_certz_certz_proto_goTypes = nil
	file_github_com_openconfig_gnsi_certz_certz_proto_depIdxs = nil
}
