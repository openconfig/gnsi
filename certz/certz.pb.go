//
// Copyright 2022 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file defines the gNSI API to be used for certificate rotation.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.1
// source: certz/certz.proto

package cert

import (
	_ "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of certificates.
type CertificateType int32

const (
	// 1 - 500 for public use.
	// 501 onwards for private use.
	CertificateType_CERTIFICATE_TYPE_UNSPECIFIED CertificateType = 0
	CertificateType_CERTIFICATE_TYPE_X509        CertificateType = 1
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERTIFICATE_TYPE_UNSPECIFIED",
		1: "CERTIFICATE_TYPE_X509",
	}
	CertificateType_value = map[string]int32{
		"CERTIFICATE_TYPE_UNSPECIFIED": 0,
		"CERTIFICATE_TYPE_X509":        1,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_certz_certz_proto_enumTypes[0].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_certz_certz_proto_enumTypes[0]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{0}
}

type CertificateEncoding int32

const (
	// 1 - 500 for public use.
	// 501 onwards for private use.
	CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED CertificateEncoding = 0
	CertificateEncoding_CERTIFICATE_ENCODING_PEM         CertificateEncoding = 1
	CertificateEncoding_CERTIFICATE_ENCODING_DER         CertificateEncoding = 2
	CertificateEncoding_CERTIFICATE_ENCODING_CRT         CertificateEncoding = 3
)

// Enum value maps for CertificateEncoding.
var (
	CertificateEncoding_name = map[int32]string{
		0: "CERTIFICATE_ENCODING_UNSPECIFIED",
		1: "CERTIFICATE_ENCODING_PEM",
		2: "CERTIFICATE_ENCODING_DER",
		3: "CERTIFICATE_ENCODING_CRT",
	}
	CertificateEncoding_value = map[string]int32{
		"CERTIFICATE_ENCODING_UNSPECIFIED": 0,
		"CERTIFICATE_ENCODING_PEM":         1,
		"CERTIFICATE_ENCODING_DER":         2,
		"CERTIFICATE_ENCODING_CRT":         3,
	}
)

func (x CertificateEncoding) Enum() *CertificateEncoding {
	p := new(CertificateEncoding)
	*p = x
	return p
}

func (x CertificateEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_certz_certz_proto_enumTypes[1].Descriptor()
}

func (CertificateEncoding) Type() protoreflect.EnumType {
	return &file_certz_certz_proto_enumTypes[1]
}

func (x CertificateEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateEncoding.Descriptor instead.
func (CertificateEncoding) EnumDescriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{1}
}

// Algorithm to be used for generation of the key pair.
type KeyType int32

const (
	// 1 - 500, for known types.
	// 501 and onwards for private use.
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	KeyType_KEY_TYPE_RSA         KeyType = 1
	KeyType_KEY_TYPE_ECDSA       KeyType = 2
	KeyType_KEY_TYPE_EDDSA       KeyType = 3
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "KEY_TYPE_RSA",
		2: "KEY_TYPE_ECDSA",
		3: "KEY_TYPE_EDDSA",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED": 0,
		"KEY_TYPE_RSA":         1,
		"KEY_TYPE_ECDSA":       2,
		"KEY_TYPE_EDDSA":       3,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_certz_certz_proto_enumTypes[2].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_certz_certz_proto_enumTypes[2]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{2}
}

type SignatureAlgorithm int32

const (
	// 1 - 500, for known types.
	// 501 and onwards for private use.
	SignatureAlgorithm_SIGNATURE_ALGORITHM_UNSPECIFIED        SignatureAlgorithm = 0
	SignatureAlgorithm_SIGNATURE_ALGORITHM_MD2_WITH_RSA       SignatureAlgorithm = 1
	SignatureAlgorithm_SIGNATURE_ALGORITHM_MD5_WITH_RSA       SignatureAlgorithm = 2
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA1_WITH_RSA      SignatureAlgorithm = 3
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA256_WITH_RSA    SignatureAlgorithm = 4
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA384_WITH_RSA    SignatureAlgorithm = 5
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA512_WITH_RSA    SignatureAlgorithm = 6
	SignatureAlgorithm_SIGNATURE_ALGORITHM_DSA_WITH_SHA1      SignatureAlgorithm = 7
	SignatureAlgorithm_SIGNATURE_ALGORITHM_DSA_WITH_SHA256    SignatureAlgorithm = 8
	SignatureAlgorithm_SIGNATURE_ALGORITHM_ECDSA_WITH_SHA1    SignatureAlgorithm = 9
	SignatureAlgorithm_SIGNATURE_ALGORITHM_ECDSA_WITH_SHA256  SignatureAlgorithm = 10
	SignatureAlgorithm_SIGNATURE_ALGORITHM_ECDSA_WITH_SHA384  SignatureAlgorithm = 11
	SignatureAlgorithm_SIGNATURE_ALGORITHM_ECDSA_WITH_SHA512  SignatureAlgorithm = 12
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA256_WITH_RSAPSS SignatureAlgorithm = 13
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA384_WITH_RSAPSS SignatureAlgorithm = 14
	SignatureAlgorithm_SIGNATURE_ALGORITHM_SHA512_WITH_RSAPSS SignatureAlgorithm = 15
	SignatureAlgorithm_SIGNATURE_ALGORITHM_PURE_ED25519       SignatureAlgorithm = 16
)

// Enum value maps for SignatureAlgorithm.
var (
	SignatureAlgorithm_name = map[int32]string{
		0:  "SIGNATURE_ALGORITHM_UNSPECIFIED",
		1:  "SIGNATURE_ALGORITHM_MD2_WITH_RSA",
		2:  "SIGNATURE_ALGORITHM_MD5_WITH_RSA",
		3:  "SIGNATURE_ALGORITHM_SHA1_WITH_RSA",
		4:  "SIGNATURE_ALGORITHM_SHA256_WITH_RSA",
		5:  "SIGNATURE_ALGORITHM_SHA384_WITH_RSA",
		6:  "SIGNATURE_ALGORITHM_SHA512_WITH_RSA",
		7:  "SIGNATURE_ALGORITHM_DSA_WITH_SHA1",
		8:  "SIGNATURE_ALGORITHM_DSA_WITH_SHA256",
		9:  "SIGNATURE_ALGORITHM_ECDSA_WITH_SHA1",
		10: "SIGNATURE_ALGORITHM_ECDSA_WITH_SHA256",
		11: "SIGNATURE_ALGORITHM_ECDSA_WITH_SHA384",
		12: "SIGNATURE_ALGORITHM_ECDSA_WITH_SHA512",
		13: "SIGNATURE_ALGORITHM_SHA256_WITH_RSAPSS",
		14: "SIGNATURE_ALGORITHM_SHA384_WITH_RSAPSS",
		15: "SIGNATURE_ALGORITHM_SHA512_WITH_RSAPSS",
		16: "SIGNATURE_ALGORITHM_PURE_ED25519",
	}
	SignatureAlgorithm_value = map[string]int32{
		"SIGNATURE_ALGORITHM_UNSPECIFIED":        0,
		"SIGNATURE_ALGORITHM_MD2_WITH_RSA":       1,
		"SIGNATURE_ALGORITHM_MD5_WITH_RSA":       2,
		"SIGNATURE_ALGORITHM_SHA1_WITH_RSA":      3,
		"SIGNATURE_ALGORITHM_SHA256_WITH_RSA":    4,
		"SIGNATURE_ALGORITHM_SHA384_WITH_RSA":    5,
		"SIGNATURE_ALGORITHM_SHA512_WITH_RSA":    6,
		"SIGNATURE_ALGORITHM_DSA_WITH_SHA1":      7,
		"SIGNATURE_ALGORITHM_DSA_WITH_SHA256":    8,
		"SIGNATURE_ALGORITHM_ECDSA_WITH_SHA1":    9,
		"SIGNATURE_ALGORITHM_ECDSA_WITH_SHA256":  10,
		"SIGNATURE_ALGORITHM_ECDSA_WITH_SHA384":  11,
		"SIGNATURE_ALGORITHM_ECDSA_WITH_SHA512":  12,
		"SIGNATURE_ALGORITHM_SHA256_WITH_RSAPSS": 13,
		"SIGNATURE_ALGORITHM_SHA384_WITH_RSAPSS": 14,
		"SIGNATURE_ALGORITHM_SHA512_WITH_RSAPSS": 15,
		"SIGNATURE_ALGORITHM_PURE_ED25519":       16,
	}
)

func (x SignatureAlgorithm) Enum() *SignatureAlgorithm {
	p := new(SignatureAlgorithm)
	*p = x
	return p
}

func (x SignatureAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_certz_certz_proto_enumTypes[3].Descriptor()
}

func (SignatureAlgorithm) Type() protoreflect.EnumType {
	return &file_certz_certz_proto_enumTypes[3]
}

func (x SignatureAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureAlgorithm.Descriptor instead.
func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{3}
}

// Request messages to rotate existing certificates on the target.
type RotateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to `true` the requested operation will succeed even if the
	// `version` is already in use (is not unique).
	// If set to `false` the requested operation will fail and the streaming RPC
	// will be closed with the `AlreadyExists` error if the `version` is already
	// in use (is not unique).
	// It is a no-op for the `finalize_rotation` request.
	ForceOverwrite bool `protobuf:"varint,1,opt,name=force_overwrite,json=forceOverwrite,proto3" json:"force_overwrite,omitempty"`
	// Request Messages.
	//
	// Types that are assignable to RotateRequest:
	//	*RotateCertificateRequest_GenerateCsr
	//	*RotateCertificateRequest_Certificates
	//	*RotateCertificateRequest_FinalizeRotation
	RotateRequest isRotateCertificateRequest_RotateRequest `protobuf_oneof:"rotate_request"`
}

func (x *RotateCertificateRequest) Reset() {
	*x = RotateCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertificateRequest) ProtoMessage() {}

func (x *RotateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertificateRequest.ProtoReflect.Descriptor instead.
func (*RotateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{0}
}

func (x *RotateCertificateRequest) GetForceOverwrite() bool {
	if x != nil {
		return x.ForceOverwrite
	}
	return false
}

func (m *RotateCertificateRequest) GetRotateRequest() isRotateCertificateRequest_RotateRequest {
	if m != nil {
		return m.RotateRequest
	}
	return nil
}

func (x *RotateCertificateRequest) GetGenerateCsr() *GenerateCSRRequest {
	if x, ok := x.GetRotateRequest().(*RotateCertificateRequest_GenerateCsr); ok {
		return x.GenerateCsr
	}
	return nil
}

func (x *RotateCertificateRequest) GetCertificates() *UploadRequest {
	if x, ok := x.GetRotateRequest().(*RotateCertificateRequest_Certificates); ok {
		return x.Certificates
	}
	return nil
}

func (x *RotateCertificateRequest) GetFinalizeRotation() *FinalizeRequest {
	if x, ok := x.GetRotateRequest().(*RotateCertificateRequest_FinalizeRotation); ok {
		return x.FinalizeRotation
	}
	return nil
}

type isRotateCertificateRequest_RotateRequest interface {
	isRotateCertificateRequest_RotateRequest()
}

type RotateCertificateRequest_GenerateCsr struct {
	GenerateCsr *GenerateCSRRequest `protobuf:"bytes,2,opt,name=generate_csr,json=generateCsr,proto3,oneof"`
}

type RotateCertificateRequest_Certificates struct {
	Certificates *UploadRequest `protobuf:"bytes,3,opt,name=certificates,proto3,oneof"`
}

type RotateCertificateRequest_FinalizeRotation struct {
	FinalizeRotation *FinalizeRequest `protobuf:"bytes,4,opt,name=finalize_rotation,json=finalizeRotation,proto3,oneof"`
}

func (*RotateCertificateRequest_GenerateCsr) isRotateCertificateRequest_RotateRequest() {}

func (*RotateCertificateRequest_Certificates) isRotateCertificateRequest_RotateRequest() {}

func (*RotateCertificateRequest_FinalizeRotation) isRotateCertificateRequest_RotateRequest() {}

// Response Messages from the target.
type RotateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response messages.
	//
	// Types that are assignable to RotateResponse:
	//	*RotateCertificateResponse_GeneratedCsr
	//	*RotateCertificateResponse_Certificates
	RotateResponse isRotateCertificateResponse_RotateResponse `protobuf_oneof:"rotate_response"`
}

func (x *RotateCertificateResponse) Reset() {
	*x = RotateCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertificateResponse) ProtoMessage() {}

func (x *RotateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertificateResponse.ProtoReflect.Descriptor instead.
func (*RotateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{1}
}

func (m *RotateCertificateResponse) GetRotateResponse() isRotateCertificateResponse_RotateResponse {
	if m != nil {
		return m.RotateResponse
	}
	return nil
}

func (x *RotateCertificateResponse) GetGeneratedCsr() *GenerateCSRResponse {
	if x, ok := x.GetRotateResponse().(*RotateCertificateResponse_GeneratedCsr); ok {
		return x.GeneratedCsr
	}
	return nil
}

func (x *RotateCertificateResponse) GetCertificates() *UploadResponse {
	if x, ok := x.GetRotateResponse().(*RotateCertificateResponse_Certificates); ok {
		return x.Certificates
	}
	return nil
}

type isRotateCertificateResponse_RotateResponse interface {
	isRotateCertificateResponse_RotateResponse()
}

type RotateCertificateResponse_GeneratedCsr struct {
	GeneratedCsr *GenerateCSRResponse `protobuf:"bytes,1,opt,name=generated_csr,json=generatedCsr,proto3,oneof"`
}

type RotateCertificateResponse_Certificates struct {
	Certificates *UploadResponse `protobuf:"bytes,2,opt,name=certificates,proto3,oneof"`
}

func (*RotateCertificateResponse_GeneratedCsr) isRotateCertificateResponse_RotateResponse() {}

func (*RotateCertificateResponse_Certificates) isRotateCertificateResponse_RotateResponse() {}

// A Finalize message is sent to the target to confirm the Rotation of
// the certificate and that the certificate should not be rolled back when
// the RPC concludes. The certificate must be rolled back if the target returns
// an error after receiving a Finalize message.
type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{2}
}

// A set of parameters a Certificate Signing Request.
// Used to specify what type of CSR the client expects from the target.
type CSRParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType                KeyType            `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=gnsi.certz.KeyType" json:"key_type,omitempty"`
	SignatureAlgorithmType SignatureAlgorithm `protobuf:"varint,2,opt,name=signature_algorithm_type,json=signatureAlgorithmType,proto3,enum=gnsi.certz.SignatureAlgorithm" json:"signature_algorithm_type,omitempty"`
	CertificateType        CertificateType    `protobuf:"varint,3,opt,name=certificate_type,json=certificateType,proto3,enum=gnsi.certz.CertificateType" json:"certificate_type,omitempty"`
	KeySizeBits            uint32             `protobuf:"varint,4,opt,name=key_size_bits,json=keySizeBits,proto3" json:"key_size_bits,omitempty"`
}

func (x *CSRParams) Reset() {
	*x = CSRParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRParams) ProtoMessage() {}

func (x *CSRParams) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRParams.ProtoReflect.Descriptor instead.
func (*CSRParams) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{3}
}

func (x *CSRParams) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *CSRParams) GetSignatureAlgorithmType() SignatureAlgorithm {
	if x != nil {
		return x.SignatureAlgorithmType
	}
	return SignatureAlgorithm_SIGNATURE_ALGORITHM_UNSPECIFIED
}

func (x *CSRParams) GetCertificateType() CertificateType {
	if x != nil {
		return x.CertificateType
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CSRParams) GetKeySizeBits() uint32 {
	if x != nil {
		return x.KeySizeBits
	}
	return 0
}

// A request to ask the target if it can generate key pairs.
type CanGenerateCSRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *CSRParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CanGenerateCSRRequest) Reset() {
	*x = CanGenerateCSRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanGenerateCSRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateCSRRequest) ProtoMessage() {}

func (x *CanGenerateCSRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateCSRRequest.ProtoReflect.Descriptor instead.
func (*CanGenerateCSRRequest) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{4}
}

func (x *CanGenerateCSRRequest) GetParams() *CSRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Response from the target about whether it can generate a CSR with the given
// parameters.
type CanGenerateCSRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanGenerate bool `protobuf:"varint,4,opt,name=can_generate,json=canGenerate,proto3" json:"can_generate,omitempty"`
}

func (x *CanGenerateCSRResponse) Reset() {
	*x = CanGenerateCSRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanGenerateCSRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateCSRResponse) ProtoMessage() {}

func (x *CanGenerateCSRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateCSRResponse.ProtoReflect.Descriptor instead.
func (*CanGenerateCSRResponse) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{5}
}

func (x *CanGenerateCSRResponse) GetCanGenerate() bool {
	if x != nil {
		return x.CanGenerate
	}
	return false
}

// A certificate.
type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of certificate.
	Type CertificateType `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.CertificateType" json:"type,omitempty"`
	// Certificate encoding type.
	Encoding CertificateEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.CertificateEncoding" json:"encoding,omitempty"`
	// Actual certificate.
	// The exact encoding depends upon the type of certificate.
	// for X509, this should be a PEM encoded Certificate.
	Certificate []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Optional.
	// Not needed if the device knows the private key or does not have to know it.
	PrivateKey []byte `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{6}
}

func (x *Certificate) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *Certificate) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *Certificate) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Certificate) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type CertificateBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *CertificateBundle) Reset() {
	*x = CertificateBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBundle) ProtoMessage() {}

func (x *CertificateBundle) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBundle.ProtoReflect.Descriptor instead.
func (*CertificateBundle) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{7}
}

func (x *CertificateBundle) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

// A certificate revocation list (CRL)
type CertificateRevocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the CRL.
	Type CertificateType `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.CertificateType" json:"type,omitempty"`
	// CRL encoding type.
	Encoding CertificateEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.CertificateEncoding" json:"encoding,omitempty"`
	// Actual CRL.
	// The exact encoding depends upon the type of CRL.
	// for X509, this should be a PEM encoded CRL.
	CertificateRevocationList []byte `protobuf:"bytes,3,opt,name=certificate_revocation_list,json=certificateRevocationList,proto3" json:"certificate_revocation_list,omitempty"`
	// ID of this CRL, which is the CRL file hash.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CertificateRevocationList) Reset() {
	*x = CertificateRevocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRevocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRevocationList) ProtoMessage() {}

func (x *CertificateRevocationList) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRevocationList.ProtoReflect.Descriptor instead.
func (*CertificateRevocationList) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{8}
}

func (x *CertificateRevocationList) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateRevocationList) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *CertificateRevocationList) GetCertificateRevocationList() []byte {
	if x != nil {
		return x.CertificateRevocationList
	}
	return nil
}

func (x *CertificateRevocationList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateRevocationListBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateRevocationLists []*CertificateRevocationList `protobuf:"bytes,1,rep,name=certificate_revocation_lists,json=certificateRevocationLists,proto3" json:"certificate_revocation_lists,omitempty"`
}

func (x *CertificateRevocationListBundle) Reset() {
	*x = CertificateRevocationListBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRevocationListBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRevocationListBundle) ProtoMessage() {}

func (x *CertificateRevocationListBundle) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRevocationListBundle.ProtoReflect.Descriptor instead.
func (*CertificateRevocationListBundle) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{9}
}

func (x *CertificateRevocationListBundle) GetCertificateRevocationLists() []*CertificateRevocationList {
	if x != nil {
		return x.CertificateRevocationLists
	}
	return nil
}

// An entity.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `version` contains versioning information that is controlled by
	// the credential manager and reported as-is by the telemetry reporting system
	// (ie, transparent to the device credential service).  Credential managers
	// should choose version strings as discrete as possible to ease alert
	// generation (eg, for credentials sourced from a bundle, the timestamp of
	// the bundle should be used but not the time when the credential is pushed to
	// a particular switch).  Also, such version strings should be persisted by
	// the devices onto non-volatile memory for preservation across system
	// reboots.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// `created_on` contains information when the credentials were created.
	// This information is controlled by the credential manager and reported as-is
	// by the telemetry reporting system (ie, transparent to the device credential
	// service).  Credential managers should use the timestamp of the moment when
	// credential was created, not the time when the credential is pushed to
	// a particular switch).
	// Also, this timestamp should be persisted by the devices onto non-volatile
	// memory for preservation across system reboots.
	// `created_on` is a timestamp: the number of seconds since
	// January 1st, 1970 00:00:00 GMT.
	CreatedOn uint64 `protobuf:"varint,2,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// Types that are assignable to Entity:
	//	*Entity_Certificate
	//	*Entity_TrustBundle
	//	*Entity_CertificateRevocationListBundle
	Entity isEntity_Entity `protobuf_oneof:"entity"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{10}
}

func (x *Entity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Entity) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (m *Entity) GetEntity() isEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *Entity) GetCertificate() *Certificate {
	if x, ok := x.GetEntity().(*Entity_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *Entity) GetTrustBundle() *CertificateBundle {
	if x, ok := x.GetEntity().(*Entity_TrustBundle); ok {
		return x.TrustBundle
	}
	return nil
}

func (x *Entity) GetCertificateRevocationListBundle() *CertificateRevocationListBundle {
	if x, ok := x.GetEntity().(*Entity_CertificateRevocationListBundle); ok {
		return x.CertificateRevocationListBundle
	}
	return nil
}

type isEntity_Entity interface {
	isEntity_Entity()
}

type Entity_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,3,opt,name=certificate,proto3,oneof"`
}

type Entity_TrustBundle struct {
	TrustBundle *CertificateBundle `protobuf:"bytes,4,opt,name=trust_bundle,json=trustBundle,proto3,oneof"`
}

type Entity_CertificateRevocationListBundle struct {
	CertificateRevocationListBundle *CertificateRevocationListBundle `protobuf:"bytes,5,opt,name=certificate_revocation_list_bundle,json=certificateRevocationListBundle,proto3,oneof"`
}

func (*Entity_Certificate) isEntity_Entity() {}

func (*Entity_TrustBundle) isEntity_Entity() {}

func (*Entity_CertificateRevocationListBundle) isEntity_Entity() {}

// UploadRequest instructs the target to store the given entities (certificte,
// and/or trust bundle and certificate revocation list bundle).
//
// As the target does not generate the CSR, the public/private key pair is
// generated externally and the target is provided with the private/public key
// pair.
//
// The trust bundle (a chain of Certificate Authoritity certificates) can be
// used to validate client's certificates.
// To improve performance in the Target, certificates can be ordered.
// Groups of chained certificates should be last, where within, the root
// certificate is the last one. E.g.:
// CertA, CertB, CertB-Root, CertC, CertC-Intermediate, CertC-Root
type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{11}
}

func (x *UploadRequest) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{12}
}

// A certificate signing request (CSR)
type CertificateSigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the CSR.
	Type CertificateType `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.CertificateType" json:"type,omitempty"`
	// CSR encoding type.
	Encoding CertificateEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.CertificateEncoding" json:"encoding,omitempty"`
	// Actual CSR.
	// The exact encoding depends upon the type of CSR.
	// for X509, this should be a PEM encoded CSR.
	CertificateSigningRequest []byte `protobuf:"bytes,3,opt,name=certificate_signing_request,json=certificateSigningRequest,proto3" json:"certificate_signing_request,omitempty"`
}

func (x *CertificateSigningRequest) Reset() {
	*x = CertificateSigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateSigningRequest) ProtoMessage() {}

func (x *CertificateSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateSigningRequest.ProtoReflect.Descriptor instead.
func (*CertificateSigningRequest) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{13}
}

func (x *CertificateSigningRequest) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateSigningRequest) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *CertificateSigningRequest) GetCertificateSigningRequest() []byte {
	if x != nil {
		return x.CertificateSigningRequest
	}
	return nil
}

// A message sent by a client requesting the target to generate a CSR with
// the sepcified parameters.
type GenerateCSRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *CSRParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GenerateCSRRequest) Reset() {
	*x = GenerateCSRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRRequest) ProtoMessage() {}

func (x *GenerateCSRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRRequest.ProtoReflect.Descriptor instead.
func (*GenerateCSRRequest) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateCSRRequest) GetParams() *CSRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// A message sent by the target as response to the GenerateCSRRequest.
type GenerateCSRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateSigningRequest *CertificateSigningRequest `protobuf:"bytes,1,opt,name=certificate_signing_request,json=certificateSigningRequest,proto3" json:"certificate_signing_request,omitempty"`
}

func (x *GenerateCSRResponse) Reset() {
	*x = GenerateCSRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certz_certz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRResponse) ProtoMessage() {}

func (x *GenerateCSRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certz_certz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRResponse.ProtoReflect.Descriptor instead.
func (*GenerateCSRResponse) Descriptor() ([]byte, []int) {
	return file_certz_certz_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateCSRResponse) GetCertificateSigningRequest() *CertificateSigningRequest {
	if x != nil {
		return x.CertificateSigningRequest
	}
	return nil
}

var File_certz_certz_proto protoreflect.FileDescriptor

var file_certz_certz_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x1a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x02,
	0x0a, 0x18, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x73, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x7a, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x73, 0x72, 0x12, 0x40, 0x0a,
	0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x09, 0x43, 0x53, 0x52, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x7a, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x7a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6b, 0x65,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x15, 0x43, 0x61, 0x6e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e,
	0x43, 0x53, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x3b, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0xbe,
	0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0x50, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a,
	0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x1f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x67, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1a,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x7a, 0x0a, 0x22, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3f, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x53, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72,
	0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x4e, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x35, 0x30, 0x39, 0x10, 0x01, 0x2a, 0x95, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45,
	0x4d, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x54, 0x10, 0x03, 0x2a,
	0x5d, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x53, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x44, 0x53, 0x41, 0x10, 0x03, 0x2a, 0xcb,
	0x05, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x4d, 0x44, 0x32, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4d, 0x44, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x52, 0x53, 0x41, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x31, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x03, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x52, 0x53, 0x41, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x05, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x10, 0x07, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x10,
	0x09, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53,
	0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x45,
	0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32,
	0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x50, 0x53, 0x53, 0x10, 0x0d, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x52, 0x53, 0x41, 0x50, 0x53, 0x53, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x53,
	0x41, 0x50, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x50, 0x55,
	0x52, 0x45, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x10, 0x32, 0xbb, 0x01, 0x0a,
	0x05, 0x43, 0x65, 0x72, 0x74, 0x7a, 0x12, 0x59, 0x0a, 0x06, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x53, 0x52, 0x12, 0x21, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a,
	0x2e, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x7a, 0x2e, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x1f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0xd2, 0x3e, 0x05,
	0x30, 0x2e, 0x32, 0x2e, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_certz_certz_proto_rawDescOnce sync.Once
	file_certz_certz_proto_rawDescData = file_certz_certz_proto_rawDesc
)

func file_certz_certz_proto_rawDescGZIP() []byte {
	file_certz_certz_proto_rawDescOnce.Do(func() {
		file_certz_certz_proto_rawDescData = protoimpl.X.CompressGZIP(file_certz_certz_proto_rawDescData)
	})
	return file_certz_certz_proto_rawDescData
}

var file_certz_certz_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_certz_certz_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_certz_certz_proto_goTypes = []interface{}{
	(CertificateType)(0),                    // 0: gnsi.certz.CertificateType
	(CertificateEncoding)(0),                // 1: gnsi.certz.CertificateEncoding
	(KeyType)(0),                            // 2: gnsi.certz.KeyType
	(SignatureAlgorithm)(0),                 // 3: gnsi.certz.SignatureAlgorithm
	(*RotateCertificateRequest)(nil),        // 4: gnsi.certz.RotateCertificateRequest
	(*RotateCertificateResponse)(nil),       // 5: gnsi.certz.RotateCertificateResponse
	(*FinalizeRequest)(nil),                 // 6: gnsi.certz.FinalizeRequest
	(*CSRParams)(nil),                       // 7: gnsi.certz.CSRParams
	(*CanGenerateCSRRequest)(nil),           // 8: gnsi.certz.CanGenerateCSRRequest
	(*CanGenerateCSRResponse)(nil),          // 9: gnsi.certz.CanGenerateCSRResponse
	(*Certificate)(nil),                     // 10: gnsi.certz.Certificate
	(*CertificateBundle)(nil),               // 11: gnsi.certz.CertificateBundle
	(*CertificateRevocationList)(nil),       // 12: gnsi.certz.CertificateRevocationList
	(*CertificateRevocationListBundle)(nil), // 13: gnsi.certz.CertificateRevocationListBundle
	(*Entity)(nil),                          // 14: gnsi.certz.Entity
	(*UploadRequest)(nil),                   // 15: gnsi.certz.UploadRequest
	(*UploadResponse)(nil),                  // 16: gnsi.certz.UploadResponse
	(*CertificateSigningRequest)(nil),       // 17: gnsi.certz.CertificateSigningRequest
	(*GenerateCSRRequest)(nil),              // 18: gnsi.certz.GenerateCSRRequest
	(*GenerateCSRResponse)(nil),             // 19: gnsi.certz.GenerateCSRResponse
}
var file_certz_certz_proto_depIdxs = []int32{
	18, // 0: gnsi.certz.RotateCertificateRequest.generate_csr:type_name -> gnsi.certz.GenerateCSRRequest
	15, // 1: gnsi.certz.RotateCertificateRequest.certificates:type_name -> gnsi.certz.UploadRequest
	6,  // 2: gnsi.certz.RotateCertificateRequest.finalize_rotation:type_name -> gnsi.certz.FinalizeRequest
	19, // 3: gnsi.certz.RotateCertificateResponse.generated_csr:type_name -> gnsi.certz.GenerateCSRResponse
	16, // 4: gnsi.certz.RotateCertificateResponse.certificates:type_name -> gnsi.certz.UploadResponse
	2,  // 5: gnsi.certz.CSRParams.key_type:type_name -> gnsi.certz.KeyType
	3,  // 6: gnsi.certz.CSRParams.signature_algorithm_type:type_name -> gnsi.certz.SignatureAlgorithm
	0,  // 7: gnsi.certz.CSRParams.certificate_type:type_name -> gnsi.certz.CertificateType
	7,  // 8: gnsi.certz.CanGenerateCSRRequest.params:type_name -> gnsi.certz.CSRParams
	0,  // 9: gnsi.certz.Certificate.type:type_name -> gnsi.certz.CertificateType
	1,  // 10: gnsi.certz.Certificate.encoding:type_name -> gnsi.certz.CertificateEncoding
	10, // 11: gnsi.certz.CertificateBundle.certificates:type_name -> gnsi.certz.Certificate
	0,  // 12: gnsi.certz.CertificateRevocationList.type:type_name -> gnsi.certz.CertificateType
	1,  // 13: gnsi.certz.CertificateRevocationList.encoding:type_name -> gnsi.certz.CertificateEncoding
	12, // 14: gnsi.certz.CertificateRevocationListBundle.certificate_revocation_lists:type_name -> gnsi.certz.CertificateRevocationList
	10, // 15: gnsi.certz.Entity.certificate:type_name -> gnsi.certz.Certificate
	11, // 16: gnsi.certz.Entity.trust_bundle:type_name -> gnsi.certz.CertificateBundle
	13, // 17: gnsi.certz.Entity.certificate_revocation_list_bundle:type_name -> gnsi.certz.CertificateRevocationListBundle
	14, // 18: gnsi.certz.UploadRequest.entities:type_name -> gnsi.certz.Entity
	0,  // 19: gnsi.certz.CertificateSigningRequest.type:type_name -> gnsi.certz.CertificateType
	1,  // 20: gnsi.certz.CertificateSigningRequest.encoding:type_name -> gnsi.certz.CertificateEncoding
	7,  // 21: gnsi.certz.GenerateCSRRequest.params:type_name -> gnsi.certz.CSRParams
	17, // 22: gnsi.certz.GenerateCSRResponse.certificate_signing_request:type_name -> gnsi.certz.CertificateSigningRequest
	4,  // 23: gnsi.certz.Certz.Rotate:input_type -> gnsi.certz.RotateCertificateRequest
	8,  // 24: gnsi.certz.Certz.CanGenerateCSR:input_type -> gnsi.certz.CanGenerateCSRRequest
	5,  // 25: gnsi.certz.Certz.Rotate:output_type -> gnsi.certz.RotateCertificateResponse
	9,  // 26: gnsi.certz.Certz.CanGenerateCSR:output_type -> gnsi.certz.CanGenerateCSRResponse
	25, // [25:27] is the sub-list for method output_type
	23, // [23:25] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_certz_certz_proto_init() }
func file_certz_certz_proto_init() {
	if File_certz_certz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_certz_certz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanGenerateCSRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanGenerateCSRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRevocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRevocationListBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateSigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certz_certz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_certz_certz_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RotateCertificateRequest_GenerateCsr)(nil),
		(*RotateCertificateRequest_Certificates)(nil),
		(*RotateCertificateRequest_FinalizeRotation)(nil),
	}
	file_certz_certz_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RotateCertificateResponse_GeneratedCsr)(nil),
		(*RotateCertificateResponse_Certificates)(nil),
	}
	file_certz_certz_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Entity_Certificate)(nil),
		(*Entity_TrustBundle)(nil),
		(*Entity_CertificateRevocationListBundle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_certz_certz_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_certz_certz_proto_goTypes,
		DependencyIndexes: file_certz_certz_proto_depIdxs,
		EnumInfos:         file_certz_certz_proto_enumTypes,
		MessageInfos:      file_certz_certz_proto_msgTypes,
	}.Build()
	File_certz_certz_proto = out.File
	file_certz_certz_proto_rawDesc = nil
	file_certz_certz_proto_goTypes = nil
	file_certz_certz_proto_depIdxs = nil
}
