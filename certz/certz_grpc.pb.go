// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertzClient is the client API for Certz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertzClient interface {
	// Rotate will replace an existing device certificate and/or CA certificates
	// (trust bundle) or/and a certificate revocation list bundle on the target.
	// The new device certificate can be created from a target-generated or
	// client-generated CSR. In the former case the client has to provide
	// coresponding private key with the signed certificate.
	// If the stream is broken or any of the steps fail the target must rollback
	// to the original state, i.e. revert any changes to the certificate,
	// CA certificates and the Certificate Revocation List bundle.
	//
	// The following describes a number of use cases each presenting the expected
	// sequence of message exchange.
	//
	// Case 1: Client generates the CSR, gets it signed and then uploads it.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: CSR Generation and certificate signing
	//     Client generates the CSR and gets the certificate signed by the CA.
	//
	//   Step 3: Send Certificate and optional content to the Target.
	//     mandatory: signed certificate with private key
	//     optional: trust bundle - Certificate Authority certificate chain
	//     optional: certificate revocation list bundle
	//     Client --> UploadRequest(certificate, [trust_bundle],
	//                              [certificate_revocation_list]) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 4 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates and validates that
	//     the certificates "work".
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     If new certificate revocation list bundle has been uploaded in step 3,
	//     during this step the client also attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 5: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	// Case 2: Target generates the CSR, client gets it signed and uploads it.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: CSR
	//     Client -----> GenerateCSRRequest----> Target
	//     Client <----- GenerateCSRResponse <--- Target
	//
	//   Step 3: Certificate Signing
	//     Client gets the certificate signed by the CA.
	//
	//   Step 4: Send Certificate and optional content to the Target.
	//     mandatory: signed certificate without private key
	//     optional: trust bundle - Certificate Authority certificate chain
	//     optional: certificate revocation list bundle
	//     Client --> UploadRequest(certificate, [trust_bundle],
	//                              [certificate_revocation_list]) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 5: Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates and validates that
	//     the certificates "work".
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     If new certificate revocation list bundle has been uploaded in step 4,
	//     during this step the client also attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 6: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	// Case 3: Client changes only trust bundle on the Target.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: Send CA Certificate Bundle to the Target.
	//     mandatory: trust bundle - Certificate Authority chain
	//     optional: certificate revocation list bundle
	//     Client --> UploadRequest(trust_bundle,
	//                              [certificate_revocation_list]) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using a new certificate that can be validated using the new
	//     trust bundle and validates that the CA certificates "work".
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     If new certificate revocation list bundle has been uploaded in step 2,
	//     during this step the client also attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 4: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	// Case 4: Client provides certificate revocation list bundle to the Target.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: Send certificate revocation list bundle to the target.
	//     mandatory: certificate revocation list bundle
	//     Client --> UploadRequest(certificate_revocation_list) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step the client attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     If the new connection can be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 4: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	//
	Rotate(ctx context.Context, opts ...grpc.CallOption) (Certz_RotateClient, error)
	// An RPC to ask a target if it can generate a Certificate Signing Request.
	CanGenerateCSR(ctx context.Context, in *CanGenerateCSRRequest, opts ...grpc.CallOption) (*CanGenerateCSRResponse, error)
}

type certzClient struct {
	cc grpc.ClientConnInterface
}

func NewCertzClient(cc grpc.ClientConnInterface) CertzClient {
	return &certzClient{cc}
}

func (c *certzClient) Rotate(ctx context.Context, opts ...grpc.CallOption) (Certz_RotateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Certz_ServiceDesc.Streams[0], "/gnsi.certz.Certz/Rotate", opts...)
	if err != nil {
		return nil, err
	}
	x := &certzRotateClient{stream}
	return x, nil
}

type Certz_RotateClient interface {
	Send(*RotateCertificateRequest) error
	Recv() (*RotateCertificateResponse, error)
	grpc.ClientStream
}

type certzRotateClient struct {
	grpc.ClientStream
}

func (x *certzRotateClient) Send(m *RotateCertificateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *certzRotateClient) Recv() (*RotateCertificateResponse, error) {
	m := new(RotateCertificateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certzClient) CanGenerateCSR(ctx context.Context, in *CanGenerateCSRRequest, opts ...grpc.CallOption) (*CanGenerateCSRResponse, error) {
	out := new(CanGenerateCSRResponse)
	err := c.cc.Invoke(ctx, "/gnsi.certz.Certz/CanGenerateCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertzServer is the server API for Certz service.
// All implementations must embed UnimplementedCertzServer
// for forward compatibility
type CertzServer interface {
	// Rotate will replace an existing device certificate and/or CA certificates
	// (trust bundle) or/and a certificate revocation list bundle on the target.
	// The new device certificate can be created from a target-generated or
	// client-generated CSR. In the former case the client has to provide
	// coresponding private key with the signed certificate.
	// If the stream is broken or any of the steps fail the target must rollback
	// to the original state, i.e. revert any changes to the certificate,
	// CA certificates and the Certificate Revocation List bundle.
	//
	// The following describes a number of use cases each presenting the expected
	// sequence of message exchange.
	//
	// Case 1: Client generates the CSR, gets it signed and then uploads it.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: CSR Generation and certificate signing
	//     Client generates the CSR and gets the certificate signed by the CA.
	//
	//   Step 3: Send Certificate and optional content to the Target.
	//     mandatory: signed certificate with private key
	//     optional: trust bundle - Certificate Authority certificate chain
	//     optional: certificate revocation list bundle
	//     Client --> UploadRequest(certificate, [trust_bundle],
	//                              [certificate_revocation_list]) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 4 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates and validates that
	//     the certificates "work".
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     If new certificate revocation list bundle has been uploaded in step 3,
	//     during this step the client also attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 5: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	// Case 2: Target generates the CSR, client gets it signed and uploads it.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: CSR
	//     Client -----> GenerateCSRRequest----> Target
	//     Client <----- GenerateCSRResponse <--- Target
	//
	//   Step 3: Certificate Signing
	//     Client gets the certificate signed by the CA.
	//
	//   Step 4: Send Certificate and optional content to the Target.
	//     mandatory: signed certificate without private key
	//     optional: trust bundle - Certificate Authority certificate chain
	//     optional: certificate revocation list bundle
	//     Client --> UploadRequest(certificate, [trust_bundle],
	//                              [certificate_revocation_list]) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 5: Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates and validates that
	//     the certificates "work".
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     If new certificate revocation list bundle has been uploaded in step 4,
	//     during this step the client also attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 6: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	// Case 3: Client changes only trust bundle on the Target.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: Send CA Certificate Bundle to the Target.
	//     mandatory: trust bundle - Certificate Authority chain
	//     optional: certificate revocation list bundle
	//     Client --> UploadRequest(trust_bundle,
	//                              [certificate_revocation_list]) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using a new certificate that can be validated using the new
	//     trust bundle and validates that the CA certificates "work".
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     If new certificate revocation list bundle has been uploaded in step 2,
	//     during this step the client also attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 4: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	// Case 4: Client provides certificate revocation list bundle to the Target.
	//
	//   Step 1: Start the stream
	//     Client <---- Rotate() RPC stream begin ------> Target
	//
	//   Step 2: Send certificate revocation list bundle to the target.
	//     mandatory: certificate revocation list bundle
	//     Client --> UploadRequest(certificate_revocation_list) ----> Target
	//     Client <-- UploadResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step the client attempts to establish a new connection
	//     to the target using revoked certificate(s) - the attempt must fail
	//     prooving that the certificates have been revoked.
	//     If the new connection can be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates.
	//     Once verfied, the client then proceeds to finalize the rotation.
	//
	//   Step 4: Final commit.
	//     Client ---> FinalizeRequest ----> Target
	//
	//
	Rotate(Certz_RotateServer) error
	// An RPC to ask a target if it can generate a Certificate Signing Request.
	CanGenerateCSR(context.Context, *CanGenerateCSRRequest) (*CanGenerateCSRResponse, error)
	mustEmbedUnimplementedCertzServer()
}

// UnimplementedCertzServer must be embedded to have forward compatible implementations.
type UnimplementedCertzServer struct {
}

func (UnimplementedCertzServer) Rotate(Certz_RotateServer) error {
	return status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedCertzServer) CanGenerateCSR(context.Context, *CanGenerateCSRRequest) (*CanGenerateCSRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanGenerateCSR not implemented")
}
func (UnimplementedCertzServer) mustEmbedUnimplementedCertzServer() {}

// UnsafeCertzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertzServer will
// result in compilation errors.
type UnsafeCertzServer interface {
	mustEmbedUnimplementedCertzServer()
}

func RegisterCertzServer(s grpc.ServiceRegistrar, srv CertzServer) {
	s.RegisterService(&Certz_ServiceDesc, srv)
}

func _Certz_Rotate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CertzServer).Rotate(&certzRotateServer{stream})
}

type Certz_RotateServer interface {
	Send(*RotateCertificateResponse) error
	Recv() (*RotateCertificateRequest, error)
	grpc.ServerStream
}

type certzRotateServer struct {
	grpc.ServerStream
}

func (x *certzRotateServer) Send(m *RotateCertificateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *certzRotateServer) Recv() (*RotateCertificateRequest, error) {
	m := new(RotateCertificateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Certz_CanGenerateCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanGenerateCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertzServer).CanGenerateCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnsi.certz.Certz/CanGenerateCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertzServer).CanGenerateCSR(ctx, req.(*CanGenerateCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Certz_ServiceDesc is the grpc.ServiceDesc for Certz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Certz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.certz.Certz",
	HandlerType: (*CertzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanGenerateCSR",
			Handler:    _Certz_CanGenerateCSR_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rotate",
			Handler:       _Certz_Rotate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "certz/certz.proto",
}
