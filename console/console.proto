//
// Copyright 2021 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package gnsi.console;

import "github.com/openconfig/gnoi/types/types.proto";

// This package is a work in progress. It may change in the future. :-)
option go_package = "github.com/openconfig/gnsi/console";
option (gnoi.types.gnoi_version) = "0.1.0";

// The Console Credentials Management Service exported by targets.
//
// This service exports one RPC, MutateAccountPassword(), which is used
// to manage the console credentials on the target.
//
// Note that for the sake of data consistency and API simplicity, only one RPC
// may be in progress at a time.
// An attempt to initiate the MutateAccountPassword() RPC while another one is
// already in progress will be rejected with an error.

service Console {
  // MutateAccountPassword allows to specify an authentication console policy
  // to the network element. The policy, if valid, replaces the existing policy.
  //
  // Canonical error codes are to be used as responses. See
  // https://grpc.io/docs/guides/error/ for more details.
  //
  // Sets the SSH authorized keys list in whole for a system account
  // (e.g. the set of SSH keys accepted for login to the account).
  // Also sets the SSH authorized users list in whole for a system account
  // (e.g. the set of SSH certificate users accepted for login to the account).
  //
  // Use Case: The account/password credentials are replaced.
  //
  //   Step 1: Start the stream
  //     Client <---- MutateAccountPassword() RPC stream begin ------> Target
  //
  //   Step 2: New passwords are installed
  //     Client -----> SetPasswordRequest----> Target
  //     Client <----- SetPasswordResponse <--- Target
  //
  //   Step 3: Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new account/password credentials and validates
  //     that they "work".
  //     Once verfied, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the account/password
  //     credentials.
  //
  //   Step 4: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  //
  rpc MutateAccountPassword(stream MutateAccountPasswordRequest)
      returns (stream MutateAccountPasswordResponse);
}

message MutateAccountPasswordRequest {
  oneof request {
    SetPasswordRequest set_password = 1;
    FinalizeRequest finalize = 3;
  }
}

// MutateAccountPasswordResponse is the response to
// the MutateAccountPassword RPC.
message MutateAccountPasswordResponse {
  oneof response {
    SetPasswordResponse set_password = 1;
  }
}

message SetPasswordRequest {
  message Account {
    // The system role account name (e.g. root). This account must exist.
    string name = 1;
    // `password` specifies a password that is permitted for the system
    // role.
    string password = 2;
    // `version` contains versioning information that is controlled by
    // the credential manager and reported as-is by the telemetry reporting
    // system (ie, transparent to the device credential service).  Credential
    // managers should choose version strings as discrete as possible to ease
    // alert generation (eg, for credentials sourced from a bundle,
    // the timestamp of the bundle should be used but not the time when
    // the credential is pushed to a particular switch).  Also, such version
    // strings should be persisted by the devices onto non-volatile memory for
    // preservation across system reboots.
    string version = 3;
    // `created_on` contains information when the credentials were created.
    // This information is controlled by the credential manager and reported
    // as-is by the telemetry reporting system (ie, transparent to the device
    // credential service).  Credential managers should use the timestamp
    // of the moment when credential was created, not the time when
    // the credential is pushed to a particular switch).
    // Also, this timestamp should be persisted by the devices onto non-volatile
    // memory for preservation across system reboots.
    // `created_on` is a timestamp: the number of seconds since
    // January 1st, 1970 00:00:00 GMT.
    uint64 created_on = 4;
  }

  // A list of account/password pairs that are to be accepted on the network
  // element.
  // Multiple pairs MAY be specified to allow for multiple system roles,
  // or specific user restrictions to be described.
  repeated Account accounts = 1;
}

message SetPasswordResponse {}

message FinalizeRequest {}
