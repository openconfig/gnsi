//
// Copyright 2021 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.1
// source: credentialz/credentialz.proto

package credentialz

import (
	_ "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An option that is specified for a authorized user or key entry.
// For example, for OpenSSH, an entry can have an option
// `from="*.sales.example.net,!pc.sales.example.net"`
// For such option the `key.id` would be `FROM` (6) while the `value`
// would be `*.sales.example.net,!pc.sales.example.net`.
//
// If a specified option is unknown then the whole request should be rejected.
type Option_StandardOption int32

const (
	Option_STANDARD_OPTION_UNSPECIFIED Option_StandardOption = 0
	// Enable authentication agent forwarding previously disabled by the
	// restrict option.
	Option_STANDARD_OPTION_AGENT_FORWARDING Option_StandardOption = 1
	// Certificates may encode access restrictions similar to these key options.
	// If both certificate restrictions and key options are present, the most
	// restrictive union of the two is applied.
	Option_STANDARD_OPTION_CERT_ATHORITY Option_StandardOption = 2
	//  If a command is specified and a forced-command is embedded in a
	//  certificate used for authentication, then the certificate will be
	//  accepted only if the two commands are identical.
	Option_STANDARD_OPTION_COMMAND Option_StandardOption = 3
	//  Specifies that the string is to be added to the environment when logging
	//  in using this key.  Environment variables set this way override other
	//  default environment values.  Multiple options of this type are
	//  permitted. Environment processing is disabled by default and is
	//  controlled via the PermitUserEnvironment option.
	Option_STANDARD_OPTION_ENVIRONMENT Option_StandardOption = 4
	//  Specifies a time after which the key will not be accepted.  The time may
	//  be specified as a YYYYMMDD date or a YYYYMMDDHHMM[SS] time in the system
	//  time-zone.
	Option_STANDARD_OPTION_EXPIRT_TIME Option_StandardOption = 5
	// The purpose of this option is to optionally increase security: public key
	// authentication by itself does not trust the network or name servers or
	// anything (but the key); however, if somebody somehow steals the key, the
	// key permits an intruder to log in from anywhere in the world.  This
	// additional option makes using a stolen key more difficult (name servers
	// and/or routers would have to be compromised in addition to just the key).
	Option_STANDARD_OPTION_FROM Option_StandardOption = 6
	//  Forbids authentication agent forwarding when this key is used for
	//  authentication.
	Option_STANDARD_OPTION_NO_AGENT_FORWARDING Option_StandardOption = 7
	//  Forbids TCP forwarding when this key is used for authentication.  Any
	//  port forward requests by the client will return an error.  This might be
	//  used, e.g. in connection with the command option.
	Option_STANDARD_OPTION_NO_PORT_FORWARDING Option_StandardOption = 8
	// Prevents tty allocation (a request to allocate a pty will fail).
	Option_STANDARD_OPTION_NO_PTY Option_StandardOption = 9
	//  Disables execution of ~/.ssh/rc.
	Option_STANDARD_OPTION_NO_USER_RC Option_StandardOption = 10
	//  Forbids X11 forwarding when this key is used for authentication.  Any
	//  X11 forward requests by the client will return an error.
	Option_STANDARD_OPTION_NO_X11_FORWARDING Option_StandardOption = 11
	//  Limit remote port forwarding with the ssh(1) -R option such that it may
	//  only listen on the specified host (optional) and port.  IPv6 addresses
	//  can be specified by enclosing the address in square brackets.  Multiple
	//  permitlisten options may be applied separated by commas.  Hostnames may
	//  include wildcards as described in the PATTERNS section in ssh_config(5).
	//  A port specification of * matches any port. Note that the setting of
	//  GatewayPorts may further restrict listen addresses.  Note that ssh(1)
	//  will send a hostname of “localhost” if a listen host was not specified
	//  when the forwarding was requested, and that this name is treated
	//  differently to the explicit localhost addresses “127.0.0.1” and “::1”.
	Option_STANDARD_OPTION_PERMITLISTEN Option_StandardOption = 12
	//  Limit local port forwarding with the ssh(1) -L option such that it may
	//  only connect to the specified host and port.  IPv6 addresses can be
	//  specified by enclosing the address in square brackets.  Multiple
	//  permitopen options may be applied separated by commas.  No pattern
	//  matching or name lookup is performed on the specified hostnames, they
	//  must be literal host names and/or addresses.  A port specification of *
	//  matches any port.
	Option_STANDARD_OPTION_PERMITOPEN Option_StandardOption = 13
	// Enable port forwarding previously disabled by the restrict option.
	Option_STANDARD_OPTION_PORT_FORWARDING Option_StandardOption = 14
	//  On a cert-authority line, specifies allowed principals for certificate
	//  authentication as a comma-separated list.  At least one name from the
	//  list must appear in the certificate's list of principals for the
	//  certificate to be accepted. This option is ignored for keys that are not
	//  marked as trusted certificate signers using the cert-authority option.
	Option_STANDARD_OPTION_PRINCIPALS Option_StandardOption = 15
	// Permits tty allocation previously disabled by the restrict option.
	Option_STANDARD_OPTION_PTY Option_StandardOption = 16
	//  Do not require demonstration of user presence for signatures made using
	//  this key. This option only makes sense for the FIDO authenticator
	//  algorithms ecdsa-sk and ed25519-sk.
	Option_STANDARD_OPTION_NO_TOUCH_REQUIRED Option_StandardOption = 17
	//  Require that signatures made using this key attest that they verified
	//  the user, e.g. via a PIN.  This option only makes sense for the FIDO
	//  authenticator algorithms ecdsa-sk and ed25519-sk.
	Option_STANDARD_OPTION_VERIFY_REQUIRED Option_StandardOption = 18
	//  Enable all restrictions, i.e. disable port, agent and X11 forwarding, as
	//  well as disabling PTY allocation and execution of ~/.ssh/rc.  If any
	//  future restriction capabilities are added to authorized_keys files they
	//  will be included in this set.
	Option_STANDARD_OPTION_RESTRICT Option_StandardOption = 19
	//  Force a tun(4) device on the server.  Without this option, the next
	//  available device will be used if the client requests a tunnel.
	Option_STANDARD_OPTION_TUNNEL Option_StandardOption = 20
	//  Enables execution of ~/.ssh/rc previously disabled by the restrict
	//  option.
	Option_STANDARD_OPTION_USER_RC Option_StandardOption = 21
	//  Permits X11 forwarding previously disabled by the restrict option.
	Option_STANDARD_OPTION_X11_FORWARDING Option_StandardOption = 22
)

// Enum value maps for Option_StandardOption.
var (
	Option_StandardOption_name = map[int32]string{
		0:  "STANDARD_OPTION_UNSPECIFIED",
		1:  "STANDARD_OPTION_AGENT_FORWARDING",
		2:  "STANDARD_OPTION_CERT_ATHORITY",
		3:  "STANDARD_OPTION_COMMAND",
		4:  "STANDARD_OPTION_ENVIRONMENT",
		5:  "STANDARD_OPTION_EXPIRT_TIME",
		6:  "STANDARD_OPTION_FROM",
		7:  "STANDARD_OPTION_NO_AGENT_FORWARDING",
		8:  "STANDARD_OPTION_NO_PORT_FORWARDING",
		9:  "STANDARD_OPTION_NO_PTY",
		10: "STANDARD_OPTION_NO_USER_RC",
		11: "STANDARD_OPTION_NO_X11_FORWARDING",
		12: "STANDARD_OPTION_PERMITLISTEN",
		13: "STANDARD_OPTION_PERMITOPEN",
		14: "STANDARD_OPTION_PORT_FORWARDING",
		15: "STANDARD_OPTION_PRINCIPALS",
		16: "STANDARD_OPTION_PTY",
		17: "STANDARD_OPTION_NO_TOUCH_REQUIRED",
		18: "STANDARD_OPTION_VERIFY_REQUIRED",
		19: "STANDARD_OPTION_RESTRICT",
		20: "STANDARD_OPTION_TUNNEL",
		21: "STANDARD_OPTION_USER_RC",
		22: "STANDARD_OPTION_X11_FORWARDING",
	}
	Option_StandardOption_value = map[string]int32{
		"STANDARD_OPTION_UNSPECIFIED":         0,
		"STANDARD_OPTION_AGENT_FORWARDING":    1,
		"STANDARD_OPTION_CERT_ATHORITY":       2,
		"STANDARD_OPTION_COMMAND":             3,
		"STANDARD_OPTION_ENVIRONMENT":         4,
		"STANDARD_OPTION_EXPIRT_TIME":         5,
		"STANDARD_OPTION_FROM":                6,
		"STANDARD_OPTION_NO_AGENT_FORWARDING": 7,
		"STANDARD_OPTION_NO_PORT_FORWARDING":  8,
		"STANDARD_OPTION_NO_PTY":              9,
		"STANDARD_OPTION_NO_USER_RC":          10,
		"STANDARD_OPTION_NO_X11_FORWARDING":   11,
		"STANDARD_OPTION_PERMITLISTEN":        12,
		"STANDARD_OPTION_PERMITOPEN":          13,
		"STANDARD_OPTION_PORT_FORWARDING":     14,
		"STANDARD_OPTION_PRINCIPALS":          15,
		"STANDARD_OPTION_PTY":                 16,
		"STANDARD_OPTION_NO_TOUCH_REQUIRED":   17,
		"STANDARD_OPTION_VERIFY_REQUIRED":     18,
		"STANDARD_OPTION_RESTRICT":            19,
		"STANDARD_OPTION_TUNNEL":              20,
		"STANDARD_OPTION_USER_RC":             21,
		"STANDARD_OPTION_X11_FORWARDING":      22,
	}
)

func (x Option_StandardOption) Enum() *Option_StandardOption {
	p := new(Option_StandardOption)
	*p = x
	return p
}

func (x Option_StandardOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Option_StandardOption) Descriptor() protoreflect.EnumDescriptor {
	return file_credentialz_credentialz_proto_enumTypes[0].Descriptor()
}

func (Option_StandardOption) Type() protoreflect.EnumType {
	return &file_credentialz_credentialz_proto_enumTypes[0]
}

func (x Option_StandardOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Option_StandardOption.Descriptor instead.
func (Option_StandardOption) EnumDescriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{3, 0}
}

// Key encryption format.
type AccountCredentials_KeyType int32

const (
	AccountCredentials_KEYTYPE_UNKNOWN AccountCredentials_KeyType = 0
	AccountCredentials_KEYTYPE_ECDSA   AccountCredentials_KeyType = 1
	AccountCredentials_KEYTYPE_ED25519 AccountCredentials_KeyType = 2
	AccountCredentials_KEYTYPE_RSA     AccountCredentials_KeyType = 3
)

// Enum value maps for AccountCredentials_KeyType.
var (
	AccountCredentials_KeyType_name = map[int32]string{
		0: "KEYTYPE_UNKNOWN",
		1: "KEYTYPE_ECDSA",
		2: "KEYTYPE_ED25519",
		3: "KEYTYPE_RSA",
	}
	AccountCredentials_KeyType_value = map[string]int32{
		"KEYTYPE_UNKNOWN": 0,
		"KEYTYPE_ECDSA":   1,
		"KEYTYPE_ED25519": 2,
		"KEYTYPE_RSA":     3,
	}
)

func (x AccountCredentials_KeyType) Enum() *AccountCredentials_KeyType {
	p := new(AccountCredentials_KeyType)
	*p = x
	return p
}

func (x AccountCredentials_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountCredentials_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_credentialz_credentialz_proto_enumTypes[1].Descriptor()
}

func (AccountCredentials_KeyType) Type() protoreflect.EnumType {
	return &file_credentialz_credentialz_proto_enumTypes[1]
}

func (x AccountCredentials_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountCredentials_KeyType.Descriptor instead.
func (AccountCredentials_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{4, 0}
}

type RotateAccountCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RotateAccountCredentialsRequest_Credential
	//	*RotateAccountCredentialsRequest_User
	//	*RotateAccountCredentialsRequest_Password
	//	*RotateAccountCredentialsRequest_Finalize
	Request isRotateAccountCredentialsRequest_Request `protobuf_oneof:"request"`
}

func (x *RotateAccountCredentialsRequest) Reset() {
	*x = RotateAccountCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateAccountCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAccountCredentialsRequest) ProtoMessage() {}

func (x *RotateAccountCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAccountCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateAccountCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{0}
}

func (m *RotateAccountCredentialsRequest) GetRequest() isRotateAccountCredentialsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetCredential() *AuthorizedKeysRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_Credential); ok {
		return x.Credential
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetUser() *AuthorizedUsersRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_User); ok {
		return x.User
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetPassword() *PasswordRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_Password); ok {
		return x.Password
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetFinalize() *FinalizeRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_Finalize); ok {
		return x.Finalize
	}
	return nil
}

type isRotateAccountCredentialsRequest_Request interface {
	isRotateAccountCredentialsRequest_Request()
}

type RotateAccountCredentialsRequest_Credential struct {
	Credential *AuthorizedKeysRequest `protobuf:"bytes,1,opt,name=credential,proto3,oneof"`
}

type RotateAccountCredentialsRequest_User struct {
	User *AuthorizedUsersRequest `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type RotateAccountCredentialsRequest_Password struct {
	Password *PasswordRequest `protobuf:"bytes,3,opt,name=password,proto3,oneof"`
}

type RotateAccountCredentialsRequest_Finalize struct {
	Finalize *FinalizeRequest `protobuf:"bytes,4,opt,name=finalize,proto3,oneof"`
}

func (*RotateAccountCredentialsRequest_Credential) isRotateAccountCredentialsRequest_Request() {}

func (*RotateAccountCredentialsRequest_User) isRotateAccountCredentialsRequest_Request() {}

func (*RotateAccountCredentialsRequest_Password) isRotateAccountCredentialsRequest_Request() {}

func (*RotateAccountCredentialsRequest_Finalize) isRotateAccountCredentialsRequest_Request() {}

// RotateAccountCredentialsResponse is the response to
// the RotateAccountCredentials RPC.
type RotateAccountCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RotateAccountCredentialsResponse_Credential
	//	*RotateAccountCredentialsResponse_User
	//	*RotateAccountCredentialsResponse_Password
	Response isRotateAccountCredentialsResponse_Response `protobuf_oneof:"response"`
}

func (x *RotateAccountCredentialsResponse) Reset() {
	*x = RotateAccountCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateAccountCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAccountCredentialsResponse) ProtoMessage() {}

func (x *RotateAccountCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAccountCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateAccountCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{1}
}

func (m *RotateAccountCredentialsResponse) GetResponse() isRotateAccountCredentialsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RotateAccountCredentialsResponse) GetCredential() *AuthorizedKeysResponse {
	if x, ok := x.GetResponse().(*RotateAccountCredentialsResponse_Credential); ok {
		return x.Credential
	}
	return nil
}

func (x *RotateAccountCredentialsResponse) GetUser() *AuthorizedUsersResponse {
	if x, ok := x.GetResponse().(*RotateAccountCredentialsResponse_User); ok {
		return x.User
	}
	return nil
}

func (x *RotateAccountCredentialsResponse) GetPassword() *PasswordResponse {
	if x, ok := x.GetResponse().(*RotateAccountCredentialsResponse_Password); ok {
		return x.Password
	}
	return nil
}

type isRotateAccountCredentialsResponse_Response interface {
	isRotateAccountCredentialsResponse_Response()
}

type RotateAccountCredentialsResponse_Credential struct {
	Credential *AuthorizedKeysResponse `protobuf:"bytes,1,opt,name=credential,proto3,oneof"`
}

type RotateAccountCredentialsResponse_User struct {
	User *AuthorizedUsersResponse `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type RotateAccountCredentialsResponse_Password struct {
	Password *PasswordResponse `protobuf:"bytes,3,opt,name=password,proto3,oneof"`
}

func (*RotateAccountCredentialsResponse_Credential) isRotateAccountCredentialsResponse_Response() {}

func (*RotateAccountCredentialsResponse_User) isRotateAccountCredentialsResponse_Response() {}

func (*RotateAccountCredentialsResponse_Password) isRotateAccountCredentialsResponse_Response() {}

type AuthorizedKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of credentials that are to be accepted on the SSH service on
	// the network element.
	// Multiple credentials MAY be specified to allow for multiple
	// system roles, or specific user restrictions to be described.
	Credentials []*AccountCredentials `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *AuthorizedKeysRequest) Reset() {
	*x = AuthorizedKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedKeysRequest) ProtoMessage() {}

func (x *AuthorizedKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedKeysRequest.ProtoReflect.Descriptor instead.
func (*AuthorizedKeysRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizedKeysRequest) GetCredentials() []*AccountCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//	*Option_Name
	//	*Option_Id
	Key   isOption_Key `protobuf_oneof:"key"`
	Value string       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{3}
}

func (m *Option) GetKey() isOption_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *Option) GetName() string {
	if x, ok := x.GetKey().(*Option_Name); ok {
		return x.Name
	}
	return ""
}

func (x *Option) GetId() Option_StandardOption {
	if x, ok := x.GetKey().(*Option_Id); ok {
		return x.Id
	}
	return Option_STANDARD_OPTION_UNSPECIFIED
}

func (x *Option) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type isOption_Key interface {
	isOption_Key()
}

type Option_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type Option_Id struct {
	Id Option_StandardOption `protobuf:"varint,2,opt,name=id,proto3,enum=gnsi.credentialz.Option_StandardOption,oneof"`
}

func (*Option_Name) isOption_Key() {}

func (*Option_Id) isOption_Key() {}

type AccountCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system role account name (e.g. root). This account must exist.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// `authorized_keys` specifies one or more SSH keys that is permitted for the
	// system role.
	AuthorizedKeys []*AccountCredentials_AuthorizedKey `protobuf:"bytes,2,rep,name=authorized_keys,json=authorizedKeys,proto3" json:"authorized_keys,omitempty"`
	// `version` contains versioning information that is controlled by
	// the credential manager and reported as-is by the telemetry reporting system
	// (ie, transparent to the device credential service).  Credential managers
	// should choose version strings as discrete as possible to ease alert
	// generation (eg, for credentials sourced from a bundle, the timestamp of
	// the bundle should be used but not the time when the credential is pushed to
	// a particular switch).  Also, such version strings should be persisted by
	// the devices onto non-volatile memory for preservation across system
	// reboots.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// `created_on` contains information when the credentials were created.
	// This information is controlled by the credential manager and reported as-is
	// by the telemetry reporting system (ie, transparent to the device credential
	// service).  Credential managers should use the timestamp of the moment when
	// credential was created, not the time when the credential is pushed to
	// a particular switch).
	// Also, this timestamp should be persisted by the devices onto non-volatile
	// memory for preservation across system reboots.
	// `created_on` is a timestamp: the number of seconds since
	// January 1st, 1970 00:00:00 GMT.
	CreatedOn uint64 `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *AccountCredentials) Reset() {
	*x = AccountCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCredentials) ProtoMessage() {}

func (x *AccountCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCredentials.ProtoReflect.Descriptor instead.
func (*AccountCredentials) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{4}
}

func (x *AccountCredentials) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountCredentials) GetAuthorizedKeys() []*AccountCredentials_AuthorizedKey {
	if x != nil {
		return x.AuthorizedKeys
	}
	return nil
}

func (x *AccountCredentials) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccountCredentials) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type AuthorizedKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorizedKeysResponse) Reset() {
	*x = AuthorizedKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedKeysResponse) ProtoMessage() {}

func (x *AuthorizedKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedKeysResponse.ProtoReflect.Descriptor instead.
func (*AuthorizedKeysResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{5}
}

type AuthorizedUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of policies that are to be applied on the SSH service on
	// the network element.
	// Multiple policies MAY be specified to allow for multiple
	// system roles, or specific user restrictions to be described.
	Policies []*UserPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *AuthorizedUsersRequest) Reset() {
	*x = AuthorizedUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedUsersRequest) ProtoMessage() {}

func (x *AuthorizedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedUsersRequest.ProtoReflect.Descriptor instead.
func (*AuthorizedUsersRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{6}
}

func (x *AuthorizedUsersRequest) GetPolicies() []*UserPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UserPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system role account name (e.g. root). This account must exist.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// List of authorized usernames for this system role as found in the SSH
	// certificate.
	AuthorizedUsers []*UserPolicy_SshAuthorizedUser `protobuf:"bytes,2,rep,name=authorized_users,json=authorizedUsers,proto3" json:"authorized_users,omitempty"`
	// `version` contains versioning information that is controlled by
	// the credential manager and reported as-is by the telemetry reporting system
	// (ie, transparent to the device credential service).  Credential managers
	// should choose version strings as discrete as possible to ease alert
	// generation (eg, for credentials sourced from a bundle, the timestamp of
	// the bundle should be used but not the time when the credential is pushed to
	// a particular switch).  Also, such version strings should be persisted by
	// the devices onto non-volatile memory for preservation across system
	// reboots.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// `created_on` contains information when the credentials were created.
	// This information is controlled by the credential manager and reported as-is
	// by the telemetry reporting system (ie, transparent to the device credential
	// service).  Credential managers should use the timestamp of the moment when
	// credential was created, not the time when the credential is pushed to
	// a particular switch).
	// Also, this timestamp should be persisted by the devices onto non-volatile
	// memory for preservation across system reboots.
	// `created_on` is a timestamp: the number of seconds since
	// January 1st, 1970 00:00:00 GMT.
	CreatedOn uint64 `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *UserPolicy) Reset() {
	*x = UserPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPolicy) ProtoMessage() {}

func (x *UserPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPolicy.ProtoReflect.Descriptor instead.
func (*UserPolicy) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{7}
}

func (x *UserPolicy) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserPolicy) GetAuthorizedUsers() []*UserPolicy_SshAuthorizedUser {
	if x != nil {
		return x.AuthorizedUsers
	}
	return nil
}

func (x *UserPolicy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserPolicy) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type AuthorizedUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorizedUsersResponse) Reset() {
	*x = AuthorizedUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedUsersResponse) ProtoMessage() {}

func (x *AuthorizedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedUsersResponse.ProtoReflect.Descriptor instead.
func (*AuthorizedUsersResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{8}
}

type PasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*PasswordRequest_Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *PasswordRequest) Reset() {
	*x = PasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest) ProtoMessage() {}

func (x *PasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest.ProtoReflect.Descriptor instead.
func (*PasswordRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordRequest) GetAccounts() []*PasswordRequest_Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type PasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasswordResponse) Reset() {
	*x = PasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResponse) ProtoMessage() {}

func (x *PasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResponse.ProtoReflect.Descriptor instead.
func (*PasswordResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{10}
}

type RotateHostCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RotateHostCredentialsRequest_SshCaPublicKey
	//	*RotateHostCredentialsRequest_ServerKeys
	//	*RotateHostCredentialsRequest_Finalize
	Request isRotateHostCredentialsRequest_Request `protobuf_oneof:"request"`
}

func (x *RotateHostCredentialsRequest) Reset() {
	*x = RotateHostCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateHostCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateHostCredentialsRequest) ProtoMessage() {}

func (x *RotateHostCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateHostCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateHostCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{11}
}

func (m *RotateHostCredentialsRequest) GetRequest() isRotateHostCredentialsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetSshCaPublicKey() *CaPublicKeyRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_SshCaPublicKey); ok {
		return x.SshCaPublicKey
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetServerKeys() *ServerKeysRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_ServerKeys); ok {
		return x.ServerKeys
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetFinalize() *FinalizeRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_Finalize); ok {
		return x.Finalize
	}
	return nil
}

type isRotateHostCredentialsRequest_Request interface {
	isRotateHostCredentialsRequest_Request()
}

type RotateHostCredentialsRequest_SshCaPublicKey struct {
	SshCaPublicKey *CaPublicKeyRequest `protobuf:"bytes,1,opt,name=ssh_ca_public_key,json=sshCaPublicKey,proto3,oneof"`
}

type RotateHostCredentialsRequest_ServerKeys struct {
	ServerKeys *ServerKeysRequest `protobuf:"bytes,2,opt,name=server_keys,json=serverKeys,proto3,oneof"`
}

type RotateHostCredentialsRequest_Finalize struct {
	Finalize *FinalizeRequest `protobuf:"bytes,3,opt,name=finalize,proto3,oneof"`
}

func (*RotateHostCredentialsRequest_SshCaPublicKey) isRotateHostCredentialsRequest_Request() {}

func (*RotateHostCredentialsRequest_ServerKeys) isRotateHostCredentialsRequest_Request() {}

func (*RotateHostCredentialsRequest_Finalize) isRotateHostCredentialsRequest_Request() {}

type RotateHostCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RotateHostCredentialsResponse_CaPublicKey
	//	*RotateHostCredentialsResponse_ServerKeys
	Response isRotateHostCredentialsResponse_Response `protobuf_oneof:"response"`
}

func (x *RotateHostCredentialsResponse) Reset() {
	*x = RotateHostCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateHostCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateHostCredentialsResponse) ProtoMessage() {}

func (x *RotateHostCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateHostCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateHostCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{12}
}

func (m *RotateHostCredentialsResponse) GetResponse() isRotateHostCredentialsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RotateHostCredentialsResponse) GetCaPublicKey() *CaPublicKeyResponse {
	if x, ok := x.GetResponse().(*RotateHostCredentialsResponse_CaPublicKey); ok {
		return x.CaPublicKey
	}
	return nil
}

func (x *RotateHostCredentialsResponse) GetServerKeys() *ServerKeysResponse {
	if x, ok := x.GetResponse().(*RotateHostCredentialsResponse_ServerKeys); ok {
		return x.ServerKeys
	}
	return nil
}

type isRotateHostCredentialsResponse_Response interface {
	isRotateHostCredentialsResponse_Response()
}

type RotateHostCredentialsResponse_CaPublicKey struct {
	CaPublicKey *CaPublicKeyResponse `protobuf:"bytes,1,opt,name=ca_public_key,json=caPublicKey,proto3,oneof"`
}

type RotateHostCredentialsResponse_ServerKeys struct {
	ServerKeys *ServerKeysResponse `protobuf:"bytes,2,opt,name=server_keys,json=serverKeys,proto3,oneof"`
}

func (*RotateHostCredentialsResponse_CaPublicKey) isRotateHostCredentialsResponse_Response() {}

func (*RotateHostCredentialsResponse_ServerKeys) isRotateHostCredentialsResponse_Response() {}

type CaPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Certificate Authority public keys to be used to verify certificates
	// presented by clients during connection establishment.
	// SSH-formatted.
	SshCaPublicKeys [][]byte `protobuf:"bytes,1,rep,name=ssh_ca_public_keys,json=sshCaPublicKeys,proto3" json:"ssh_ca_public_keys,omitempty"`
	// `version` contains versioning information that is controlled by
	// the credential manager and reported as-is by the telemetry reporting system
	// (ie, transparent to the device credential service).  Credential managers
	// should choose version strings as discrete as possible to ease alert
	// generation (eg, for credentials sourced from a bundle, the timestamp of
	// the bundle should be used but not the time when the credential is pushed to
	// a particular switch).  Also, such version strings should be persisted by
	// the devices onto non-volatile memory for preservation across system
	// reboots.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// `created_on` contains information when the credentials were created.
	// This information is controlled by the credential manager and reported as-is
	// by the telemetry reporting system (ie, transparent to the device credential
	// service).  Credential managers should use the timestamp of the moment when
	// credential was created, not the time when the credential is pushed to
	// a particular switch).
	// Also, this timestamp should be persisted by the devices onto non-volatile
	// memory for preservation across system reboots.
	// `created_on` is a timestamp: the number of seconds since
	// January 1st, 1970 00:00:00 GMT.
	CreatedOn uint64 `protobuf:"varint,3,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *CaPublicKeyRequest) Reset() {
	*x = CaPublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaPublicKeyRequest) ProtoMessage() {}

func (x *CaPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*CaPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{13}
}

func (x *CaPublicKeyRequest) GetSshCaPublicKeys() [][]byte {
	if x != nil {
		return x.SshCaPublicKeys
	}
	return nil
}

func (x *CaPublicKeyRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CaPublicKeyRequest) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type CaPublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaPublicKeyResponse) Reset() {
	*x = CaPublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaPublicKeyResponse) ProtoMessage() {}

func (x *CaPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*CaPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{14}
}

type ServerKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key to be used by the SSH server.
	// SSH-formatted.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Private key to be used by the SSH server.
	// SSH-formatted.
	PrivateKey []byte `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// SSH Certificate (server's public key signed by the Certificate Authority)
	// to be used by the SSH server.
	// SSH-formatted.
	Certificate []byte `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// `version` contains versioning information that is controlled by
	// the credential manager and reported as-is by the telemetry reporting system
	// (ie, transparent to the device credential service).  Credential managers
	// should choose version strings as discrete as possible to ease alert
	// generation (eg, for credentials sourced from a bundle, the timestamp of
	// the bundle should be used but not the time when the credential is pushed to
	// a particular switch).  Also, such version strings should be persisted by
	// the devices onto non-volatile memory for preservation across system
	// reboots.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// `created_on` contains information when the credentials were created.
	// This information is controlled by the credential manager and reported as-is
	// by the telemetry reporting system (ie, transparent to the device credential
	// service).  Credential managers should use the timestamp of the moment when
	// credential was created, not the time when the credential is pushed to
	// a particular switch).
	// Also, this timestamp should be persisted by the devices onto non-volatile
	// memory for preservation across system reboots.
	// `created_on` is a timestamp: the number of seconds since
	// January 1st, 1970 00:00:00 GMT.
	CreatedOn uint64 `protobuf:"varint,5,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *ServerKeysRequest) Reset() {
	*x = ServerKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerKeysRequest) ProtoMessage() {}

func (x *ServerKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerKeysRequest.ProtoReflect.Descriptor instead.
func (*ServerKeysRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{15}
}

func (x *ServerKeysRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ServerKeysRequest) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *ServerKeysRequest) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *ServerKeysRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerKeysRequest) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type ServerKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerKeysResponse) Reset() {
	*x = ServerKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerKeysResponse) ProtoMessage() {}

func (x *ServerKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerKeysResponse.ProtoReflect.Descriptor instead.
func (*ServerKeysResponse) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{16}
}

type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{17}
}

type AccountCredentials_AuthorizedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedKey []byte `protobuf:"bytes,1,opt,name=authorized_key,json=authorizedKey,proto3" json:"authorized_key,omitempty"`
	// Options specified for this authorized key.
	Options []*Option `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	// Encyption mode
	KeyType AccountCredentials_KeyType `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=gnsi.credentialz.AccountCredentials_KeyType" json:"key_type,omitempty"`
	Account string                     `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountCredentials_AuthorizedKey) Reset() {
	*x = AccountCredentials_AuthorizedKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCredentials_AuthorizedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCredentials_AuthorizedKey) ProtoMessage() {}

func (x *AccountCredentials_AuthorizedKey) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCredentials_AuthorizedKey.ProtoReflect.Descriptor instead.
func (*AccountCredentials_AuthorizedKey) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AccountCredentials_AuthorizedKey) GetAuthorizedKey() []byte {
	if x != nil {
		return x.AuthorizedKey
	}
	return nil
}

func (x *AccountCredentials_AuthorizedKey) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AccountCredentials_AuthorizedKey) GetKeyType() AccountCredentials_KeyType {
	if x != nil {
		return x.KeyType
	}
	return AccountCredentials_KEYTYPE_UNKNOWN
}

func (x *AccountCredentials_AuthorizedKey) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type UserPolicy_SshAuthorizedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedUser string `protobuf:"bytes,1,opt,name=authorized_user,json=authorizedUser,proto3" json:"authorized_user,omitempty"`
	// Options specified for this authorized user.
	Options []*Option `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *UserPolicy_SshAuthorizedUser) Reset() {
	*x = UserPolicy_SshAuthorizedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPolicy_SshAuthorizedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPolicy_SshAuthorizedUser) ProtoMessage() {}

func (x *UserPolicy_SshAuthorizedUser) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPolicy_SshAuthorizedUser.ProtoReflect.Descriptor instead.
func (*UserPolicy_SshAuthorizedUser) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UserPolicy_SshAuthorizedUser) GetAuthorizedUser() string {
	if x != nil {
		return x.AuthorizedUser
	}
	return ""
}

func (x *UserPolicy_SshAuthorizedUser) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type PasswordRequest_Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*PasswordRequest_Password_Plaintext
	//	*PasswordRequest_Password_Encrypted
	Value isPasswordRequest_Password_Value `protobuf_oneof:"value"`
}

func (x *PasswordRequest_Password) Reset() {
	*x = PasswordRequest_Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest_Password) ProtoMessage() {}

func (x *PasswordRequest_Password) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest_Password.ProtoReflect.Descriptor instead.
func (*PasswordRequest_Password) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{9, 0}
}

func (m *PasswordRequest_Password) GetValue() isPasswordRequest_Password_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PasswordRequest_Password) GetPlaintext() string {
	if x, ok := x.GetValue().(*PasswordRequest_Password_Plaintext); ok {
		return x.Plaintext
	}
	return ""
}

func (x *PasswordRequest_Password) GetEncrypted() string {
	if x, ok := x.GetValue().(*PasswordRequest_Password_Encrypted); ok {
		return x.Encrypted
	}
	return ""
}

type isPasswordRequest_Password_Value interface {
	isPasswordRequest_Password_Value()
}

type PasswordRequest_Password_Plaintext struct {
	Plaintext string `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type PasswordRequest_Password_Encrypted struct {
	Encrypted string `protobuf:"bytes,2,opt,name=encrypted,proto3,oneof"`
}

func (*PasswordRequest_Password_Plaintext) isPasswordRequest_Password_Value() {}

func (*PasswordRequest_Password_Encrypted) isPasswordRequest_Password_Value() {}

type PasswordRequest_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system role account name (e.g. root). This account must exist.
	Account  string                    `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password *PasswordRequest_Password `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// `version` contains versioning information that is controlled by
	// the credential manager and reported as-is by the telemetry reporting
	// system (ie, transparent to the device credential service).  Credential
	// managers should choose version strings as discrete as possible to ease
	// alert generation (eg, for credentials sourced from a bundle,
	// the timestamp of the bundle should be used but not the time when
	// the credential is pushed to a particular switch).  Also, such version
	// strings should be persisted by the devices onto non-volatile memory for
	// preservation across system reboots.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// `created_on` contains information when the credentials were created.
	// This information is controlled by the credential manager and reported
	// as-is by the telemetry reporting system (ie, transparent to the device
	// credential service).  Credential managers should use the timestamp of
	// the moment when credential was created, not the time when the credential
	// is pushed to a particular switch).
	// Also, this timestamp should be persisted by the devices onto non-volatile
	// memory for preservation across system reboots.
	// `created_on` is a timestamp: the number of seconds since
	// January 1st, 1970 00:00:00 GMT.
	CreatedOn uint64 `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *PasswordRequest_Account) Reset() {
	*x = PasswordRequest_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentialz_credentialz_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest_Account) ProtoMessage() {}

func (x *PasswordRequest_Account) ProtoReflect() protoreflect.Message {
	mi := &file_credentialz_credentialz_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest_Account.ProtoReflect.Descriptor instead.
func (*PasswordRequest_Account) Descriptor() ([]byte, []int) {
	return file_credentialz_credentialz_proto_rawDescGZIP(), []int{9, 1}
}

func (x *PasswordRequest_Account) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PasswordRequest_Account) GetPassword() *PasswordRequest_Password {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *PasswordRequest_Account) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PasswordRequest_Account) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

var File_credentialz_credentialz_proto protoreflect.FileDescriptor

var file_credentialz_credentialz_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x7a, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb9, 0x02, 0x0a, 0x1f, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3e,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x3f, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x20,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x7a, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x87, 0x07, 0x0a,
	0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e,
	0x06, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x54, 0x59, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x43, 0x10,
	0x0a, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x58, 0x31, 0x31, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x54, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x53, 0x10, 0x0f, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x54, 0x59, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x54,
	0x4f, 0x55, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x14, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x43, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x58,
	0x31, 0x31, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x42,
	0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xed, 0x03, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x1a, 0xcd, 0x01,
	0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x53, 0x41, 0x10, 0x03, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x6e, 0x1a, 0x70, 0x0a, 0x11, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x7a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4,
	0x02, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x53, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa4,
	0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x1c, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x73,
	0x68, 0x5f, 0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x43, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x73, 0x68, 0x43, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x43, 0x61,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x43, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x73,
	0x73, 0x68, 0x5f, 0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x73, 0x68, 0x43, 0x61, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x6e, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x11, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x95, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x7a, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x31, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x15, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x7a, 0xd2, 0x3e, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credentialz_credentialz_proto_rawDescOnce sync.Once
	file_credentialz_credentialz_proto_rawDescData = file_credentialz_credentialz_proto_rawDesc
)

func file_credentialz_credentialz_proto_rawDescGZIP() []byte {
	file_credentialz_credentialz_proto_rawDescOnce.Do(func() {
		file_credentialz_credentialz_proto_rawDescData = protoimpl.X.CompressGZIP(file_credentialz_credentialz_proto_rawDescData)
	})
	return file_credentialz_credentialz_proto_rawDescData
}

var file_credentialz_credentialz_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_credentialz_credentialz_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_credentialz_credentialz_proto_goTypes = []interface{}{
	(Option_StandardOption)(0),               // 0: gnsi.credentialz.Option.StandardOption
	(AccountCredentials_KeyType)(0),          // 1: gnsi.credentialz.AccountCredentials.KeyType
	(*RotateAccountCredentialsRequest)(nil),  // 2: gnsi.credentialz.RotateAccountCredentialsRequest
	(*RotateAccountCredentialsResponse)(nil), // 3: gnsi.credentialz.RotateAccountCredentialsResponse
	(*AuthorizedKeysRequest)(nil),            // 4: gnsi.credentialz.AuthorizedKeysRequest
	(*Option)(nil),                           // 5: gnsi.credentialz.Option
	(*AccountCredentials)(nil),               // 6: gnsi.credentialz.AccountCredentials
	(*AuthorizedKeysResponse)(nil),           // 7: gnsi.credentialz.AuthorizedKeysResponse
	(*AuthorizedUsersRequest)(nil),           // 8: gnsi.credentialz.AuthorizedUsersRequest
	(*UserPolicy)(nil),                       // 9: gnsi.credentialz.UserPolicy
	(*AuthorizedUsersResponse)(nil),          // 10: gnsi.credentialz.AuthorizedUsersResponse
	(*PasswordRequest)(nil),                  // 11: gnsi.credentialz.PasswordRequest
	(*PasswordResponse)(nil),                 // 12: gnsi.credentialz.PasswordResponse
	(*RotateHostCredentialsRequest)(nil),     // 13: gnsi.credentialz.RotateHostCredentialsRequest
	(*RotateHostCredentialsResponse)(nil),    // 14: gnsi.credentialz.RotateHostCredentialsResponse
	(*CaPublicKeyRequest)(nil),               // 15: gnsi.credentialz.CaPublicKeyRequest
	(*CaPublicKeyResponse)(nil),              // 16: gnsi.credentialz.CaPublicKeyResponse
	(*ServerKeysRequest)(nil),                // 17: gnsi.credentialz.ServerKeysRequest
	(*ServerKeysResponse)(nil),               // 18: gnsi.credentialz.ServerKeysResponse
	(*FinalizeRequest)(nil),                  // 19: gnsi.credentialz.FinalizeRequest
	(*AccountCredentials_AuthorizedKey)(nil), // 20: gnsi.credentialz.AccountCredentials.AuthorizedKey
	(*UserPolicy_SshAuthorizedUser)(nil),     // 21: gnsi.credentialz.UserPolicy.SshAuthorizedUser
	(*PasswordRequest_Password)(nil),         // 22: gnsi.credentialz.PasswordRequest.Password
	(*PasswordRequest_Account)(nil),          // 23: gnsi.credentialz.PasswordRequest.Account
}
var file_credentialz_credentialz_proto_depIdxs = []int32{
	4,  // 0: gnsi.credentialz.RotateAccountCredentialsRequest.credential:type_name -> gnsi.credentialz.AuthorizedKeysRequest
	8,  // 1: gnsi.credentialz.RotateAccountCredentialsRequest.user:type_name -> gnsi.credentialz.AuthorizedUsersRequest
	11, // 2: gnsi.credentialz.RotateAccountCredentialsRequest.password:type_name -> gnsi.credentialz.PasswordRequest
	19, // 3: gnsi.credentialz.RotateAccountCredentialsRequest.finalize:type_name -> gnsi.credentialz.FinalizeRequest
	7,  // 4: gnsi.credentialz.RotateAccountCredentialsResponse.credential:type_name -> gnsi.credentialz.AuthorizedKeysResponse
	10, // 5: gnsi.credentialz.RotateAccountCredentialsResponse.user:type_name -> gnsi.credentialz.AuthorizedUsersResponse
	12, // 6: gnsi.credentialz.RotateAccountCredentialsResponse.password:type_name -> gnsi.credentialz.PasswordResponse
	6,  // 7: gnsi.credentialz.AuthorizedKeysRequest.credentials:type_name -> gnsi.credentialz.AccountCredentials
	0,  // 8: gnsi.credentialz.Option.id:type_name -> gnsi.credentialz.Option.StandardOption
	20, // 9: gnsi.credentialz.AccountCredentials.authorized_keys:type_name -> gnsi.credentialz.AccountCredentials.AuthorizedKey
	9,  // 10: gnsi.credentialz.AuthorizedUsersRequest.policies:type_name -> gnsi.credentialz.UserPolicy
	21, // 11: gnsi.credentialz.UserPolicy.authorized_users:type_name -> gnsi.credentialz.UserPolicy.SshAuthorizedUser
	23, // 12: gnsi.credentialz.PasswordRequest.accounts:type_name -> gnsi.credentialz.PasswordRequest.Account
	15, // 13: gnsi.credentialz.RotateHostCredentialsRequest.ssh_ca_public_key:type_name -> gnsi.credentialz.CaPublicKeyRequest
	17, // 14: gnsi.credentialz.RotateHostCredentialsRequest.server_keys:type_name -> gnsi.credentialz.ServerKeysRequest
	19, // 15: gnsi.credentialz.RotateHostCredentialsRequest.finalize:type_name -> gnsi.credentialz.FinalizeRequest
	16, // 16: gnsi.credentialz.RotateHostCredentialsResponse.ca_public_key:type_name -> gnsi.credentialz.CaPublicKeyResponse
	18, // 17: gnsi.credentialz.RotateHostCredentialsResponse.server_keys:type_name -> gnsi.credentialz.ServerKeysResponse
	5,  // 18: gnsi.credentialz.AccountCredentials.AuthorizedKey.options:type_name -> gnsi.credentialz.Option
	1,  // 19: gnsi.credentialz.AccountCredentials.AuthorizedKey.key_type:type_name -> gnsi.credentialz.AccountCredentials.KeyType
	5,  // 20: gnsi.credentialz.UserPolicy.SshAuthorizedUser.options:type_name -> gnsi.credentialz.Option
	22, // 21: gnsi.credentialz.PasswordRequest.Account.password:type_name -> gnsi.credentialz.PasswordRequest.Password
	2,  // 22: gnsi.credentialz.Credentialz.RotateAccountCredentials:input_type -> gnsi.credentialz.RotateAccountCredentialsRequest
	13, // 23: gnsi.credentialz.Credentialz.RotateHostCredentials:input_type -> gnsi.credentialz.RotateHostCredentialsRequest
	3,  // 24: gnsi.credentialz.Credentialz.RotateAccountCredentials:output_type -> gnsi.credentialz.RotateAccountCredentialsResponse
	14, // 25: gnsi.credentialz.Credentialz.RotateHostCredentials:output_type -> gnsi.credentialz.RotateHostCredentialsResponse
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_credentialz_credentialz_proto_init() }
func file_credentialz_credentialz_proto_init() {
	if File_credentialz_credentialz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_credentialz_credentialz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateAccountCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateAccountCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateHostCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateHostCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaPublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaPublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCredentials_AuthorizedKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPolicy_SshAuthorizedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest_Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentialz_credentialz_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_credentialz_credentialz_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RotateAccountCredentialsRequest_Credential)(nil),
		(*RotateAccountCredentialsRequest_User)(nil),
		(*RotateAccountCredentialsRequest_Password)(nil),
		(*RotateAccountCredentialsRequest_Finalize)(nil),
	}
	file_credentialz_credentialz_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RotateAccountCredentialsResponse_Credential)(nil),
		(*RotateAccountCredentialsResponse_User)(nil),
		(*RotateAccountCredentialsResponse_Password)(nil),
	}
	file_credentialz_credentialz_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Option_Name)(nil),
		(*Option_Id)(nil),
	}
	file_credentialz_credentialz_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RotateHostCredentialsRequest_SshCaPublicKey)(nil),
		(*RotateHostCredentialsRequest_ServerKeys)(nil),
		(*RotateHostCredentialsRequest_Finalize)(nil),
	}
	file_credentialz_credentialz_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RotateHostCredentialsResponse_CaPublicKey)(nil),
		(*RotateHostCredentialsResponse_ServerKeys)(nil),
	}
	file_credentialz_credentialz_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*PasswordRequest_Password_Plaintext)(nil),
		(*PasswordRequest_Password_Encrypted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credentialz_credentialz_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_credentialz_credentialz_proto_goTypes,
		DependencyIndexes: file_credentialz_credentialz_proto_depIdxs,
		EnumInfos:         file_credentialz_credentialz_proto_enumTypes,
		MessageInfos:      file_credentialz_credentialz_proto_msgTypes,
	}.Build()
	File_credentialz_credentialz_proto = out.File
	file_credentialz_credentialz_proto_rawDesc = nil
	file_credentialz_credentialz_proto_goTypes = nil
	file_credentialz_credentialz_proto_depIdxs = nil
}
