// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: github.com/openconfig/gnsi/credentialz/credentialz.proto

package credentialz

import (
	_ "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType int32

const (
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	KeyType_KEY_TYPE_ECDSA_P_256 KeyType = 1
	KeyType_KEY_TYPE_ECDSA_P_521 KeyType = 2
	KeyType_KEY_TYPE_ED25519     KeyType = 3
	KeyType_KEY_TYPE_RSA         KeyType = 4
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "KEY_TYPE_ECDSA_P_256",
		2: "KEY_TYPE_ECDSA_P_521",
		3: "KEY_TYPE_ED25519",
		4: "KEY_TYPE_RSA",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED": 0,
		"KEY_TYPE_ECDSA_P_256": 1,
		"KEY_TYPE_ECDSA_P_521": 2,
		"KEY_TYPE_ED25519":     3,
		"KEY_TYPE_RSA":         4,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{0}
}

type KeyGen int32

const (
	KeyGen_KEY_GEN_SSH_KEY_UNSPECIFIED        KeyGen = 0
	KeyGen_KEY_GEN_SSH_KEY_TYPE_RSA_2048      KeyGen = 1
	KeyGen_KEY_GEN_SSH_KEY_TYPE_ECDSA_P_256   KeyGen = 2
	KeyGen_KEY_GEN_SSH_KEY_TYPE_ECDSA_P_521   KeyGen = 3
	KeyGen_KEY_GEN_SSH_KEY_TYPE_EDDSA_ED25519 KeyGen = 4
)

// Enum value maps for KeyGen.
var (
	KeyGen_name = map[int32]string{
		0: "KEY_GEN_SSH_KEY_UNSPECIFIED",
		1: "KEY_GEN_SSH_KEY_TYPE_RSA_2048",
		2: "KEY_GEN_SSH_KEY_TYPE_ECDSA_P_256",
		3: "KEY_GEN_SSH_KEY_TYPE_ECDSA_P_521",
		4: "KEY_GEN_SSH_KEY_TYPE_EDDSA_ED25519",
	}
	KeyGen_value = map[string]int32{
		"KEY_GEN_SSH_KEY_UNSPECIFIED":        0,
		"KEY_GEN_SSH_KEY_TYPE_RSA_2048":      1,
		"KEY_GEN_SSH_KEY_TYPE_ECDSA_P_256":   2,
		"KEY_GEN_SSH_KEY_TYPE_ECDSA_P_521":   3,
		"KEY_GEN_SSH_KEY_TYPE_EDDSA_ED25519": 4,
	}
)

func (x KeyGen) Enum() *KeyGen {
	p := new(KeyGen)
	*p = x
	return p
}

func (x KeyGen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyGen) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[1].Descriptor()
}

func (KeyGen) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[1]
}

func (x KeyGen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyGen.Descriptor instead.
func (KeyGen) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{1}
}

type Option_StandardOption int32

const (
	Option_STANDARD_OPTION_UNSPECIFIED         Option_StandardOption = 0
	Option_STANDARD_OPTION_AGENT_FORWARDING    Option_StandardOption = 1
	Option_STANDARD_OPTION_CERT_ATHORITY       Option_StandardOption = 2
	Option_STANDARD_OPTION_COMMAND             Option_StandardOption = 3
	Option_STANDARD_OPTION_ENVIRONMENT         Option_StandardOption = 4
	Option_STANDARD_OPTION_EXPIRY_TIME         Option_StandardOption = 5
	Option_STANDARD_OPTION_FROM                Option_StandardOption = 6
	Option_STANDARD_OPTION_NO_AGENT_FORWARDING Option_StandardOption = 7
	Option_STANDARD_OPTION_NO_PORT_FORWARDING  Option_StandardOption = 8
	Option_STANDARD_OPTION_NO_PTY              Option_StandardOption = 9
	Option_STANDARD_OPTION_NO_USER_RC          Option_StandardOption = 10
	Option_STANDARD_OPTION_NO_X11_FORWARDING   Option_StandardOption = 11
	Option_STANDARD_OPTION_PERMITLISTEN        Option_StandardOption = 12
	Option_STANDARD_OPTION_PERMITOPEN          Option_StandardOption = 13
	Option_STANDARD_OPTION_PORT_FORWARDING     Option_StandardOption = 14
	Option_STANDARD_OPTION_PRINCIPALS          Option_StandardOption = 15
	Option_STANDARD_OPTION_PTY                 Option_StandardOption = 16
	Option_STANDARD_OPTION_NO_TOUCH_REQUIRED   Option_StandardOption = 17
	Option_STANDARD_OPTION_VERIFY_REQUIRED     Option_StandardOption = 18
	Option_STANDARD_OPTION_RESTRICT            Option_StandardOption = 19
	Option_STANDARD_OPTION_TUNNEL              Option_StandardOption = 20
	Option_STANDARD_OPTION_USER_RC             Option_StandardOption = 21
	Option_STANDARD_OPTION_X11_FORWARDING      Option_StandardOption = 22
)

// Enum value maps for Option_StandardOption.
var (
	Option_StandardOption_name = map[int32]string{
		0:  "STANDARD_OPTION_UNSPECIFIED",
		1:  "STANDARD_OPTION_AGENT_FORWARDING",
		2:  "STANDARD_OPTION_CERT_ATHORITY",
		3:  "STANDARD_OPTION_COMMAND",
		4:  "STANDARD_OPTION_ENVIRONMENT",
		5:  "STANDARD_OPTION_EXPIRY_TIME",
		6:  "STANDARD_OPTION_FROM",
		7:  "STANDARD_OPTION_NO_AGENT_FORWARDING",
		8:  "STANDARD_OPTION_NO_PORT_FORWARDING",
		9:  "STANDARD_OPTION_NO_PTY",
		10: "STANDARD_OPTION_NO_USER_RC",
		11: "STANDARD_OPTION_NO_X11_FORWARDING",
		12: "STANDARD_OPTION_PERMITLISTEN",
		13: "STANDARD_OPTION_PERMITOPEN",
		14: "STANDARD_OPTION_PORT_FORWARDING",
		15: "STANDARD_OPTION_PRINCIPALS",
		16: "STANDARD_OPTION_PTY",
		17: "STANDARD_OPTION_NO_TOUCH_REQUIRED",
		18: "STANDARD_OPTION_VERIFY_REQUIRED",
		19: "STANDARD_OPTION_RESTRICT",
		20: "STANDARD_OPTION_TUNNEL",
		21: "STANDARD_OPTION_USER_RC",
		22: "STANDARD_OPTION_X11_FORWARDING",
	}
	Option_StandardOption_value = map[string]int32{
		"STANDARD_OPTION_UNSPECIFIED":         0,
		"STANDARD_OPTION_AGENT_FORWARDING":    1,
		"STANDARD_OPTION_CERT_ATHORITY":       2,
		"STANDARD_OPTION_COMMAND":             3,
		"STANDARD_OPTION_ENVIRONMENT":         4,
		"STANDARD_OPTION_EXPIRY_TIME":         5,
		"STANDARD_OPTION_FROM":                6,
		"STANDARD_OPTION_NO_AGENT_FORWARDING": 7,
		"STANDARD_OPTION_NO_PORT_FORWARDING":  8,
		"STANDARD_OPTION_NO_PTY":              9,
		"STANDARD_OPTION_NO_USER_RC":          10,
		"STANDARD_OPTION_NO_X11_FORWARDING":   11,
		"STANDARD_OPTION_PERMITLISTEN":        12,
		"STANDARD_OPTION_PERMITOPEN":          13,
		"STANDARD_OPTION_PORT_FORWARDING":     14,
		"STANDARD_OPTION_PRINCIPALS":          15,
		"STANDARD_OPTION_PTY":                 16,
		"STANDARD_OPTION_NO_TOUCH_REQUIRED":   17,
		"STANDARD_OPTION_VERIFY_REQUIRED":     18,
		"STANDARD_OPTION_RESTRICT":            19,
		"STANDARD_OPTION_TUNNEL":              20,
		"STANDARD_OPTION_USER_RC":             21,
		"STANDARD_OPTION_X11_FORWARDING":      22,
	}
)

func (x Option_StandardOption) Enum() *Option_StandardOption {
	p := new(Option_StandardOption)
	*p = x
	return p
}

func (x Option_StandardOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Option_StandardOption) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[2].Descriptor()
}

func (Option_StandardOption) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[2]
}

func (x Option_StandardOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Option_StandardOption.Descriptor instead.
func (Option_StandardOption) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{3, 0}
}

type UserPolicy_AuthorizedPrincipalCheck_Tool int32

const (
	UserPolicy_AuthorizedPrincipalCheck_TOOL_UNSPECIFIED UserPolicy_AuthorizedPrincipalCheck_Tool = 0
	UserPolicy_AuthorizedPrincipalCheck_TOOL_HIBA        UserPolicy_AuthorizedPrincipalCheck_Tool = 1
)

// Enum value maps for UserPolicy_AuthorizedPrincipalCheck_Tool.
var (
	UserPolicy_AuthorizedPrincipalCheck_Tool_name = map[int32]string{
		0: "TOOL_UNSPECIFIED",
		1: "TOOL_HIBA",
	}
	UserPolicy_AuthorizedPrincipalCheck_Tool_value = map[string]int32{
		"TOOL_UNSPECIFIED": 0,
		"TOOL_HIBA":        1,
	}
)

func (x UserPolicy_AuthorizedPrincipalCheck_Tool) Enum() *UserPolicy_AuthorizedPrincipalCheck_Tool {
	p := new(UserPolicy_AuthorizedPrincipalCheck_Tool)
	*p = x
	return p
}

func (x UserPolicy_AuthorizedPrincipalCheck_Tool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPolicy_AuthorizedPrincipalCheck_Tool) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[3].Descriptor()
}

func (UserPolicy_AuthorizedPrincipalCheck_Tool) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[3]
}

func (x UserPolicy_AuthorizedPrincipalCheck_Tool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPolicy_AuthorizedPrincipalCheck_Tool.Descriptor instead.
func (UserPolicy_AuthorizedPrincipalCheck_Tool) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{7, 2, 0}
}

type PasswordRequest_CryptoHash_HashType int32

const (
	PasswordRequest_CryptoHash_HASH_TYPE_UNSPECIFIED     PasswordRequest_CryptoHash_HashType = 0
	PasswordRequest_CryptoHash_HASH_TYPE_CRYPT_MD5       PasswordRequest_CryptoHash_HashType = 1
	PasswordRequest_CryptoHash_HASH_TYPE_CRYPT_SHA_2_512 PasswordRequest_CryptoHash_HashType = 2
)

// Enum value maps for PasswordRequest_CryptoHash_HashType.
var (
	PasswordRequest_CryptoHash_HashType_name = map[int32]string{
		0: "HASH_TYPE_UNSPECIFIED",
		1: "HASH_TYPE_CRYPT_MD5",
		2: "HASH_TYPE_CRYPT_SHA_2_512",
	}
	PasswordRequest_CryptoHash_HashType_value = map[string]int32{
		"HASH_TYPE_UNSPECIFIED":     0,
		"HASH_TYPE_CRYPT_MD5":       1,
		"HASH_TYPE_CRYPT_SHA_2_512": 2,
	}
)

func (x PasswordRequest_CryptoHash_HashType) Enum() *PasswordRequest_CryptoHash_HashType {
	p := new(PasswordRequest_CryptoHash_HashType)
	*p = x
	return p
}

func (x PasswordRequest_CryptoHash_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordRequest_CryptoHash_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[4].Descriptor()
}

func (PasswordRequest_CryptoHash_HashType) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes[4]
}

func (x PasswordRequest_CryptoHash_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordRequest_CryptoHash_HashType.Descriptor instead.
func (PasswordRequest_CryptoHash_HashType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{9, 0, 0}
}

type RotateAccountCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RotateAccountCredentialsRequest_Credential
	//	*RotateAccountCredentialsRequest_User
	//	*RotateAccountCredentialsRequest_Password
	//	*RotateAccountCredentialsRequest_Finalize
	Request isRotateAccountCredentialsRequest_Request `protobuf_oneof:"request"`
}

func (x *RotateAccountCredentialsRequest) Reset() {
	*x = RotateAccountCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateAccountCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAccountCredentialsRequest) ProtoMessage() {}

func (x *RotateAccountCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAccountCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateAccountCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{0}
}

func (m *RotateAccountCredentialsRequest) GetRequest() isRotateAccountCredentialsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetCredential() *AuthorizedKeysRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_Credential); ok {
		return x.Credential
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetUser() *AuthorizedUsersRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_User); ok {
		return x.User
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetPassword() *PasswordRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_Password); ok {
		return x.Password
	}
	return nil
}

func (x *RotateAccountCredentialsRequest) GetFinalize() *FinalizeRequest {
	if x, ok := x.GetRequest().(*RotateAccountCredentialsRequest_Finalize); ok {
		return x.Finalize
	}
	return nil
}

type isRotateAccountCredentialsRequest_Request interface {
	isRotateAccountCredentialsRequest_Request()
}

type RotateAccountCredentialsRequest_Credential struct {
	Credential *AuthorizedKeysRequest `protobuf:"bytes,1,opt,name=credential,proto3,oneof"`
}

type RotateAccountCredentialsRequest_User struct {
	User *AuthorizedUsersRequest `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type RotateAccountCredentialsRequest_Password struct {
	Password *PasswordRequest `protobuf:"bytes,3,opt,name=password,proto3,oneof"`
}

type RotateAccountCredentialsRequest_Finalize struct {
	Finalize *FinalizeRequest `protobuf:"bytes,4,opt,name=finalize,proto3,oneof"`
}

func (*RotateAccountCredentialsRequest_Credential) isRotateAccountCredentialsRequest_Request() {}

func (*RotateAccountCredentialsRequest_User) isRotateAccountCredentialsRequest_Request() {}

func (*RotateAccountCredentialsRequest_Password) isRotateAccountCredentialsRequest_Request() {}

func (*RotateAccountCredentialsRequest_Finalize) isRotateAccountCredentialsRequest_Request() {}

type RotateAccountCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RotateAccountCredentialsResponse_Credential
	//	*RotateAccountCredentialsResponse_User
	//	*RotateAccountCredentialsResponse_Password
	Response isRotateAccountCredentialsResponse_Response `protobuf_oneof:"response"`
}

func (x *RotateAccountCredentialsResponse) Reset() {
	*x = RotateAccountCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateAccountCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAccountCredentialsResponse) ProtoMessage() {}

func (x *RotateAccountCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAccountCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateAccountCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{1}
}

func (m *RotateAccountCredentialsResponse) GetResponse() isRotateAccountCredentialsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RotateAccountCredentialsResponse) GetCredential() *AuthorizedKeysResponse {
	if x, ok := x.GetResponse().(*RotateAccountCredentialsResponse_Credential); ok {
		return x.Credential
	}
	return nil
}

func (x *RotateAccountCredentialsResponse) GetUser() *AuthorizedUsersResponse {
	if x, ok := x.GetResponse().(*RotateAccountCredentialsResponse_User); ok {
		return x.User
	}
	return nil
}

func (x *RotateAccountCredentialsResponse) GetPassword() *PasswordResponse {
	if x, ok := x.GetResponse().(*RotateAccountCredentialsResponse_Password); ok {
		return x.Password
	}
	return nil
}

type isRotateAccountCredentialsResponse_Response interface {
	isRotateAccountCredentialsResponse_Response()
}

type RotateAccountCredentialsResponse_Credential struct {
	Credential *AuthorizedKeysResponse `protobuf:"bytes,1,opt,name=credential,proto3,oneof"`
}

type RotateAccountCredentialsResponse_User struct {
	User *AuthorizedUsersResponse `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type RotateAccountCredentialsResponse_Password struct {
	Password *PasswordResponse `protobuf:"bytes,3,opt,name=password,proto3,oneof"`
}

func (*RotateAccountCredentialsResponse_Credential) isRotateAccountCredentialsResponse_Response() {}

func (*RotateAccountCredentialsResponse_User) isRotateAccountCredentialsResponse_Response() {}

func (*RotateAccountCredentialsResponse_Password) isRotateAccountCredentialsResponse_Response() {}

type AuthorizedKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*AccountCredentials `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *AuthorizedKeysRequest) Reset() {
	*x = AuthorizedKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedKeysRequest) ProtoMessage() {}

func (x *AuthorizedKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedKeysRequest.ProtoReflect.Descriptor instead.
func (*AuthorizedKeysRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{2}
}

func (x *AuthorizedKeysRequest) GetCredentials() []*AccountCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//	*Option_Name
	//	*Option_Id
	Key   isOption_Key `protobuf_oneof:"key"`
	Value string       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{3}
}

func (m *Option) GetKey() isOption_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *Option) GetName() string {
	if x, ok := x.GetKey().(*Option_Name); ok {
		return x.Name
	}
	return ""
}

func (x *Option) GetId() Option_StandardOption {
	if x, ok := x.GetKey().(*Option_Id); ok {
		return x.Id
	}
	return Option_STANDARD_OPTION_UNSPECIFIED
}

func (x *Option) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type isOption_Key interface {
	isOption_Key()
}

type Option_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type Option_Id struct {
	Id Option_StandardOption `protobuf:"varint,2,opt,name=id,proto3,enum=gnsi.credentialz.Option_StandardOption,oneof"`
}

func (*Option_Name) isOption_Key() {}

func (*Option_Id) isOption_Key() {}

type AccountCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        string                              `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	AuthorizedKeys []*AccountCredentials_AuthorizedKey `protobuf:"bytes,2,rep,name=authorized_keys,json=authorizedKeys,proto3" json:"authorized_keys,omitempty"`
	Version        string                              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn      uint64                              `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *AccountCredentials) Reset() {
	*x = AccountCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCredentials) ProtoMessage() {}

func (x *AccountCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCredentials.ProtoReflect.Descriptor instead.
func (*AccountCredentials) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{4}
}

func (x *AccountCredentials) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountCredentials) GetAuthorizedKeys() []*AccountCredentials_AuthorizedKey {
	if x != nil {
		return x.AuthorizedKeys
	}
	return nil
}

func (x *AccountCredentials) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccountCredentials) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type AuthorizedKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorizedKeysResponse) Reset() {
	*x = AuthorizedKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedKeysResponse) ProtoMessage() {}

func (x *AuthorizedKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedKeysResponse.ProtoReflect.Descriptor instead.
func (*AuthorizedKeysResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{5}
}

type AuthorizedUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*UserPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *AuthorizedUsersRequest) Reset() {
	*x = AuthorizedUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedUsersRequest) ProtoMessage() {}

func (x *AuthorizedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedUsersRequest.ProtoReflect.Descriptor instead.
func (*AuthorizedUsersRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{6}
}

func (x *AuthorizedUsersRequest) GetPolicies() []*UserPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UserPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// Types that are assignable to UserAuthorization:
	//	*UserPolicy_AuthorizedUsers
	//	*UserPolicy_PrincipalCheck
	UserAuthorization isUserPolicy_UserAuthorization `protobuf_oneof:"user_authorization"`
	Version           string                         `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn         uint64                         `protobuf:"varint,5,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *UserPolicy) Reset() {
	*x = UserPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPolicy) ProtoMessage() {}

func (x *UserPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPolicy.ProtoReflect.Descriptor instead.
func (*UserPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{7}
}

func (x *UserPolicy) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (m *UserPolicy) GetUserAuthorization() isUserPolicy_UserAuthorization {
	if m != nil {
		return m.UserAuthorization
	}
	return nil
}

func (x *UserPolicy) GetAuthorizedUsers() *UserPolicy_SshAuthorizedUsers {
	if x, ok := x.GetUserAuthorization().(*UserPolicy_AuthorizedUsers); ok {
		return x.AuthorizedUsers
	}
	return nil
}

func (x *UserPolicy) GetPrincipalCheck() *UserPolicy_AuthorizedPrincipalCheck {
	if x, ok := x.GetUserAuthorization().(*UserPolicy_PrincipalCheck); ok {
		return x.PrincipalCheck
	}
	return nil
}

func (x *UserPolicy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserPolicy) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type isUserPolicy_UserAuthorization interface {
	isUserPolicy_UserAuthorization()
}

type UserPolicy_AuthorizedUsers struct {
	AuthorizedUsers *UserPolicy_SshAuthorizedUsers `protobuf:"bytes,2,opt,name=authorized_users,json=authorizedUsers,proto3,oneof"`
}

type UserPolicy_PrincipalCheck struct {
	PrincipalCheck *UserPolicy_AuthorizedPrincipalCheck `protobuf:"bytes,3,opt,name=principal_check,json=principalCheck,proto3,oneof"`
}

func (*UserPolicy_AuthorizedUsers) isUserPolicy_UserAuthorization() {}

func (*UserPolicy_PrincipalCheck) isUserPolicy_UserAuthorization() {}

type AuthorizedUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorizedUsersResponse) Reset() {
	*x = AuthorizedUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedUsersResponse) ProtoMessage() {}

func (x *AuthorizedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedUsersResponse.ProtoReflect.Descriptor instead.
func (*AuthorizedUsersResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{8}
}

type PasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*PasswordRequest_Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *PasswordRequest) Reset() {
	*x = PasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest) ProtoMessage() {}

func (x *PasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest.ProtoReflect.Descriptor instead.
func (*PasswordRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordRequest) GetAccounts() []*PasswordRequest_Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type PasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasswordResponse) Reset() {
	*x = PasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResponse) ProtoMessage() {}

func (x *PasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResponse.ProtoReflect.Descriptor instead.
func (*PasswordResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{10}
}

type RotateHostCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*RotateHostCredentialsRequest_SshCaPublicKey
	//	*RotateHostCredentialsRequest_ServerKeys
	//	*RotateHostCredentialsRequest_Finalize
	//	*RotateHostCredentialsRequest_GenerateKeyRequest
	Request isRotateHostCredentialsRequest_Request `protobuf_oneof:"request"`
}

func (x *RotateHostCredentialsRequest) Reset() {
	*x = RotateHostCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateHostCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateHostCredentialsRequest) ProtoMessage() {}

func (x *RotateHostCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateHostCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RotateHostCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{11}
}

func (m *RotateHostCredentialsRequest) GetRequest() isRotateHostCredentialsRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetSshCaPublicKey() *CaPublicKeyRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_SshCaPublicKey); ok {
		return x.SshCaPublicKey
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetServerKeys() *ServerKeysRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_ServerKeys); ok {
		return x.ServerKeys
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetFinalize() *FinalizeRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_Finalize); ok {
		return x.Finalize
	}
	return nil
}

func (x *RotateHostCredentialsRequest) GetGenerateKeyRequest() *GenerateKeysRequest {
	if x, ok := x.GetRequest().(*RotateHostCredentialsRequest_GenerateKeyRequest); ok {
		return x.GenerateKeyRequest
	}
	return nil
}

type isRotateHostCredentialsRequest_Request interface {
	isRotateHostCredentialsRequest_Request()
}

type RotateHostCredentialsRequest_SshCaPublicKey struct {
	SshCaPublicKey *CaPublicKeyRequest `protobuf:"bytes,1,opt,name=ssh_ca_public_key,json=sshCaPublicKey,proto3,oneof"`
}

type RotateHostCredentialsRequest_ServerKeys struct {
	ServerKeys *ServerKeysRequest `protobuf:"bytes,2,opt,name=server_keys,json=serverKeys,proto3,oneof"`
}

type RotateHostCredentialsRequest_Finalize struct {
	Finalize *FinalizeRequest `protobuf:"bytes,3,opt,name=finalize,proto3,oneof"`
}

type RotateHostCredentialsRequest_GenerateKeyRequest struct {
	GenerateKeyRequest *GenerateKeysRequest `protobuf:"bytes,4,opt,name=generate_key_request,json=generateKeyRequest,proto3,oneof"`
}

func (*RotateHostCredentialsRequest_SshCaPublicKey) isRotateHostCredentialsRequest_Request() {}

func (*RotateHostCredentialsRequest_ServerKeys) isRotateHostCredentialsRequest_Request() {}

func (*RotateHostCredentialsRequest_Finalize) isRotateHostCredentialsRequest_Request() {}

func (*RotateHostCredentialsRequest_GenerateKeyRequest) isRotateHostCredentialsRequest_Request() {}

type RotateHostCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*RotateHostCredentialsResponse_CaPublicKey
	//	*RotateHostCredentialsResponse_ServerKeys
	//	*RotateHostCredentialsResponse_GenerateKeyResponse
	Response isRotateHostCredentialsResponse_Response `protobuf_oneof:"response"`
}

func (x *RotateHostCredentialsResponse) Reset() {
	*x = RotateHostCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateHostCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateHostCredentialsResponse) ProtoMessage() {}

func (x *RotateHostCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateHostCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RotateHostCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{12}
}

func (m *RotateHostCredentialsResponse) GetResponse() isRotateHostCredentialsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RotateHostCredentialsResponse) GetCaPublicKey() *CaPublicKeyResponse {
	if x, ok := x.GetResponse().(*RotateHostCredentialsResponse_CaPublicKey); ok {
		return x.CaPublicKey
	}
	return nil
}

func (x *RotateHostCredentialsResponse) GetServerKeys() *ServerKeysResponse {
	if x, ok := x.GetResponse().(*RotateHostCredentialsResponse_ServerKeys); ok {
		return x.ServerKeys
	}
	return nil
}

func (x *RotateHostCredentialsResponse) GetGenerateKeyResponse() *GenerateKeysResponse {
	if x, ok := x.GetResponse().(*RotateHostCredentialsResponse_GenerateKeyResponse); ok {
		return x.GenerateKeyResponse
	}
	return nil
}

type isRotateHostCredentialsResponse_Response interface {
	isRotateHostCredentialsResponse_Response()
}

type RotateHostCredentialsResponse_CaPublicKey struct {
	CaPublicKey *CaPublicKeyResponse `protobuf:"bytes,1,opt,name=ca_public_key,json=caPublicKey,proto3,oneof"`
}

type RotateHostCredentialsResponse_ServerKeys struct {
	ServerKeys *ServerKeysResponse `protobuf:"bytes,2,opt,name=server_keys,json=serverKeys,proto3,oneof"`
}

type RotateHostCredentialsResponse_GenerateKeyResponse struct {
	GenerateKeyResponse *GenerateKeysResponse `protobuf:"bytes,3,opt,name=generate_key_response,json=generateKeyResponse,proto3,oneof"`
}

func (*RotateHostCredentialsResponse_CaPublicKey) isRotateHostCredentialsResponse_Response() {}

func (*RotateHostCredentialsResponse_ServerKeys) isRotateHostCredentialsResponse_Response() {}

func (*RotateHostCredentialsResponse_GenerateKeyResponse) isRotateHostCredentialsResponse_Response() {
}

type CanGenerateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyParams KeyGen `protobuf:"varint,1,opt,name=key_params,json=keyParams,proto3,enum=gnsi.credentialz.KeyGen" json:"key_params,omitempty"`
}

func (x *CanGenerateKeyRequest) Reset() {
	*x = CanGenerateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanGenerateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateKeyRequest) ProtoMessage() {}

func (x *CanGenerateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateKeyRequest.ProtoReflect.Descriptor instead.
func (*CanGenerateKeyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{13}
}

func (x *CanGenerateKeyRequest) GetKeyParams() KeyGen {
	if x != nil {
		return x.KeyParams
	}
	return KeyGen_KEY_GEN_SSH_KEY_UNSPECIFIED
}

type CanGenerateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanGenerate bool `protobuf:"varint,1,opt,name=can_generate,json=canGenerate,proto3" json:"can_generate,omitempty"`
}

func (x *CanGenerateKeyResponse) Reset() {
	*x = CanGenerateKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanGenerateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateKeyResponse) ProtoMessage() {}

func (x *CanGenerateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateKeyResponse.ProtoReflect.Descriptor instead.
func (*CanGenerateKeyResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{14}
}

func (x *CanGenerateKeyResponse) GetCanGenerate() bool {
	if x != nil {
		return x.CanGenerate
	}
	return false
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey   []byte  `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	KeyType     KeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=gnsi.credentialz.KeyType" json:"key_type,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{15}
}

func (x *PublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PublicKey) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *PublicKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CaPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshCaPublicKeys []*PublicKey `protobuf:"bytes,1,rep,name=ssh_ca_public_keys,json=sshCaPublicKeys,proto3" json:"ssh_ca_public_keys,omitempty"`
	Version         string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn       uint64       `protobuf:"varint,3,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *CaPublicKeyRequest) Reset() {
	*x = CaPublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaPublicKeyRequest) ProtoMessage() {}

func (x *CaPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*CaPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{16}
}

func (x *CaPublicKeyRequest) GetSshCaPublicKeys() []*PublicKey {
	if x != nil {
		return x.SshCaPublicKeys
	}
	return nil
}

func (x *CaPublicKeyRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CaPublicKeyRequest) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type CaPublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaPublicKeyResponse) Reset() {
	*x = CaPublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaPublicKeyResponse) ProtoMessage() {}

func (x *CaPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*CaPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{17}
}

type GenerateKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyParams KeyGen `protobuf:"varint,1,opt,name=key_params,json=keyParams,proto3,enum=gnsi.credentialz.KeyGen" json:"key_params,omitempty"`
}

func (x *GenerateKeysRequest) Reset() {
	*x = GenerateKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeysRequest) ProtoMessage() {}

func (x *GenerateKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeysRequest.ProtoReflect.Descriptor instead.
func (*GenerateKeysRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateKeysRequest) GetKeyParams() KeyGen {
	if x != nil {
		return x.KeyParams
	}
	return KeyGen_KEY_GEN_SSH_KEY_UNSPECIFIED
}

type GenerateKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *GenerateKeysResponse) Reset() {
	*x = GenerateKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeysResponse) ProtoMessage() {}

func (x *GenerateKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeysResponse.ProtoReflect.Descriptor instead.
func (*GenerateKeysResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{19}
}

func (x *GenerateKeysResponse) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ServerKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthArtifacts []*ServerKeysRequest_AuthenticationArtifacts `protobuf:"bytes,1,rep,name=auth_artifacts,json=authArtifacts,proto3" json:"auth_artifacts,omitempty"`
	Version       string                                       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn     uint64                                       `protobuf:"varint,3,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *ServerKeysRequest) Reset() {
	*x = ServerKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerKeysRequest) ProtoMessage() {}

func (x *ServerKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerKeysRequest.ProtoReflect.Descriptor instead.
func (*ServerKeysRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{20}
}

func (x *ServerKeysRequest) GetAuthArtifacts() []*ServerKeysRequest_AuthenticationArtifacts {
	if x != nil {
		return x.AuthArtifacts
	}
	return nil
}

func (x *ServerKeysRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerKeysRequest) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type ServerKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerKeysResponse) Reset() {
	*x = ServerKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerKeysResponse) ProtoMessage() {}

func (x *ServerKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerKeysResponse.ProtoReflect.Descriptor instead.
func (*ServerKeysResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{21}
}

type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{22}
}

type AccountCredentials_AuthorizedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedKey []byte    `protobuf:"bytes,1,opt,name=authorized_key,json=authorizedKey,proto3" json:"authorized_key,omitempty"`
	Options       []*Option `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	KeyType       KeyType   `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=gnsi.credentialz.KeyType" json:"key_type,omitempty"`
	Description   string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AccountCredentials_AuthorizedKey) Reset() {
	*x = AccountCredentials_AuthorizedKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCredentials_AuthorizedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCredentials_AuthorizedKey) ProtoMessage() {}

func (x *AccountCredentials_AuthorizedKey) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCredentials_AuthorizedKey.ProtoReflect.Descriptor instead.
func (*AccountCredentials_AuthorizedKey) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AccountCredentials_AuthorizedKey) GetAuthorizedKey() []byte {
	if x != nil {
		return x.AuthorizedKey
	}
	return nil
}

func (x *AccountCredentials_AuthorizedKey) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AccountCredentials_AuthorizedKey) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *AccountCredentials_AuthorizedKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UserPolicy_SshAuthorizedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedUsers []*UserPolicy_SshAuthorizedUser `protobuf:"bytes,2,rep,name=authorized_users,json=authorizedUsers,proto3" json:"authorized_users,omitempty"`
}

func (x *UserPolicy_SshAuthorizedUsers) Reset() {
	*x = UserPolicy_SshAuthorizedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPolicy_SshAuthorizedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPolicy_SshAuthorizedUsers) ProtoMessage() {}

func (x *UserPolicy_SshAuthorizedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPolicy_SshAuthorizedUsers.ProtoReflect.Descriptor instead.
func (*UserPolicy_SshAuthorizedUsers) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UserPolicy_SshAuthorizedUsers) GetAuthorizedUsers() []*UserPolicy_SshAuthorizedUser {
	if x != nil {
		return x.AuthorizedUsers
	}
	return nil
}

type UserPolicy_SshAuthorizedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedUser string    `protobuf:"bytes,1,opt,name=authorized_user,json=authorizedUser,proto3" json:"authorized_user,omitempty"`
	Options        []*Option `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *UserPolicy_SshAuthorizedUser) Reset() {
	*x = UserPolicy_SshAuthorizedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPolicy_SshAuthorizedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPolicy_SshAuthorizedUser) ProtoMessage() {}

func (x *UserPolicy_SshAuthorizedUser) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPolicy_SshAuthorizedUser.ProtoReflect.Descriptor instead.
func (*UserPolicy_SshAuthorizedUser) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{7, 1}
}

func (x *UserPolicy_SshAuthorizedUser) GetAuthorizedUser() string {
	if x != nil {
		return x.AuthorizedUser
	}
	return ""
}

func (x *UserPolicy_SshAuthorizedUser) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type UserPolicy_AuthorizedPrincipalCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tool    UserPolicy_AuthorizedPrincipalCheck_Tool `protobuf:"varint,1,opt,name=tool,proto3,enum=gnsi.credentialz.UserPolicy_AuthorizedPrincipalCheck_Tool" json:"tool,omitempty"`
	Options []*Option                                `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *UserPolicy_AuthorizedPrincipalCheck) Reset() {
	*x = UserPolicy_AuthorizedPrincipalCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPolicy_AuthorizedPrincipalCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPolicy_AuthorizedPrincipalCheck) ProtoMessage() {}

func (x *UserPolicy_AuthorizedPrincipalCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPolicy_AuthorizedPrincipalCheck.ProtoReflect.Descriptor instead.
func (*UserPolicy_AuthorizedPrincipalCheck) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{7, 2}
}

func (x *UserPolicy_AuthorizedPrincipalCheck) GetTool() UserPolicy_AuthorizedPrincipalCheck_Tool {
	if x != nil {
		return x.Tool
	}
	return UserPolicy_AuthorizedPrincipalCheck_TOOL_UNSPECIFIED
}

func (x *UserPolicy_AuthorizedPrincipalCheck) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type PasswordRequest_CryptoHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashType  PasswordRequest_CryptoHash_HashType `protobuf:"varint,1,opt,name=hash_type,json=hashType,proto3,enum=gnsi.credentialz.PasswordRequest_CryptoHash_HashType" json:"hash_type,omitempty"`
	HashValue string                              `protobuf:"bytes,2,opt,name=hash_value,json=hashValue,proto3" json:"hash_value,omitempty"`
}

func (x *PasswordRequest_CryptoHash) Reset() {
	*x = PasswordRequest_CryptoHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest_CryptoHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest_CryptoHash) ProtoMessage() {}

func (x *PasswordRequest_CryptoHash) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest_CryptoHash.ProtoReflect.Descriptor instead.
func (*PasswordRequest_CryptoHash) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PasswordRequest_CryptoHash) GetHashType() PasswordRequest_CryptoHash_HashType {
	if x != nil {
		return x.HashType
	}
	return PasswordRequest_CryptoHash_HASH_TYPE_UNSPECIFIED
}

func (x *PasswordRequest_CryptoHash) GetHashValue() string {
	if x != nil {
		return x.HashValue
	}
	return ""
}

type PasswordRequest_Password struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*PasswordRequest_Password_Plaintext
	//	*PasswordRequest_Password_CryptoHash
	Value isPasswordRequest_Password_Value `protobuf_oneof:"value"`
}

func (x *PasswordRequest_Password) Reset() {
	*x = PasswordRequest_Password{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest_Password) ProtoMessage() {}

func (x *PasswordRequest_Password) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest_Password.ProtoReflect.Descriptor instead.
func (*PasswordRequest_Password) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{9, 1}
}

func (m *PasswordRequest_Password) GetValue() isPasswordRequest_Password_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PasswordRequest_Password) GetPlaintext() string {
	if x, ok := x.GetValue().(*PasswordRequest_Password_Plaintext); ok {
		return x.Plaintext
	}
	return ""
}

func (x *PasswordRequest_Password) GetCryptoHash() *PasswordRequest_CryptoHash {
	if x, ok := x.GetValue().(*PasswordRequest_Password_CryptoHash); ok {
		return x.CryptoHash
	}
	return nil
}

type isPasswordRequest_Password_Value interface {
	isPasswordRequest_Password_Value()
}

type PasswordRequest_Password_Plaintext struct {
	Plaintext string `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type PasswordRequest_Password_CryptoHash struct {
	CryptoHash *PasswordRequest_CryptoHash `protobuf:"bytes,2,opt,name=crypto_hash,json=cryptoHash,proto3,oneof"`
}

func (*PasswordRequest_Password_Plaintext) isPasswordRequest_Password_Value() {}

func (*PasswordRequest_Password_CryptoHash) isPasswordRequest_Password_Value() {}

type PasswordRequest_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string                    `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password  *PasswordRequest_Password `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Version   string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn uint64                    `protobuf:"varint,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
}

func (x *PasswordRequest_Account) Reset() {
	*x = PasswordRequest_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordRequest_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest_Account) ProtoMessage() {}

func (x *PasswordRequest_Account) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest_Account.ProtoReflect.Descriptor instead.
func (*PasswordRequest_Account) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{9, 2}
}

func (x *PasswordRequest_Account) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PasswordRequest_Account) GetPassword() *PasswordRequest_Password {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *PasswordRequest_Account) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PasswordRequest_Account) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

type ServerKeysRequest_AuthenticationArtifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey  []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Certificate []byte `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *ServerKeysRequest_AuthenticationArtifacts) Reset() {
	*x = ServerKeysRequest_AuthenticationArtifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerKeysRequest_AuthenticationArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerKeysRequest_AuthenticationArtifacts) ProtoMessage() {}

func (x *ServerKeysRequest_AuthenticationArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerKeysRequest_AuthenticationArtifacts.ProtoReflect.Descriptor instead.
func (*ServerKeysRequest_AuthenticationArtifacts) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ServerKeysRequest_AuthenticationArtifacts) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *ServerKeysRequest_AuthenticationArtifacts) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

var File_github_com_openconfig_gnsi_credentialz_credentialz_proto protoreflect.FileDescriptor

var file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x1a, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x1f, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x20, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x87, 0x07, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x06, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x06, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x54, 0x59, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x43, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x5f, 0x58, 0x31, 0x31, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x4c, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x53, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x54,
	0x59, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x12, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x13, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x52, 0x43, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x58, 0x31, 0x31, 0x5f, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x89, 0x03, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x1a, 0xc2, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a,
	0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xe6, 0x05, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x7a, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x1a, 0x6f, 0x0a,
	0x12, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x73, 0x68, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x70,
	0x0a, 0x11, 0x53, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0xcb, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x4e, 0x0a,
	0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x7a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x48, 0x49, 0x42, 0x41, 0x10, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe7, 0x04, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0xde, 0x01, 0x0a, 0x0a, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x52, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x08,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f,
	0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x02, 0x1a, 0x84, 0x01, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x02,
	0x0a, 0x1c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x11, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x43, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x73, 0x68, 0x43, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x9f, 0x02, 0x0a, 0x1d, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x43, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x47, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x7a, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x7a, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x12, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x73, 0x73, 0x68, 0x43, 0x61, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x1a, 0x5c,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x7f, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50, 0x5f, 0x35, 0x32, 0x31, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x53, 0x41, 0x10, 0x04, 0x2a, 0xc0, 0x01, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x47, 0x65,
	0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x53, 0x53, 0x48,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x53, 0x53,
	0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x32,
	0x30, 0x34, 0x38, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x45, 0x4e,
	0x5f, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x50, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4b,
	0x45, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50, 0x5f, 0x35, 0x32, 0x31, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x53, 0x53, 0x48,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x44, 0x53, 0x41, 0x5f,
	0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x04, 0x32, 0xfa, 0x02, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x7e, 0x0a, 0x15, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x63, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x27, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a, 0x2e,
	0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x7a,
	0xd2, 0x3e, 0x05, 0x30, 0x2e, 0x32, 0x2e, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescOnce sync.Once
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescData = file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDesc
)

func file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescData)
	})
	return file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDescData
}

var file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_github_com_openconfig_gnsi_credentialz_credentialz_proto_goTypes = []interface{}{
	(KeyType)(0),               // 0: gnsi.credentialz.KeyType
	(KeyGen)(0),                // 1: gnsi.credentialz.KeyGen
	(Option_StandardOption)(0), // 2: gnsi.credentialz.Option.StandardOption
	(UserPolicy_AuthorizedPrincipalCheck_Tool)(0),     // 3: gnsi.credentialz.UserPolicy.AuthorizedPrincipalCheck.Tool
	(PasswordRequest_CryptoHash_HashType)(0),          // 4: gnsi.credentialz.PasswordRequest.CryptoHash.HashType
	(*RotateAccountCredentialsRequest)(nil),           // 5: gnsi.credentialz.RotateAccountCredentialsRequest
	(*RotateAccountCredentialsResponse)(nil),          // 6: gnsi.credentialz.RotateAccountCredentialsResponse
	(*AuthorizedKeysRequest)(nil),                     // 7: gnsi.credentialz.AuthorizedKeysRequest
	(*Option)(nil),                                    // 8: gnsi.credentialz.Option
	(*AccountCredentials)(nil),                        // 9: gnsi.credentialz.AccountCredentials
	(*AuthorizedKeysResponse)(nil),                    // 10: gnsi.credentialz.AuthorizedKeysResponse
	(*AuthorizedUsersRequest)(nil),                    // 11: gnsi.credentialz.AuthorizedUsersRequest
	(*UserPolicy)(nil),                                // 12: gnsi.credentialz.UserPolicy
	(*AuthorizedUsersResponse)(nil),                   // 13: gnsi.credentialz.AuthorizedUsersResponse
	(*PasswordRequest)(nil),                           // 14: gnsi.credentialz.PasswordRequest
	(*PasswordResponse)(nil),                          // 15: gnsi.credentialz.PasswordResponse
	(*RotateHostCredentialsRequest)(nil),              // 16: gnsi.credentialz.RotateHostCredentialsRequest
	(*RotateHostCredentialsResponse)(nil),             // 17: gnsi.credentialz.RotateHostCredentialsResponse
	(*CanGenerateKeyRequest)(nil),                     // 18: gnsi.credentialz.CanGenerateKeyRequest
	(*CanGenerateKeyResponse)(nil),                    // 19: gnsi.credentialz.CanGenerateKeyResponse
	(*PublicKey)(nil),                                 // 20: gnsi.credentialz.PublicKey
	(*CaPublicKeyRequest)(nil),                        // 21: gnsi.credentialz.CaPublicKeyRequest
	(*CaPublicKeyResponse)(nil),                       // 22: gnsi.credentialz.CaPublicKeyResponse
	(*GenerateKeysRequest)(nil),                       // 23: gnsi.credentialz.GenerateKeysRequest
	(*GenerateKeysResponse)(nil),                      // 24: gnsi.credentialz.GenerateKeysResponse
	(*ServerKeysRequest)(nil),                         // 25: gnsi.credentialz.ServerKeysRequest
	(*ServerKeysResponse)(nil),                        // 26: gnsi.credentialz.ServerKeysResponse
	(*FinalizeRequest)(nil),                           // 27: gnsi.credentialz.FinalizeRequest
	(*AccountCredentials_AuthorizedKey)(nil),          // 28: gnsi.credentialz.AccountCredentials.AuthorizedKey
	(*UserPolicy_SshAuthorizedUsers)(nil),             // 29: gnsi.credentialz.UserPolicy.SshAuthorizedUsers
	(*UserPolicy_SshAuthorizedUser)(nil),              // 30: gnsi.credentialz.UserPolicy.SshAuthorizedUser
	(*UserPolicy_AuthorizedPrincipalCheck)(nil),       // 31: gnsi.credentialz.UserPolicy.AuthorizedPrincipalCheck
	(*PasswordRequest_CryptoHash)(nil),                // 32: gnsi.credentialz.PasswordRequest.CryptoHash
	(*PasswordRequest_Password)(nil),                  // 33: gnsi.credentialz.PasswordRequest.Password
	(*PasswordRequest_Account)(nil),                   // 34: gnsi.credentialz.PasswordRequest.Account
	(*ServerKeysRequest_AuthenticationArtifacts)(nil), // 35: gnsi.credentialz.ServerKeysRequest.AuthenticationArtifacts
}
var file_github_com_openconfig_gnsi_credentialz_credentialz_proto_depIdxs = []int32{
	7,  // 0: gnsi.credentialz.RotateAccountCredentialsRequest.credential:type_name -> gnsi.credentialz.AuthorizedKeysRequest
	11, // 1: gnsi.credentialz.RotateAccountCredentialsRequest.user:type_name -> gnsi.credentialz.AuthorizedUsersRequest
	14, // 2: gnsi.credentialz.RotateAccountCredentialsRequest.password:type_name -> gnsi.credentialz.PasswordRequest
	27, // 3: gnsi.credentialz.RotateAccountCredentialsRequest.finalize:type_name -> gnsi.credentialz.FinalizeRequest
	10, // 4: gnsi.credentialz.RotateAccountCredentialsResponse.credential:type_name -> gnsi.credentialz.AuthorizedKeysResponse
	13, // 5: gnsi.credentialz.RotateAccountCredentialsResponse.user:type_name -> gnsi.credentialz.AuthorizedUsersResponse
	15, // 6: gnsi.credentialz.RotateAccountCredentialsResponse.password:type_name -> gnsi.credentialz.PasswordResponse
	9,  // 7: gnsi.credentialz.AuthorizedKeysRequest.credentials:type_name -> gnsi.credentialz.AccountCredentials
	2,  // 8: gnsi.credentialz.Option.id:type_name -> gnsi.credentialz.Option.StandardOption
	28, // 9: gnsi.credentialz.AccountCredentials.authorized_keys:type_name -> gnsi.credentialz.AccountCredentials.AuthorizedKey
	12, // 10: gnsi.credentialz.AuthorizedUsersRequest.policies:type_name -> gnsi.credentialz.UserPolicy
	29, // 11: gnsi.credentialz.UserPolicy.authorized_users:type_name -> gnsi.credentialz.UserPolicy.SshAuthorizedUsers
	31, // 12: gnsi.credentialz.UserPolicy.principal_check:type_name -> gnsi.credentialz.UserPolicy.AuthorizedPrincipalCheck
	34, // 13: gnsi.credentialz.PasswordRequest.accounts:type_name -> gnsi.credentialz.PasswordRequest.Account
	21, // 14: gnsi.credentialz.RotateHostCredentialsRequest.ssh_ca_public_key:type_name -> gnsi.credentialz.CaPublicKeyRequest
	25, // 15: gnsi.credentialz.RotateHostCredentialsRequest.server_keys:type_name -> gnsi.credentialz.ServerKeysRequest
	27, // 16: gnsi.credentialz.RotateHostCredentialsRequest.finalize:type_name -> gnsi.credentialz.FinalizeRequest
	23, // 17: gnsi.credentialz.RotateHostCredentialsRequest.generate_key_request:type_name -> gnsi.credentialz.GenerateKeysRequest
	22, // 18: gnsi.credentialz.RotateHostCredentialsResponse.ca_public_key:type_name -> gnsi.credentialz.CaPublicKeyResponse
	26, // 19: gnsi.credentialz.RotateHostCredentialsResponse.server_keys:type_name -> gnsi.credentialz.ServerKeysResponse
	24, // 20: gnsi.credentialz.RotateHostCredentialsResponse.generate_key_response:type_name -> gnsi.credentialz.GenerateKeysResponse
	1,  // 21: gnsi.credentialz.CanGenerateKeyRequest.key_params:type_name -> gnsi.credentialz.KeyGen
	0,  // 22: gnsi.credentialz.PublicKey.key_type:type_name -> gnsi.credentialz.KeyType
	20, // 23: gnsi.credentialz.CaPublicKeyRequest.ssh_ca_public_keys:type_name -> gnsi.credentialz.PublicKey
	1,  // 24: gnsi.credentialz.GenerateKeysRequest.key_params:type_name -> gnsi.credentialz.KeyGen
	20, // 25: gnsi.credentialz.GenerateKeysResponse.public_key:type_name -> gnsi.credentialz.PublicKey
	35, // 26: gnsi.credentialz.ServerKeysRequest.auth_artifacts:type_name -> gnsi.credentialz.ServerKeysRequest.AuthenticationArtifacts
	8,  // 27: gnsi.credentialz.AccountCredentials.AuthorizedKey.options:type_name -> gnsi.credentialz.Option
	0,  // 28: gnsi.credentialz.AccountCredentials.AuthorizedKey.key_type:type_name -> gnsi.credentialz.KeyType
	30, // 29: gnsi.credentialz.UserPolicy.SshAuthorizedUsers.authorized_users:type_name -> gnsi.credentialz.UserPolicy.SshAuthorizedUser
	8,  // 30: gnsi.credentialz.UserPolicy.SshAuthorizedUser.options:type_name -> gnsi.credentialz.Option
	3,  // 31: gnsi.credentialz.UserPolicy.AuthorizedPrincipalCheck.tool:type_name -> gnsi.credentialz.UserPolicy.AuthorizedPrincipalCheck.Tool
	8,  // 32: gnsi.credentialz.UserPolicy.AuthorizedPrincipalCheck.options:type_name -> gnsi.credentialz.Option
	4,  // 33: gnsi.credentialz.PasswordRequest.CryptoHash.hash_type:type_name -> gnsi.credentialz.PasswordRequest.CryptoHash.HashType
	32, // 34: gnsi.credentialz.PasswordRequest.Password.crypto_hash:type_name -> gnsi.credentialz.PasswordRequest.CryptoHash
	33, // 35: gnsi.credentialz.PasswordRequest.Account.password:type_name -> gnsi.credentialz.PasswordRequest.Password
	5,  // 36: gnsi.credentialz.Credentialz.RotateAccountCredentials:input_type -> gnsi.credentialz.RotateAccountCredentialsRequest
	16, // 37: gnsi.credentialz.Credentialz.RotateHostCredentials:input_type -> gnsi.credentialz.RotateHostCredentialsRequest
	18, // 38: gnsi.credentialz.Credentialz.CanGenerateKey:input_type -> gnsi.credentialz.CanGenerateKeyRequest
	6,  // 39: gnsi.credentialz.Credentialz.RotateAccountCredentials:output_type -> gnsi.credentialz.RotateAccountCredentialsResponse
	17, // 40: gnsi.credentialz.Credentialz.RotateHostCredentials:output_type -> gnsi.credentialz.RotateHostCredentialsResponse
	19, // 41: gnsi.credentialz.Credentialz.CanGenerateKey:output_type -> gnsi.credentialz.CanGenerateKeyResponse
	39, // [39:42] is the sub-list for method output_type
	36, // [36:39] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_gnsi_credentialz_credentialz_proto_init() }
func file_github_com_openconfig_gnsi_credentialz_credentialz_proto_init() {
	if File_github_com_openconfig_gnsi_credentialz_credentialz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateAccountCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateAccountCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateHostCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateHostCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanGenerateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanGenerateKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaPublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaPublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCredentials_AuthorizedKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPolicy_SshAuthorizedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPolicy_SshAuthorizedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPolicy_AuthorizedPrincipalCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest_CryptoHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest_Password); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordRequest_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerKeysRequest_AuthenticationArtifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RotateAccountCredentialsRequest_Credential)(nil),
		(*RotateAccountCredentialsRequest_User)(nil),
		(*RotateAccountCredentialsRequest_Password)(nil),
		(*RotateAccountCredentialsRequest_Finalize)(nil),
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RotateAccountCredentialsResponse_Credential)(nil),
		(*RotateAccountCredentialsResponse_User)(nil),
		(*RotateAccountCredentialsResponse_Password)(nil),
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Option_Name)(nil),
		(*Option_Id)(nil),
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UserPolicy_AuthorizedUsers)(nil),
		(*UserPolicy_PrincipalCheck)(nil),
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RotateHostCredentialsRequest_SshCaPublicKey)(nil),
		(*RotateHostCredentialsRequest_ServerKeys)(nil),
		(*RotateHostCredentialsRequest_Finalize)(nil),
		(*RotateHostCredentialsRequest_GenerateKeyRequest)(nil),
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RotateHostCredentialsResponse_CaPublicKey)(nil),
		(*RotateHostCredentialsResponse_ServerKeys)(nil),
		(*RotateHostCredentialsResponse_GenerateKeyResponse)(nil),
	}
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*PasswordRequest_Password_Plaintext)(nil),
		(*PasswordRequest_Password_CryptoHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_gnsi_credentialz_credentialz_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_gnsi_credentialz_credentialz_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_gnsi_credentialz_credentialz_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_gnsi_credentialz_credentialz_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_gnsi_credentialz_credentialz_proto = out.File
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_rawDesc = nil
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_goTypes = nil
	file_github_com_openconfig_gnsi_credentialz_credentialz_proto_depIdxs = nil
}
