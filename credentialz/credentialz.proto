//
// Copyright 2021 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package gnsi.credentialz.v1;

// This package is a work in progress. It may change in the future. :-)
option go_package = "github.com/openconfig/gnsi/credentialz";

// The Credentials Management Service exported by targets.
//
// This service exports two RPCs, RotateAccountCredentials() and
// RotateHostParameters(), which are used to manage the account-related SSH
// credentials, and the host-related SSH credentials on a target respectively.
//
// Note that for the sake of data consistency and API simplicity, only one RPC
// may be in progress at a time. An attempt to initiate any of the RPCs while
// another one is already in progress will be rejected with an error.
// For example, when the RotateAccountCredentials() RPC is in progress another
// call to the RotateAccountCredentials() or the RotateHostParameters() RPC
// will be rejected.

service Credentialz {
  // RotateAccountCredentials allows to specify an authentication SSH service
  // policy to the network element. The policy, if valid, replaces the existing
  // policy.
  //
  // Canonical error codes are to be used as responses. See
  // https://grpc.io/docs/guides/error/ for more details.
  //
  // Allows for setting the SSH authorized keys list for a system account
  // (i.e. the set of SSH keys that are allows to login to the account).
  // Also allows to set the SSH authorized principals list for a system account
  // (i.e. the set of SSH certificate principals accepted for login to the
  //  account).
  //
  // Moreover, it allows to change the system account's password.
  //
  // Case 1: Both the credentials and authorized usernames are set.
  //
  //   Step 1: Start the stream
  //     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
  //
  //   Step 2: Credentials are replaced
  //     Client -----> AuthorizedKeysRequest----> Target
  //     Client <----- AuthorizedKeysResponse <--- Target
  //
  //   Step 3: Authorized username lists are replaced
  //     Client -----> AuthorizedUsersRequest----> Target
  //     Client <----- AuthorizedUsersResponse <--- Target
  //
  //   Step 4 (optional): Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new certificates/keys and validates that
  //     the certificates/keys "work".
  //     Once verified, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the certificates/keys.
  //
  //   Step 5: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  //
  // Case 2: Only the credentials are updated.
  //
  //   Step 1: Start the stream
  //     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
  //
  //   Step 2: Credentials are replaced
  //     Client -----> AuthorizedKeysRequest----> Target
  //     Client <----- AuthorizedKeysResponse <--- Target
  //
  //   Step 3 (optional): Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new certificates/keys and validates that
  //     the certificates/keys "work".
  //     Once verified, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the certificates/keys.
  //
  //   Step 4: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  //
  // Case 3: Only authorized usernames are updated.
  //
  //   Step 1: Start the stream
  //     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
  //
  //   Step 2: New authorized username lists are replaced
  //     Client -----> AuthorizedUsersRequest----> Target
  //     Client <----- AuthorizedUsersResponse <--- Target
  //
  //   Step 3 (optional): Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new certificates/keys and validates that
  //     the certificates/keys "work".
  //     Once verified, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the certificates/keys.
  //
  //   Step 4: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  //
  // Case 4: Passwords are updated.
  //
  //   Step 1: Start the stream
  //     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
  //
  //   Step 2: Account passwords are replaced
  //     Client -----> PasswordRequest----> Target
  //     Client <----- PasswordResponse <--- Target
  //
  //   Step 3 (optional): Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new passwords and validates that they "work".
  //     Once verified, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the passwords.
  //
  //   Step 4: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  rpc RotateAccountCredentials(stream RotateAccountCredentialsRequest)
      returns (stream RotateAccountCredentialsResponse);

  // RotateHostParameters() allows for changing both the Certificate Authority
  // public key as well as the keys and the certificate used by the SSH server.
  // The CA public key key is used to verify certificates presented by
  // the client to the SSH server during connection establishment.
  // The server's public and private keys are required during regular operations
  // of the SSH server.
  // The SSH server's certificate is used by the client to authenticate
  // the server during connection establishemnt process. This certificate might
  // be signed by the same Certificate Authority that has signed clients'
  // certificates.
  //
  // Use Case 1: Update the CA public key.
  //
  //   Step 1: Start the stream
  //     Client <---- RotateHostParameters() RPC stream begin ------> Target
  //
  //   Step 2: Replace the CA public key
  //     Client -----> CaPublicKeyRequest----> Target
  //     Client <----- CaPublicKeyResponse <--- Target
  //
  //   Step 3 (optional): Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new certificates/keys and validates that
  //     the certificates/keys "work".
  //     Once verfied, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the certificates/keys.
  //
  //   Step 4: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  // Use Case 2: Update the server's keys and cert.
  //
  //   Step 1: Start the stream
  //     Client <---- RotateHostParameters() RPC stream begin ------> Target
  //
  //   Step 2: Replace all server keys
  //     Client -----> ServerKeysRequest----> Target
  //     Client <----- ServerKeysResponse <--- Target
  //
  //   Step 3 (optional): Test/Validation by the client.
  //     During this step client attempts to create a new connection to
  //     the target using the new certificates/keys and validates that
  //     the certificates/keys "work".
  //     Once verfied, the client then proceeds to finalize the rotation.
  //     If the new connection cannot be completed the client will cancel the
  //     RPC thereby forcing the target to rollback all the certificates/keys.
  //
  //   Step 4: Final commit.
  //     Client -----> FinalizeRequest----> Target
  //
  //   Use Case 3: Replace keys by generating on the device
  //
  //     Step 1: Start the stream
  //       Client <---- RotateHostParameters() RPC stream begin ------> Target
  //
  //     Step 2: Trigger key generation on the device and apply host key. The
  //             device returns the public keys corresponding to the generated
  //             private keys which will be used to create host certificates.
  //       Client -----> GenerateKeysRequest ----> Target
  //       Client <----  GenerateKeysResponse <----- Target
  //
  //     Step 3: Replace all server keys (certificates)
  //       Client -----> ServerKeysRequest----> Target
  //       Client <----- ServerKeysResponse <--- Target
  //
  //     Step 4 (optional): Test/Validation by the client.
  //       During this step client attempts to create a new connection to
  //       the target using the new certificates/keys and validates that
  //       the certificates/keys "work".
  //       Once verfied, the client then proceeds to finalize the rotation.
  //       If the new connection cannot be completed the client will cancel the
  //       RPC thereby forcing the target to rollback all the certificates/keys.
  //
  //     Step 5: Final commit.
  //       Client -----> FinalizeRequest----> Target
  rpc RotateHostParameters(stream RotateHostParametersRequest)
      returns (stream RotateHostParametersResponse) {}

  // An RPC to ask a target if it can generate a Public/Private key pair
  rpc CanGenerateKey(CanGenerateKeyRequest) returns (CanGenerateKeyResponse);

  // Get the current public keys from the host. Each configured key will be
  // returned in the provided list.
  rpc GetPublicKeys(GetPublicKeysRequest) returns (GetPublicKeysResponse);
}

//
// Messages related to RotateAccountCredentials RPC.
//

message RotateAccountCredentialsRequest {
  oneof request {
    AuthorizedKeysRequest credential = 1;
    AuthorizedUsersRequest user = 2;
    PasswordRequest password = 3;
    FinalizeRequest finalize = 4;
  }
}

// RotateAccountCredentialsResponse is the response to
// the RotateAccountCredentials RPC.
message RotateAccountCredentialsResponse {
  oneof response {
    AuthorizedKeysResponse credential = 1;
    AuthorizedUsersResponse user = 2;
    PasswordResponse password = 3;
  }
}

message AuthorizedKeysRequest {
  // A list of credentials that are to be accepted on the SSH service on
  // the network element.
  // Multiple credentials MAY be specified to allow for multiple
  // system roles, or specific user restrictions to be described.
  repeated AccountCredentials credentials = 1;
}

message Option {
  // An option that is specified for an authorized user, key entry, or
  // authorized principal tool.
  // For example, for OpenSSH, an entry can have an option
  // `from="*.sales.example.net,!pc.sales.example.net"`
  // For such option the `key.id` would be `FROM` (6) while the `value`
  // would be `*.sales.example.net,!pc.sales.example.net`.
  //
  // If a specified option is unknown then the whole request should be rejected.
  enum StandardOption {
    STANDARD_OPTION_UNSPECIFIED = 0;

    // Enable authentication agent forwarding previously disabled by the
    // restrict option.
    STANDARD_OPTION_AGENT_FORWARDING = 1;

    // Specifies that the listed key is a certification authority (CA) that is
    // trusted to validate signed certificates for user authentication.

    // Certificates may encode access restrictions similar to these key options.
    // If both certificate restrictions and key options are present, the most
    // restrictive union of the two is applied.
    STANDARD_OPTION_CERT_AUTHORITY = 2;

    //  Specifies that the command is executed whenever this key is used for
    //  authentication. The command supplied by the user (if any) is ignored.
    //  The command is run on a pty if the client requests a pty; otherwise it
    //  is run without a tty.  If an 8-bit clean channel is required, one must
    //  not request a pty or should specify no-pty.  A quote may be included in
    //  the command by quoting it with a backslash.

    //  This option might be useful to restrict certain public keys to perform
    //  just a specific operation.  An example might be a key that permits
    //  remote backups but nothing else.  Note that the client may specify TCP
    //  and/or X11 forwarding unless they are explicitly prohibited, e.g. using
    //  the restrict key option.

    //  The command originally supplied by the client is available in the
    //  SSH_ORIGINAL_COMMAND environment variable.  Note that this option
    //  applies to shell, command or subsystem execution.  Also note that this
    //  command may be superseded by a sshd_config(5) ForceCommand directive.

    //  If a command is specified and a forced-command is embedded in a
    //  certificate used for authentication, then the certificate will be
    //  accepted only if the two commands are identical.
    STANDARD_OPTION_COMMAND = 3;

    //  Specifies that the string is to be added to the environment when logging
    //  in using this key.  Environment variables set this way override other
    //  default environment values.  Multiple options of this type are
    //  permitted. Environment processing is disabled by default and is
    //  controlled via the PermitUserEnvironment option.
    STANDARD_OPTION_ENVIRONMENT = 4;

    //  Specifies a time after which the key will not be accepted.  The time may
    //  be specified as a YYYYMMDD date or a YYYYMMDDHHMM[SS] time in the system
    //  time-zone.
    STANDARD_OPTION_EXPIRY_TIME = 5;

    // Specifies that in addition to public key authentication, either the
    // canonical name of the remote host or its IP address must be present in
    // the comma-separated list of patterns.  See PATTERNS in ssh_config(5) for
    // more information on patterns.

    // In addition to the wildcard matching that may be applied to hostnames or
    // addresses, a from stanza may match IP addresses using CIDR
    // address/masklen notation.

    // The purpose of this option is to optionally increase security: public key
    // authentication by itself does not trust the network or name servers or
    // anything (but the key); however, if somebody somehow steals the key, the
    // key permits an intruder to log in from anywhere in the world.  This
    // additional option makes using a stolen key more difficult (name servers
    // and/or routers would have to be compromised in addition to just the key).
    STANDARD_OPTION_FROM = 6;

    //  Forbids authentication agent forwarding when this key is used for
    //  authentication.
    STANDARD_OPTION_NO_AGENT_FORWARDING = 7;

    //  Forbids TCP forwarding when this key is used for authentication.  Any
    //  port forward requests by the client will return an error.  This might be
    //  used, e.g. in connection with the command option.
    STANDARD_OPTION_NO_PORT_FORWARDING = 8;

    // Prevents tty allocation (a request to allocate a pty will fail).
    STANDARD_OPTION_NO_PTY = 9;

    //  Disables execution of ~/.ssh/rc.
    STANDARD_OPTION_NO_USER_RC = 10;

    //  Forbids X11 forwarding when this key is used for authentication.  Any
    //  X11 forward requests by the client will return an error.
    STANDARD_OPTION_NO_X11_FORWARDING = 11;

    //  Limit remote port forwarding with the ssh(1) -R option such that it may
    //  only listen on the specified host (optional) and port.  IPv6 addresses
    //  can be specified by enclosing the address in square brackets.  Multiple
    //  permitlisten options may be applied separated by commas.  Hostnames may
    //  include wildcards as described in the PATTERNS section in ssh_config(5).
    //  A port specification of * matches any port. Note that the setting of
    //  GatewayPorts may further restrict listen addresses.  Note that ssh(1)
    //  will send a hostname of “localhost” if a listen host was not specified
    //  when the forwarding was requested, and that this name is treated
    //  differently to the explicit localhost addresses “127.0.0.1” and “::1”.
    STANDARD_OPTION_PERMITLISTEN = 12;

    //  Limit local port forwarding with the ssh(1) -L option such that it may
    //  only connect to the specified host and port.  IPv6 addresses can be
    //  specified by enclosing the address in square brackets.  Multiple
    //  permitopen options may be applied separated by commas.  No pattern
    //  matching or name lookup is performed on the specified hostnames, they
    //  must be literal host names and/or addresses.  A port specification of *
    //  matches any port.
    STANDARD_OPTION_PERMITOPEN = 13;

    // Enable port forwarding previously disabled by the restrict option.
    STANDARD_OPTION_PORT_FORWARDING = 14;

    //  On a cert-authority line, specifies allowed principals for certificate
    //  authentication as a comma-separated list.  At least one name from the
    //  list must appear in the certificate's list of principals for the
    //  certificate to be accepted. This option is ignored for keys that are not
    //  marked as trusted certificate signers using the cert-authority option.
    STANDARD_OPTION_PRINCIPALS = 15;

    // Permits tty allocation previously disabled by the restrict option.
    STANDARD_OPTION_PTY = 16;

    //  Do not require demonstration of user presence for signatures made using
    //  this key. This option only makes sense for the FIDO authenticator
    //  algorithms ecdsa-sk and ed25519-sk.
    STANDARD_OPTION_NO_TOUCH_REQUIRED = 17;

    //  Require that signatures made using this key attest that they verified
    //  the user, e.g. via a PIN.  This option only makes sense for the FIDO
    //  authenticator algorithms ecdsa-sk and ed25519-sk.
    STANDARD_OPTION_VERIFY_REQUIRED = 18;

    //  Enable all restrictions, i.e. disable port, agent and X11 forwarding, as
    //  well as disabling PTY allocation and execution of ~/.ssh/rc.  If any
    //  future restriction capabilities are added to authorized_keys files they
    //  will be included in this set.
    STANDARD_OPTION_RESTRICT = 19;

    //  Force a tun(4) device on the server.  Without this option, the next
    //  available device will be used if the client requests a tunnel.
    STANDARD_OPTION_TUNNEL = 20;

    //  Enables execution of ~/.ssh/rc previously disabled by the restrict
    //  option.
    STANDARD_OPTION_USER_RC = 21;

    //  Permits X11 forwarding previously disabled by the restrict option.
    STANDARD_OPTION_X11_FORWARDING = 22;
  }

  oneof key {
    string name = 1;
    StandardOption id = 2;
  }
  string value = 3;
}

// Key encryption type.
enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  KEY_TYPE_ECDSA_P_256 = 1;
  KEY_TYPE_ECDSA_P_521 = 2;
  KEY_TYPE_ED25519 = 3;
  KEY_TYPE_RSA_2048 = 4;
  KEY_TYPE_RSA_4096 = 5;
}

message AccountCredentials {
  message AuthorizedKey {
    bytes authorized_key = 1;
    // Options specified for this authorized key.
    repeated Option options = 2;
    // Encryption mode for entry.
    KeyType key_type = 3;
    // An optional description of the key.
    string description = 4;
  }

  // The system role account name (e.g. root). This account must exist.
  string account = 1;
  // `authorized_keys` specifies zero or more SSH keys that are permitted for
  // the system role.
  // If zero SSH keys are specified, currently configured SSH keys for the user
  // will be cleared from configuration.
  repeated AuthorizedKey authorized_keys = 2;
  // `version` contains versioning information that is controlled by
  // the credential manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the device credential service).  Credential managers
  // should choose version strings as discrete as possible to ease alert
  // generation.
  // Also, this version string must be persisted by the device for preservation
  // across system reboots / cold-starts.
  string version = 3;
  // `created_on` contains information when the credentials were created.
  // This information is controlled by the credential manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device credential
  // service).  Credential managers should use the timestamp of the moment when
  // credential was created, not the time when the credential is pushed to
  // a particular device).
  // Also, this timestamp must be persisted by the device for preservation
  // across system reboots / cold-starts.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT, a.k.a. unix epoch.
  uint64 created_on = 4;
}

message AuthorizedKeysResponse {
}

message AuthorizedUsersRequest {
  // A list of policies that are to be applied on the SSH service on
  // the network element.
  // Multiple policies MAY be specified to allow for multiple
  // system roles, or specific user restrictions to be described.
  repeated UserPolicy policies = 1;
}

message UserPolicy {
  message SshAuthorizedPrincipals {
    // List of zero or more system users to authorized principal mapping for
    // certificate authentication.
    // If no authorized principals are specified, currently configured
    // authorized principals for the user will be cleared from configuration.
    repeated SshAuthorizedPrincipal authorized_principals = 2;
  }
  message SshAuthorizedPrincipal {
    string authorized_user = 1;
    // Options specified for this authorized user.
    repeated Option options = 2;
  }

  // The system role account name (e.g. root). This account must exist.
  string account = 1;
  // How the system authorizes users, either by way of a hard-coded repeated
  // SshAuthorizedPrincipal (authorized_principals) or through an
  // AuthorizedUserTool enum.

  // Mapping of system user to authorized principals.
  SshAuthorizedPrincipals authorized_principals = 2;

  // `version` contains versioning information that is controlled by
  // the credential manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the device credential service).  Credential managers
  // should choose version strings as discrete as possible to ease alert
  // generation.
  // Also, this version string must be persisted by the device for preservation
  // across system reboots / cold-starts.
  string version = 4;
  // `created_on` contains information when the credentials were created.
  // This information is controlled by the credential manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device credential
  // service).  Credential managers should use the timestamp of the moment when
  // credential was created, not the time when the credential is pushed to
  // a particular device).
  // Also, this timestamp must be persisted by the device for preservation
  // across system reboots / cold-starts.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT, a.k.a. unix epoch.
  uint64 created_on = 5;
}

message AuthorizedUsersResponse {
}

message PasswordRequest {
  message CryptoHash {
    // Hash type's
    enum HashType {
      HASH_TYPE_UNSPECIFIED = 0;
      HASH_TYPE_CRYPT_MD5 = 1;
      HASH_TYPE_CRYPT_SHA_2_512 = 2;
    }
    // Specifies the hash type used and value
    HashType hash_type = 1;
    string hash_value = 2;
  }

  message Password {
    oneof value {
      string plaintext = 1;
      CryptoHash crypto_hash = 2;
    }
  }

  message Account {
    // The system role account name (e.g. root). This account must exist.
    string account = 1;
    Password password = 2;
    // `version` contains versioning information that is controlled by
    // the credential manager and reported as-is by the telemetry reporting
    // system (ie, transparent to the device credential service).  Credential
    // managers should choose version strings as discrete as possible to ease
    // alert generation.
    // Also, this version string must be persisted by the device for
    // preservation across system reboots / cold-starts.
    string version = 3;
    // `created_on` contains information when the credentials were created.
    // This information is controlled by the credential manager and reported
    // as-is by the telemetry reporting system (ie, transparent to the device
    // credential service).  Credential managers should use the timestamp of
    // the moment when credential was created, not the time when the credential
    // is pushed to a particular device).
    // Also, this timestamp must be persisted by the device for preservation
    // across system reboots / cold-starts.
    // `created_on` is a timestamp: the number of seconds since
    // January 1st, 1970 00:00:00 GMT, a.k.a. unix epoch.
    uint64 created_on = 4;
  }
  repeated Account accounts = 1;
}

message PasswordResponse {
}

//
// Messages related to RotateHostParameters RPC.
//

message RotateHostParametersRequest {
  oneof request {
    CaPublicKeyRequest ssh_ca_public_key = 1;
    ServerKeysRequest server_keys = 2;
    FinalizeRequest finalize = 3;
    GenerateKeysRequest generate_keys = 4;
    AllowedAuthenticationRequest authentication_allowed = 5;
    AuthorizedPrincipalCheckRequest authorized_principal_check = 6;
    GlomeRequest glome = 7;
  }
}

message RotateHostParametersResponse {
  oneof response {
    CaPublicKeyResponse ssh_ca_public_key = 1;
    ServerKeysResponse server_keys = 2;
    GenerateKeysResponse generate_keys = 3;
    AllowedAuthenticationResponse authentication_allowed = 4;
    AuthorizedPrincipalCheckResponse authorized_principal_check = 5;
    GlomeResponse glome = 6;
  }
}

// KeyGen specifies the valid types of keys and their lengths that
// can be used.
enum KeyGen {
  KEY_GEN_SSH_KEY_UNSPECIFIED = 0;
  KEY_GEN_SSH_KEY_TYPE_RSA_2048 = 1;
  KEY_GEN_SSH_KEY_TYPE_ECDSA_P_256 = 2;
  KEY_GEN_SSH_KEY_TYPE_ECDSA_P_521 = 3;
  KEY_GEN_SSH_KEY_TYPE_EDDSA_ED25519 = 4;
  KEY_GEN_SSH_KEY_TYPE_RSA_4096 = 5;
}

// A request to ask the target if it can generate key pairs
message CanGenerateKeyRequest {
  KeyGen key_params = 1;
}

// Response from the target whether it can generate the key pairs
// for the given key specification
message CanGenerateKeyResponse {
  bool can_generate = 1;
}

message PublicKey {
  // OpenSSH-formatted.
  bytes public_key = 1;
  // Encryption mode for entry
  KeyType key_type = 2;
  // An optional description of the key
  string description = 3;
}

enum AuthenticationType {
  AUTHENTICATION_TYPE_UNSPECIFIED = 0;
  AUTHENTICATION_TYPE_PASSWORD = 1;
  AUTHENTICATION_TYPE_PUBKEY = 2;
  AUTHENTICATION_TYPE_KBDINTERACTIVE = 3;
}

message CaPublicKeyRequest {
  // Certificate Authority public keys to be used to verify certificates
  // presented by clients during connection establishment.
  // OpenSSH-formatted.
  repeated PublicKey ssh_ca_public_keys = 1;
  // `version` contains versioning information that is controlled by
  // the credential manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the device credential service).  Credential managers
  // should choose version strings as discrete as possible to ease alert
  // generation.
  // Also, this version string must be persisted by
  // the device for preservation across system reboots / cold-starts.
  string version = 2;
  // `created_on` contains information when the credentials were created.
  // This information is controlled by the credential manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device credential
  // service).  Credential managers should use the timestamp of the moment when
  // credential was created, not the time when the credential is pushed to
  // a particular device).
  // Also, this timestamp must be persisted by the device for preservation
  // across system reboots / cold-starts.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT, a.k.a. unix epoch.
  uint64 created_on = 3;
}

message CaPublicKeyResponse {
}

// TOOL_UNSPECIFIED instructs removal of any previously configured authorized
// principals command from configuration
message AuthorizedPrincipalCheckRequest {
  enum Tool {
    TOOL_UNSPECIFIED = 0;
    TOOL_HIBA_DEFAULT = 1;
  }
  Tool tool = 1;
}

message AuthorizedPrincipalCheckResponse {
}

// Message setting glome parameters.
message GlomeRequest {
  bool enabled = 1;
  string key = 2;
  int32 key_version = 3;
  string url_prefix = 4;
}

message GlomeResponse {
}

// A request to generate a list of public/private key pairs based on the given
// key specification and return the list of generated public keys back.
// Any existing host keys will be rotated with the newly generated keys and
// added to config.
message GenerateKeysRequest {
  repeated KeyGen key_params = 1;
  // `version` contains versioning information that is controlled by
  // the credential manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the device credential service).  Credential managers
  // should choose version strings as discrete as possible to ease alert
  // generation (eg, for credentials sourced from a bundle, the timestamp of
  // the bundle should be used but not the time when the credential is pushed to
  // a particular switch).  Also, such version strings should be persisted by
  // the devices onto non-volatile memory for preservation across system
  // reboots.
  string version = 2;
  // `created_on` contains information when the credentials were created.
  // This information is controlled by the credential manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device credential
  // service).  Credential managers should use the timestamp of the moment when
  // credential was created, not the time when the credential is pushed to
  // a particular switch).
  // Also, this timestamp should be persisted by the devices onto non-volatile
  // memory for preservation across system reboots.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT.
  uint64 created_on = 3;
}

// Response from the target which has the list of generated public keys.
message GenerateKeysResponse {
  repeated PublicKey public_keys = 1;
}

// List of allowable authentication types such as Pubkey or Password.
message AllowedAuthenticationRequest {
  repeated AuthenticationType authentication_types = 1;
}

message AllowedAuthenticationResponse {
}

message ServerKeysRequest {
  message AuthenticationArtifacts {
    // Private key to be used by the SSH server.
    // OpenSSH-formatted.
    bytes private_key = 1;
    // SSH Certificate (server's public key signed by the Certificate Authority)
    // to be used by the SSH server.
    // OpenSSH-formatted.
    bytes certificate = 2;
  }
  repeated AuthenticationArtifacts auth_artifacts = 1;
  // `version` contains versioning information that is controlled by
  // the credential manager and reported as-is by the telemetry reporting system
  // (ie, transparent to the device credential service).  Credential managers
  // should choose version strings as discrete as possible to ease alert
  // generation.
  // Also, this version string must be persisted by
  // the device for preservation across system reboots / cold-starts.
  string version = 2;
  // `created_on` contains information when the credentials were created.
  // This information is controlled by the credential manager and reported as-is
  // by the telemetry reporting system (ie, transparent to the device credential
  // service).  Credential managers should use the timestamp of the moment when
  // credential was created, not the time when the credential is pushed to
  // a particular device).
  // Also, this timestamp must be persisted by the device for preservation
  // across system reboots / cold-starts.
  // `created_on` is a timestamp: the number of seconds since
  // January 1st, 1970 00:00:00 GMT, a.k.a. unix epoch.
  uint64 created_on = 3;
}

message ServerKeysResponse {
}

message FinalizeRequest {
}

message GetPublicKeysRequest {
}

message GetPublicKeysResponse {
  // Return all currently configured keys on host.
  repeated PublicKey public_keys = 1;
}
