// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: github.com/openconfig/gnsi/credentialz/credentialz.proto

package credentialz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Credentialz_RotateAccountCredentials_FullMethodName = "/gnsi.credentialz.v1.Credentialz/RotateAccountCredentials"
	Credentialz_RotateHostParameters_FullMethodName     = "/gnsi.credentialz.v1.Credentialz/RotateHostParameters"
	Credentialz_CanGenerateKey_FullMethodName           = "/gnsi.credentialz.v1.Credentialz/CanGenerateKey"
	Credentialz_GetPublicKeys_FullMethodName            = "/gnsi.credentialz.v1.Credentialz/GetPublicKeys"
)

// CredentialzClient is the client API for Credentialz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialzClient interface {
	RotateAccountCredentials(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse], error)
	RotateHostParameters(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateHostParametersRequest, RotateHostParametersResponse], error)
	CanGenerateKey(ctx context.Context, in *CanGenerateKeyRequest, opts ...grpc.CallOption) (*CanGenerateKeyResponse, error)
	GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error)
}

type credentialzClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialzClient(cc grpc.ClientConnInterface) CredentialzClient {
	return &credentialzClient{cc}
}

func (c *credentialzClient) RotateAccountCredentials(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Credentialz_ServiceDesc.Streams[0], Credentialz_RotateAccountCredentials_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Credentialz_RotateAccountCredentialsClient = grpc.BidiStreamingClient[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse]

func (c *credentialzClient) RotateHostParameters(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateHostParametersRequest, RotateHostParametersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Credentialz_ServiceDesc.Streams[1], Credentialz_RotateHostParameters_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RotateHostParametersRequest, RotateHostParametersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Credentialz_RotateHostParametersClient = grpc.BidiStreamingClient[RotateHostParametersRequest, RotateHostParametersResponse]

func (c *credentialzClient) CanGenerateKey(ctx context.Context, in *CanGenerateKeyRequest, opts ...grpc.CallOption) (*CanGenerateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanGenerateKeyResponse)
	err := c.cc.Invoke(ctx, Credentialz_CanGenerateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialzClient) GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicKeysResponse)
	err := c.cc.Invoke(ctx, Credentialz_GetPublicKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialzServer is the server API for Credentialz service.
// All implementations should embed UnimplementedCredentialzServer
// for forward compatibility.
type CredentialzServer interface {
	RotateAccountCredentials(grpc.BidiStreamingServer[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse]) error
	RotateHostParameters(grpc.BidiStreamingServer[RotateHostParametersRequest, RotateHostParametersResponse]) error
	CanGenerateKey(context.Context, *CanGenerateKeyRequest) (*CanGenerateKeyResponse, error)
	GetPublicKeys(context.Context, *GetPublicKeysRequest) (*GetPublicKeysResponse, error)
}

// UnimplementedCredentialzServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCredentialzServer struct{}

func (UnimplementedCredentialzServer) RotateAccountCredentials(grpc.BidiStreamingServer[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RotateAccountCredentials not implemented")
}
func (UnimplementedCredentialzServer) RotateHostParameters(grpc.BidiStreamingServer[RotateHostParametersRequest, RotateHostParametersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RotateHostParameters not implemented")
}
func (UnimplementedCredentialzServer) CanGenerateKey(context.Context, *CanGenerateKeyRequest) (*CanGenerateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanGenerateKey not implemented")
}
func (UnimplementedCredentialzServer) GetPublicKeys(context.Context, *GetPublicKeysRequest) (*GetPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKeys not implemented")
}
func (UnimplementedCredentialzServer) testEmbeddedByValue() {}

// UnsafeCredentialzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialzServer will
// result in compilation errors.
type UnsafeCredentialzServer interface {
	mustEmbedUnimplementedCredentialzServer()
}

func RegisterCredentialzServer(s grpc.ServiceRegistrar, srv CredentialzServer) {
	// If the following call pancis, it indicates UnimplementedCredentialzServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Credentialz_ServiceDesc, srv)
}

func _Credentialz_RotateAccountCredentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CredentialzServer).RotateAccountCredentials(&grpc.GenericServerStream[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Credentialz_RotateAccountCredentialsServer = grpc.BidiStreamingServer[RotateAccountCredentialsRequest, RotateAccountCredentialsResponse]

func _Credentialz_RotateHostParameters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CredentialzServer).RotateHostParameters(&grpc.GenericServerStream[RotateHostParametersRequest, RotateHostParametersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Credentialz_RotateHostParametersServer = grpc.BidiStreamingServer[RotateHostParametersRequest, RotateHostParametersResponse]

func _Credentialz_CanGenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanGenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialzServer).CanGenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentialz_CanGenerateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialzServer).CanGenerateKey(ctx, req.(*CanGenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Credentialz_GetPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialzServer).GetPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Credentialz_GetPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialzServer).GetPublicKeys(ctx, req.(*GetPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Credentialz_ServiceDesc is the grpc.ServiceDesc for Credentialz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Credentialz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.credentialz.v1.Credentialz",
	HandlerType: (*CredentialzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanGenerateKey",
			Handler:    _Credentialz_CanGenerateKey_Handler,
		},
		{
			MethodName: "GetPublicKeys",
			Handler:    _Credentialz_GetPublicKeys_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RotateAccountCredentials",
			Handler:       _Credentialz_RotateAccountCredentials_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RotateHostParameters",
			Handler:       _Credentialz_RotateHostParameters_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnsi/credentialz/credentialz.proto",
}
