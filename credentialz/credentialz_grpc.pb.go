// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package credentialz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialzClient is the client API for Credentialz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialzClient interface {
	// RotateAccountCredentials allows to specify an authentication SSH service
	// policy to the network element. The policy, if valid, replaces the existing
	// policy.
	//
	// Canonical error codes are to be used as responses. See
	// https://grpc.io/docs/guides/error/ for more details.
	//
	// Allows for setting the SSH authorized keys list for a system account
	// (i.e. the set of SSH keys that are allows to login to the account).
	// Also allows to set the SSH authorized users list for a system account
	// (i.e. the set of SSH certificate users accepted for login to the account).
	// Moreover, it allows to change the system account's password.
	//
	// Case 1: Both the credentials and authorized usernames are set.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Credentials are replaced
	//     Client -----> AuthorizedKeysRequest----> Target
	//     Client <----- AuthorizedKeysResponse <--- Target
	//
	//   Step 3: Authorized username lists are replaced
	//     Client -----> AuthorizedUsersRequest----> Target
	//     Client <----- AuthorizedUsersResponse <--- Target
	//
	//   Step 4 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 5: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	//
	// Case 2: Only the credentials are updated.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Credentials are replaced
	//     Client -----> AuthorizedKeysRequest----> Target
	//     Client <----- AuthorizedKeysResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	//
	// Case 3: Only authorized usernames are updated.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: New authorized username lists are replaced
	//     Client -----> AuthorizedUsersRequest----> Target
	//     Client <----- AuthorizedUsersResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	//
	// Case 4: Passwords are updated.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Account passwords are replaced
	//     Client -----> PasswordRequest----> Target
	//     Client <----- PasswordResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new passwords and validates that they "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the passwords.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	RotateAccountCredentials(ctx context.Context, opts ...grpc.CallOption) (Credentialz_RotateAccountCredentialsClient, error)
	// RotateHostCredentials() allows for changing both the Certificate Authority
	// public key as well as the keys and the certificate used by the SSH server.
	// The CA public key key is used to verify certificates presented by
	// the client to the SSH server during connection establishment.
	// The server's public and private keys are required during regular operations
	// of the SSH server.
	// The SSH server's certificate is used by the client to authenticate
	// the server during connection establishemnt process. This certificate might
	// be signed by the same Certificate Authority that has signed clients'
	// certificates.
	//
	// Use Case 1: Update the CA public key.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateHostCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Replace the CA public key
	//     Client -----> CaPublicKeyRequest----> Target
	//     Client <----- CaPublicKeyResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verfied, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	// Use Case 2: Update the server's keys.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateHostCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Replace all server keys
	//     Client -----> ServerKeysRequest----> Target
	//     Client <----- ServerKeysResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verfied, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	RotateHostCredentials(ctx context.Context, opts ...grpc.CallOption) (Credentialz_RotateHostCredentialsClient, error)
}

type credentialzClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialzClient(cc grpc.ClientConnInterface) CredentialzClient {
	return &credentialzClient{cc}
}

func (c *credentialzClient) RotateAccountCredentials(ctx context.Context, opts ...grpc.CallOption) (Credentialz_RotateAccountCredentialsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Credentialz_ServiceDesc.Streams[0], "/gnsi.credentialz.Credentialz/RotateAccountCredentials", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialzRotateAccountCredentialsClient{stream}
	return x, nil
}

type Credentialz_RotateAccountCredentialsClient interface {
	Send(*RotateAccountCredentialsRequest) error
	Recv() (*RotateAccountCredentialsResponse, error)
	grpc.ClientStream
}

type credentialzRotateAccountCredentialsClient struct {
	grpc.ClientStream
}

func (x *credentialzRotateAccountCredentialsClient) Send(m *RotateAccountCredentialsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *credentialzRotateAccountCredentialsClient) Recv() (*RotateAccountCredentialsResponse, error) {
	m := new(RotateAccountCredentialsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *credentialzClient) RotateHostCredentials(ctx context.Context, opts ...grpc.CallOption) (Credentialz_RotateHostCredentialsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Credentialz_ServiceDesc.Streams[1], "/gnsi.credentialz.Credentialz/RotateHostCredentials", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialzRotateHostCredentialsClient{stream}
	return x, nil
}

type Credentialz_RotateHostCredentialsClient interface {
	Send(*RotateHostCredentialsRequest) error
	Recv() (*RotateHostCredentialsResponse, error)
	grpc.ClientStream
}

type credentialzRotateHostCredentialsClient struct {
	grpc.ClientStream
}

func (x *credentialzRotateHostCredentialsClient) Send(m *RotateHostCredentialsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *credentialzRotateHostCredentialsClient) Recv() (*RotateHostCredentialsResponse, error) {
	m := new(RotateHostCredentialsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CredentialzServer is the server API for Credentialz service.
// All implementations must embed UnimplementedCredentialzServer
// for forward compatibility
type CredentialzServer interface {
	// RotateAccountCredentials allows to specify an authentication SSH service
	// policy to the network element. The policy, if valid, replaces the existing
	// policy.
	//
	// Canonical error codes are to be used as responses. See
	// https://grpc.io/docs/guides/error/ for more details.
	//
	// Allows for setting the SSH authorized keys list for a system account
	// (i.e. the set of SSH keys that are allows to login to the account).
	// Also allows to set the SSH authorized users list for a system account
	// (i.e. the set of SSH certificate users accepted for login to the account).
	// Moreover, it allows to change the system account's password.
	//
	// Case 1: Both the credentials and authorized usernames are set.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Credentials are replaced
	//     Client -----> AuthorizedKeysRequest----> Target
	//     Client <----- AuthorizedKeysResponse <--- Target
	//
	//   Step 3: Authorized username lists are replaced
	//     Client -----> AuthorizedUsersRequest----> Target
	//     Client <----- AuthorizedUsersResponse <--- Target
	//
	//   Step 4 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 5: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	//
	// Case 2: Only the credentials are updated.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Credentials are replaced
	//     Client -----> AuthorizedKeysRequest----> Target
	//     Client <----- AuthorizedKeysResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	//
	// Case 3: Only authorized usernames are updated.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: New authorized username lists are replaced
	//     Client -----> AuthorizedUsersRequest----> Target
	//     Client <----- AuthorizedUsersResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	//
	// Case 4: Passwords are updated.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateAccountCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Account passwords are replaced
	//     Client -----> PasswordRequest----> Target
	//     Client <----- PasswordResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new passwords and validates that they "work".
	//     Once verified, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the passwords.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	RotateAccountCredentials(Credentialz_RotateAccountCredentialsServer) error
	// RotateHostCredentials() allows for changing both the Certificate Authority
	// public key as well as the keys and the certificate used by the SSH server.
	// The CA public key key is used to verify certificates presented by
	// the client to the SSH server during connection establishment.
	// The server's public and private keys are required during regular operations
	// of the SSH server.
	// The SSH server's certificate is used by the client to authenticate
	// the server during connection establishemnt process. This certificate might
	// be signed by the same Certificate Authority that has signed clients'
	// certificates.
	//
	// Use Case 1: Update the CA public key.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateHostCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Replace the CA public key
	//     Client -----> CaPublicKeyRequest----> Target
	//     Client <----- CaPublicKeyResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verfied, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	// Use Case 2: Update the server's keys.
	//
	//   Step 1: Start the stream
	//     Client <---- RotateHostCredentials() RPC stream begin ------> Target
	//
	//   Step 2: Replace all server keys
	//     Client -----> ServerKeysRequest----> Target
	//     Client <----- ServerKeysResponse <--- Target
	//
	//   Step 3 (optional): Test/Validation by the client.
	//     During this step client attempts to create a new connection to
	//     the target using the new certificates/keys and validates that
	//     the certificates/keys "work".
	//     Once verfied, the client then proceeds to finalize the rotation.
	//     If the new connection cannot be completed the client will cancel the
	//     RPC thereby forcing the target to rollback all the certificates/keys.
	//
	//   Step 4: Final commit.
	//     Client -----> FinalizeRequest----> Target
	//
	RotateHostCredentials(Credentialz_RotateHostCredentialsServer) error
	mustEmbedUnimplementedCredentialzServer()
}

// UnimplementedCredentialzServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialzServer struct {
}

func (UnimplementedCredentialzServer) RotateAccountCredentials(Credentialz_RotateAccountCredentialsServer) error {
	return status.Errorf(codes.Unimplemented, "method RotateAccountCredentials not implemented")
}
func (UnimplementedCredentialzServer) RotateHostCredentials(Credentialz_RotateHostCredentialsServer) error {
	return status.Errorf(codes.Unimplemented, "method RotateHostCredentials not implemented")
}
func (UnimplementedCredentialzServer) mustEmbedUnimplementedCredentialzServer() {}

// UnsafeCredentialzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialzServer will
// result in compilation errors.
type UnsafeCredentialzServer interface {
	mustEmbedUnimplementedCredentialzServer()
}

func RegisterCredentialzServer(s grpc.ServiceRegistrar, srv CredentialzServer) {
	s.RegisterService(&Credentialz_ServiceDesc, srv)
}

func _Credentialz_RotateAccountCredentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CredentialzServer).RotateAccountCredentials(&credentialzRotateAccountCredentialsServer{stream})
}

type Credentialz_RotateAccountCredentialsServer interface {
	Send(*RotateAccountCredentialsResponse) error
	Recv() (*RotateAccountCredentialsRequest, error)
	grpc.ServerStream
}

type credentialzRotateAccountCredentialsServer struct {
	grpc.ServerStream
}

func (x *credentialzRotateAccountCredentialsServer) Send(m *RotateAccountCredentialsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *credentialzRotateAccountCredentialsServer) Recv() (*RotateAccountCredentialsRequest, error) {
	m := new(RotateAccountCredentialsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Credentialz_RotateHostCredentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CredentialzServer).RotateHostCredentials(&credentialzRotateHostCredentialsServer{stream})
}

type Credentialz_RotateHostCredentialsServer interface {
	Send(*RotateHostCredentialsResponse) error
	Recv() (*RotateHostCredentialsRequest, error)
	grpc.ServerStream
}

type credentialzRotateHostCredentialsServer struct {
	grpc.ServerStream
}

func (x *credentialzRotateHostCredentialsServer) Send(m *RotateHostCredentialsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *credentialzRotateHostCredentialsServer) Recv() (*RotateHostCredentialsRequest, error) {
	m := new(RotateHostCredentialsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Credentialz_ServiceDesc is the grpc.ServiceDesc for Credentialz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Credentialz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.credentialz.Credentialz",
	HandlerType: (*CredentialzServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RotateAccountCredentials",
			Handler:       _Credentialz_RotateAccountCredentials_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RotateHostCredentials",
			Handler:       _Credentialz_RotateHostCredentials_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "credentialz/credentialz.proto",
}
