// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: github.com/openconfig/gnsi/acctz/acctz.proto

package acctz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Acctz_RecordSubscribe_FullMethodName = "/gnsi.acctz.v1.Acctz/RecordSubscribe"
)

// AcctzClient is the client API for Acctz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcctzClient interface {
	RecordSubscribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecordRequest, RecordResponse], error)
}

type acctzClient struct {
	cc grpc.ClientConnInterface
}

func NewAcctzClient(cc grpc.ClientConnInterface) AcctzClient {
	return &acctzClient{cc}
}

func (c *acctzClient) RecordSubscribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RecordRequest, RecordResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Acctz_ServiceDesc.Streams[0], Acctz_RecordSubscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecordRequest, RecordResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Acctz_RecordSubscribeClient = grpc.BidiStreamingClient[RecordRequest, RecordResponse]

// AcctzServer is the server API for Acctz service.
// All implementations should embed UnimplementedAcctzServer
// for forward compatibility.
type AcctzServer interface {
	RecordSubscribe(grpc.BidiStreamingServer[RecordRequest, RecordResponse]) error
}

// UnimplementedAcctzServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAcctzServer struct{}

func (UnimplementedAcctzServer) RecordSubscribe(grpc.BidiStreamingServer[RecordRequest, RecordResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RecordSubscribe not implemented")
}
func (UnimplementedAcctzServer) testEmbeddedByValue() {}

// UnsafeAcctzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcctzServer will
// result in compilation errors.
type UnsafeAcctzServer interface {
	mustEmbedUnimplementedAcctzServer()
}

func RegisterAcctzServer(s grpc.ServiceRegistrar, srv AcctzServer) {
	// If the following call pancis, it indicates UnimplementedAcctzServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Acctz_ServiceDesc, srv)
}

func _Acctz_RecordSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AcctzServer).RecordSubscribe(&grpc.GenericServerStream[RecordRequest, RecordResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Acctz_RecordSubscribeServer = grpc.BidiStreamingServer[RecordRequest, RecordResponse]

// Acctz_ServiceDesc is the grpc.ServiceDesc for Acctz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acctz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.acctz.v1.Acctz",
	HandlerType: (*AcctzServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordSubscribe",
			Handler:       _Acctz_RecordSubscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnsi/acctz/acctz.proto",
}

const (
	AcctzStream_RecordSubscribe_FullMethodName = "/gnsi.acctz.v1.AcctzStream/RecordSubscribe"
)

// AcctzStreamClient is the client API for AcctzStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcctzStreamClient interface {
	RecordSubscribe(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RecordResponse], error)
}

type acctzStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewAcctzStreamClient(cc grpc.ClientConnInterface) AcctzStreamClient {
	return &acctzStreamClient{cc}
}

func (c *acctzStreamClient) RecordSubscribe(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RecordResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AcctzStream_ServiceDesc.Streams[0], AcctzStream_RecordSubscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RecordRequest, RecordResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AcctzStream_RecordSubscribeClient = grpc.ServerStreamingClient[RecordResponse]

// AcctzStreamServer is the server API for AcctzStream service.
// All implementations should embed UnimplementedAcctzStreamServer
// for forward compatibility.
type AcctzStreamServer interface {
	RecordSubscribe(*RecordRequest, grpc.ServerStreamingServer[RecordResponse]) error
}

// UnimplementedAcctzStreamServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAcctzStreamServer struct{}

func (UnimplementedAcctzStreamServer) RecordSubscribe(*RecordRequest, grpc.ServerStreamingServer[RecordResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RecordSubscribe not implemented")
}
func (UnimplementedAcctzStreamServer) testEmbeddedByValue() {}

// UnsafeAcctzStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcctzStreamServer will
// result in compilation errors.
type UnsafeAcctzStreamServer interface {
	mustEmbedUnimplementedAcctzStreamServer()
}

func RegisterAcctzStreamServer(s grpc.ServiceRegistrar, srv AcctzStreamServer) {
	// If the following call pancis, it indicates UnimplementedAcctzStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AcctzStream_ServiceDesc, srv)
}

func _AcctzStream_RecordSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AcctzStreamServer).RecordSubscribe(m, &grpc.GenericServerStream[RecordRequest, RecordResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AcctzStream_RecordSubscribeServer = grpc.ServerStreamingServer[RecordResponse]

// AcctzStream_ServiceDesc is the grpc.ServiceDesc for AcctzStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcctzStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnsi.acctz.v1.AcctzStream",
	HandlerType: (*AcctzStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordSubscribe",
			Handler:       _AcctzStream_RecordSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnsi/acctz/acctz.proto",
}
