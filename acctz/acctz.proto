// Accounting for gNxI operations.
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// A protocol buffer definition used for logging events reported from a
// gNMI server. This file assumes the following nomenclature:
//
//   o A System is a network device or other gN*I enabled entity creating
//     accounting Record()s.
//
//   o A remote Collector which either connects to a System to retrieve
//     messages streamed in a realtime fashion, or which receives a
//     connection from a System to receive accounting Record()s.
//
// Events recorded are from shell/vendor-CLI and gRPC based connections.

syntax = "proto3";

package gnsi.acctz.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "github.com/openconfig/gnsi/version/version.proto";

option go_package = "github.com/openconfig/gnsi/acctz";

// The gRPC-level Accounting service exported by targets.

// The Accounting service describes the interfaces between a System
// and a remote Collector that collect data about what changes were attempted
// or completed on that System through standard interfaces to the System.
//
// Accounting messages may be collected by connecting to the Accounting
// service (Acctz) on a System from a Collector.

service Acctz {

  // RecordSubscribe returns a stream of Record()s sent from the system to
  // a Collector, when the Collector connects to the Acctz service.
  //
  // A RecordRequest contains a timestamp indicating the last message
  // received. The Collector's expectation is that all messages after the
  // timestamp will be streamed.  If this results in no records to send, the
  // server should return an OK error and zero records.
  //
  // Any history for replay of records or size of the history is subject to
  // implementation support and may or may not be configurable.  The history
  // should be global to the device or virtual tenant, such that new and
  // re-connecting clients can access the history.
  //
  // At connection initiation the Collector may send either the current
  // time or a zero time. A zero time indicates that all messages stored on the
  // System should be sent to the Collector. A current time indicates that only
  // new messages should be sent.
  //
  // The Collector must send a RecordRequest at least every 60 seconds, in
  // order to signal its liveliness to the system. Failure to send a
  // RecordRequest for more than 120 seconds will cause the connection to be
  // reset.
  rpc RecordSubscribe(stream RecordRequest) returns (stream RecordResponse);
}

// SessionInfo is the session identifier that identifies the context
// in which service was executed.
message SessionInfo {
  // Information for 5 tuple of the client connection (TCP/UDP).

  // Address of the local end of the socket
  string local_address = 1;
  // Port of the local end of the socket
  uint32 local_port = 2;
  // Address of the remote end of the socket
  string remote_address = 3;
  // Port of the remote end of the socket
  uint32 remote_port = 4;
  // IP Protocol Number - eg: 6 (TCP), 17 (UDP)
  // See: http://www.iana.org/assignments/protocol-numbers
  uint32 ip_proto = 5;

  // For multiplexing multiple channels over a single connection
  // - multiple sessions over a single SSH connection
  // - multiple channels over a single gRPC connection
  string channel_id = 6;
}

// Details of authentication - for gRPC or shell/vendor-CLI.
message AuthDetail {
  // Identity string is used to identify the user that executed the
  // command. For instance, it could be the SPIFFE-ID in the case of
  // gRPC or unix-style user-name in the case of shell/vendor-CLI.
  string identity = 1;

  // Authentication status
  enum AuthenStatus {
    AUTHEN_STATUS_UNSPECIFIED = 0;
    AUTHEN_STATUS_PERMIT = 1;
    AUTHEN_STATUS_DENY = 2;
  }
  AuthenStatus status = 2;

  // In case of STATUS_DENY, cause for the deny
  string deny_cause = 3;
}

// Command details for shell/vendor-CLI
message CommandService {
  enum CmdServiceType {
    CMD_SERVICE_TYPE_UNSPECIFIED = 0;
    CMD_SERVICE_TYPE_CLI = 1;
    CMD_SERVICE_TYPE_HTTP = 2;		// Web UIs
    CMD_SERVICE_TYPE_RESTCONF = 3;
    CMD_SERVICE_TYPE_NETCONF = 4;
  }
  CmdServiceType service_type = 1;

  // The command that was executed.
  // For SHELL or CLI, if command abbreviation is supported, the command should
  // be expanded to its full name.  eg: 'sh' -> 'show'.
  string cmd = 2;

  // True, if truncation of cmd occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  bool cmd_istruncated = 4;

  // Arguments to a command above.
  // For SHELL or CLI, if command abbreviation is supported, the arguments
  // of the command lexicon that are known should be expanded to their full
  // names.  eg: 'sh ver det | gr foo' -> 'show version detail | grep foo'.
  // Arguments should be split on typical word delimiters or be multi-word
  // enclosed in grouping characters (eg: "hello world").
  repeated string cmd_args = 3;

  // True, if truncation of cmd_args occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  bool cmd_args_istruncated = 5;
}

// Command details for openconfig gNxI commands.
message GrpcService {
  enum GrpcServiceType {
    GRPC_SERVICE_TYPE_UNSPECIFIED = 0;
    GRPC_SERVICE_TYPE_GNMI = 1;
    GRPC_SERVICE_TYPE_GNOI = 2;
    GRPC_SERVICE_TYPE_GNSI = 3;
    // GRIBI records could be very verbose.
    // By default, the logging authorization
    // should keep GRIBI logging off.
    GRPC_SERVICE_TYPE_GRIBI = 4;
    GRPC_SERVICE_TYPE_P4RT = 5;		// P4-Runtime
  }
  GrpcServiceType service_type = 1;

  // rpc_name is the rpc to which the request was sent, examples:
  //   gnmi.Set()
  //   gnoi.os.Install()
  //   gnsi.cert.Rotate()
  string rpc_name = 2;

  // A string of bytes that are gRPC encoded. Best to decode using
  // PROTO_ANY.
  repeated google.protobuf.Any payloads = 3;

  // True, if truncation of payloads occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  // Truncation must only occur within a given API's message field (non
  // PROTO_ANY) and not break the boundaries of the protobuf message fields to
  // allow for proper deserialization.
  bool payload_istruncated = 5;
}

// An accounting record message is generated everytime the user types a
// shell/vendorCLI command or sends a gNxI request.
message RecordResponse {
  // Session information
  SessionInfo session_info = 1;

  // The time when the system recorded this event, represented as nanoseconds
  // since the unix epoch.
  google.protobuf.Timestamp timestamp = 2;

  // True, if the server's history does not include a message with the given
  // RecordRequest.timestamp or an older record, indicating that history
  // truncation has occurred relative to the timestamp reference point and
  // records might have been missed.
  // If RecordRequest.timestamp was not equal to a previously received
  // RecordResponse.timestamp received, instead randomly chosen, the Collector
  // can not know if it missed records.
  // If RecordRequest.timestamp = 0, this must be false.
  bool history_istruncated = 3;

  // Service request details of the accounting record.
  oneof service_request {
    CommandService cmd_service = 4;
    GrpcService grpc_service = 5;
  }

  // Authentication related details
  AuthDetail authen = 7;
}

// RecordRequest, requests a starting point for records to be sent to the
// caller.
// The receiver then can signal back to the sender periodic sync messages to
// acknowledge received records.
// The timestamp indicates the last processed Record at the caller.
message RecordRequest {
  // The time when the system recorded this event represented as nanoseconds
  // since the unix epoch.
  google.protobuf.Timestamp timestamp = 2;
}
