// Accounting for gNxI operations.
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// A protocol buffer definition used for logging events reported from a
// gNMI server. This file assumes the following nomenclature:
//
//   o A System is a network device or other gN*I enabled entity creating
//     accounting Record()s.
//
//   o A remote Collector which either connects to a System to retrieve
//     messages streamed in a realtime fashion, or which receives a
//     connection from a System to receive accounting Record()s.
//
// Events recorded are from shell/vendor-CLI and gRPC based connections.

syntax = "proto3";

package gnsi.acctz.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "github.com/openconfig/gnsi/version/version.proto";

option go_package = "github.com/openconfig/gnsi/acctz";

// The gRPC-level Accounting service exported by targets.

// The Accounting service describes the interfaces between a System
// and a remote Collector that collect data about what changes were attempted
// or completed on that System through standard interfaces to the System.
//
// Accounting messages may be collected by connecting to the Accounting
// service (Acctz) on a System from a Collector.

service Acctz {

  // RecordSubscribe returns a stream of Record()s sent from the system to
  // a Collector, when the Collector connects to the Acctz service.
  //
  // A RecordRequest contains a timestamp indicating the last message
  // received. The Collector's expectation is that all messages after the
  // timestamp will be streamed.  Any history for replay of records is subject
  // to the implementation support and may or may not be configurable.
  //
  // At connection initiation the Collector may send either the current
  // time or a zero time. A zero time indicates that all messages stored on the
  // System should be sent to the Collector. A current time indicates that only
  // new messages should be sent.
  //
  // The Collector must send a RecordRequest at least every 60 seconds, in
  // order to signal its liveliness to the system. Failure to send a
  // RecordRequest for more than 120 seconds will cause the connection to be
  // reset.
  rpc RecordSubscribe(stream RecordRequest) returns (stream RecordResponse);
}

// SessionInfo is the session identifier that identifies the context
// in which service was executed.
message SessionInfo {
  // system_address is the IP address(es) of the System sending the event.
  // In most cases this address is the Loopback, or Loopback equivalent,
  // on the System which is sending the messages to the Collector, and might
  // be specifically configured for gNxI (eg: gnxi source-address interface
  // loopback 0).
  // One per-address family (AF) might exist, all of which should be included
  // in this field.
  repeated string system_addresses = 1;

  // Information for 5 tuple for the gRPC client connection.  It is possible
  // for local_address and system_address to be the same, regardless both
  // must be populated.
  // layer4_proto is the OSI Transport layer protocol numnber, eg: 6 (TCP);
  // see http://www.iana.org/assignments/protocol-numbers
  uint32 layer4_proto = 2;
  string local_address = 7;
  uint32 local_port = 3;
  string remote_address = 4;
  uint32 remote_port = 5;

  // For multiplexing multiple channels over a single connection
  // - multiple CLI connections over single SSH
  // - multiple channels in a gRPC conncetion
  string channel_id = 6;
}

// Details of authentication - for gRPC or shell/vendor-CLI.
message AuthDetail {
  // Identity string is used to identify the user that executed the
  // command. For instance, it could be the spiffe-id in the case of
  // gRPC or unix-style user-name in the case of shell/vendor-CLI.
  string identity = 1;

  // Privilege level configured on the system.
  uint32 privilege_level = 2;

  // authentication status
  enum AuthenStatus {
    AUTHEN_STATUS_UNSPECIFIED = 0;
    AUTHEN_STATUS_PERMIT = 1;
    AUTHEN_STATUS_DENY = 2;
  }
  AuthenStatus status = 3;

  // In case of STATUS_DENY, cause for the deny
  string deny_cause = 4;
}

// Command details for shell/vendor-CLI
message CommandService {
  enum CmdServiceType {
    CMD_SERVICE_TYPE_UNSPECIFIED = 0;
    CMD_SERVICE_TYPE_SHELL = 1;
    CMD_SERVICE_TYPE_CLI = 2;
    CMD_SERVICE_TYPE_HTTP = 3;		// Web UIs
    CMD_SERVICE_TYPE_RESTCONF = 4;
    CMD_SERVICE_TYPE_NETCONF = 5;
  }
  CmdServiceType service_type = 1;

  // The command that was executed.
  // For SHELL or CLI, if command abbreviation is supported, the command should
  // be expanded to its full name.  eg: 'sh' -> 'show'.
  string cmd = 2;

  // True, if truncation of cmd occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  bool cmd_istruncated = 4;

  // Arguments to a command above.
  // For SHELL or CLI, if command abbreviation is supported, the arguments
  // of the command lexicon that are known should be expanded to their full
  // names.  eg: 'sh ver det | gr foo' -> 'show version detail | grep foo'.
  // Arguments should be split on typical word delimiters or be multi-word
  // enclosed in grouping characters (eg: "hello world").
  repeated string cmd_args = 3;

  // True, if truncation of cmd_args occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  bool cmd_args_istruncated = 5;
}

// Command details for openconfig gNxI commands.
message GrpcService {
  enum GrpcServiceType {
    GRPC_SERVICE_TYPE_UNSPECIFIED = 0;
    GRPC_SERVICE_TYPE_GNMI = 1;
    GRPC_SERVICE_TYPE_GNOI = 2;
    GRPC_SERVICE_TYPE_GNSI = 3;
    // GRIBI records could be very verbose.
    // By default, the logging authorization
    // should keep GRIBI logging off.
    GRPC_SERVICE_TYPE_GRIBI = 4;
    GRPC_SERVICE_TYPE_P4RT = 5;		// P4-Runtime
  }
  GrpcServiceType service_type = 1;

  // rpc_name is the rpc to which the request was sent, examples:
  //   gnmi.Set()
  //   gnoi.os.Install()
  //   gnsi.cert.Rotate()
  string rpc_name = 2;

  // A string of bytes that are gRPC encoded. Best to decode using
  // PROTO_ANY.
  repeated google.protobuf.Any payloads = 3;

  // True, if truncation of payloads occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  bool payload_istruncated = 5;

  // config_metadata can be used to track all set requests that were to be
  // applied atomically.
  string config_metadata = 4;

  // True, if truncation of config_metadata occurs due to an implementation
  // limitation in the originating service, any middleware, or the receiver.
  bool metadata_istruncated = 6;
}

// An accounting record message is generated everytime the user types a
// shell/vendorCLI command or sends a gNxI request.
message RecordResponse {
  // Session information
  SessionInfo session_info = 1;

  // The time when the system recorded this event, represented as nanoseconds
  // since the unix epoch.
  google.protobuf.Timestamp timestamp = 2;

  // Service request details of the accounting record.
  oneof service_request {
    CommandService cmd_service = 3;
    GrpcService grpc_service = 4;
  }

  // Service processing status at the time of event reporting.
  enum ServiceStatus {
    SERVICE_STATUS_UNSPECIFIED = 0;
    SERVICE_STATUS_SUCCESS = 1;
    SERVICE_STATUS_FAILURE = 2;
  }
  ServiceStatus status = 5;

  // If status == SERVICE_STATUS_FAILURE, cause for the failure
  string failure_cause = 6;

  // Authentication related details
  AuthDetail authen = 7;

  // Optional repeated task_id that represent tasks that were used to
  // accomplish the request on the system.
  repeated string task_ids = 32;
}

// RecordRequest, requests a starting point for records to be sent to the
// caller.
// The receiver then can signal back to the sender periodic sync messages to
// acknowledge received records.
// The timestamp indicates the last processed Record at the caller.
message RecordRequest {
  // The time when the system recorded this event represented as nanoseconds
  // since the unix epoch.
  google.protobuf.Timestamp timestamp = 2;
}
